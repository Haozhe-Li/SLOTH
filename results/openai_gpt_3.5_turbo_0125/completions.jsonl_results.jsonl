{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    \n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i+1]) < threshold:\n            return True\n        \n    return False\n\n# Testing the function\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))  # False\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # True", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    open_index = None\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            open_index = i\n        elif char == ')':\n            if open_index is not None:\n                result.append(paren_string[open_index:i+1])\n                open_index = None\n\n    return result\n\n# Test the function with the provided example\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)\n\n# Test the function with example\nprint(truncate_number(3.5))  # Output should be 0.5", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = sum(numbers) / len(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)\n\n\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))  # Output: 1.0", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for num in numbers:\n        result.extend([num, delimeter])\n    result.pop()  # remove the extra delimiter at the end\n    return result", "result": "failed: pop from empty list", "passed": false}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    current_depth = 0\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n        elif char == ')':\n            result.append(current_depth)\n            current_depth -= 1\n    return result\n\n# Test the function\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/7", "completion": "return [s for s in strings if substring in s]", "result": "failed: 'return' outside function (<string>, line 11)", "passed": false}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return 0, 1\n    else:\n        s = sum(numbers)\n        p = 1\n        for num in numbers:\n            p *= num\n        return s, p\n\n\n# Test the function\nprint(sum_product([]))  # Output: (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # Output: (10, 24)", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = [numbers[0]]\n    max_num = numbers[0]\n\n    for num in numbers[1:]:\n        max_num = max(max_num, num)\n        result.append(max_num)\n\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    \"\"\"\n    if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]\n\n    return ''", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Testing the function\nif __name__ == \"__main__\":\n    print(greatest_common_divisor(3, 5))  # Output: 1\n    print(greatest_common_divisor(25, 15))  # Output: 5", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)\n\n# Test the function with given test cases\nprint(count_distinct_characters('xyzXYZ'))  # Output: 3\nprint(count_distinct_characters('Jerry'))  # Output: 4", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes_list = music_string.split()\n    return [notes[note] for note in notes_list]", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    if not string or not substring:\n        return 0\n    \n    count = 0\n    start = 0\n    \n    while start < len(string):\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n        \n    return count\n\n# Test the function\nprint(how_many_times('', 'a'))  # 0\nprint(how_many_times('aaa', 'a'))  # 3\nprint(how_many_times('aaaa', 'aa'))  # 3", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_to_str = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n\n    str_to_num = {v: k for k, v in num_to_str.items()}\n\n    nums = numbers.split()\n    sorted_nums = sorted(nums, key=lambda x: num_to_str[x])\n\n    return ' '.join(sorted_nums)\n\n# Test the function with the example provided\nprint(sort_numbers('three one five'))  # Output: 'one three five'", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    \n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    \n    return closest_pair\n\n\n# Test the function\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Output: (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # Output: (2.0, 2.0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n\n# Testing the function\nprint(strlen(''))  # Output: 0\nprint(strlen('abc'))  # Output: 3", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n# Test the function with the example from the docstring\nprint(largest_divisor(15))  # Output: 5", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    unique_numbers = []\n\n    for num in numbers:\n        if num not in seen:\n            unique_numbers.append(num)\n            seen.add(num)\n\n    return unique_numbers\n\n# Test the function\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = ''\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "return ''.join(strings)", "result": "failed: 'return' outside function (<string>, line 11)", "passed": false}
{"task_id": "HumanEval/29", "completion": "return [s for s in strings if s.startswith(prefix)]", "result": "failed: 'return' outside function (<string>, line 11)", "passed": false}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n\n# Testing the function\nprint(get_positive([-1, 2, -4, 5, 6]))  # Output: [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: [5, 3, 2, 3, 9, 123, 1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Run the given test cases\nimport doctest\ndoctest.testmod()", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients should be even\")\n\n    non_zero_max_coeff = max([abs(coeff) for coeff in xs[1:]])\n\n    if non_zero_max_coeff == 0:\n        raise ValueError(\"No non-zero coefficients found\")\n\n    possible_zeros = [i for i in range(-1000, 1001) if poly(xs, i) == 0]\n\n    if len(possible_zeros) > 1:\n        return possible_zeros[0]\n    else:\n        raise ValueError(\"No zero found\")\n\n\n# Run the doctests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "failed: unindent does not match any outer indentation level (<string>, line 27)", "passed": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])\n    sorted_values = [l[i] for i in sorted_indices]\n    \n    result = l.copy()\n    \n    for i, index in enumerate(sorted_indices):\n        result[index] = sorted_values[i]\n    \n    return result\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "completion": "def unique(l):\n    return sorted(list(set(l))) # Convert list to set to get unique elements, then convert back to list and sort it\n\n# Test the function\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output should be [0, 2, 3, 5, 9, 123]", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n\n# Testing the function\nprint(max_element([1, 2, 3]))  # Output: 3\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: 123", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += 1\n    return count\n\n# Testing the function with given test cases\nprint(fizz_buzz(50))  # Output should be 0\nprint(fizz_buzz(78))  # Output should be 2\nprint(fizz_buzz(79))  # Output should be 3", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    sorted_even_values = sorted(even_values)\n    \n    result = l.copy()\n    for i, val in zip(even_indices, sorted_even_values):\n        result[i] = val\n        \n    return result\n\n# Test cases\nprint(sort_even([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))  # Output: [3, 6, 5, 4]", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # decode cyclic elements in each group.\n    decoded_groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(decoded_groups)", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    fib_numbers = [1, 1]\n    while len(fib_numbers) <= n:\n        fib_numbers.append(fib_numbers[-1] + fib_numbers[-2])\n    for num in fib_numbers:\n        if is_prime(num):\n            n -= 1\n        if n == 0:\n            return num\n\n# Testing the function\nimport doctest\ndoctest.testmod()", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    n = len(l)\n    if n < 3:\n        return False\n\n    # Sort the list to make finding triplets easier\n    l.sort()\n\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n\n# Test cases\nprint(triples_sum_to_zero([1, 3, 5, 0]))  # False\nprint(triples_sum_to_zero([1, 3, -2, 1]))   # True\nprint(triples_sum_to_zero([1, 2, 3, 7]))   # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))   # True\nprint(triples_sum_to_zero([1]))   # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * (n - 1) // 2", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [num + 1 for num in l]\n\n# test cases\nprint(incr_list([1, 2, 3]))  # [2, 3, 4]\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # [6, 4, 6, 3, 4, 4, 10, 1, 124]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n\n    return False\n\n# Test cases\nprint(pairs_sum_to_zero([1, 3, 5, 0]))  # False\nprint(pairs_sum_to_zero([1, 3, -2, 1]))  # False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))  # False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # True\nprint(pairs_sum_to_zero([1]))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    if x == 0:\n        return '0'\n    \n    result = ''\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result\n\n# Run the provided test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n\n# Test the function\nprint(triangle_area(5, 3))  # Output: 7.5", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n\n# Test cases\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        return sorted_list[n // 2]\n\n# Test cases\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)\n\n# Example usage\nprint(modp(3, 5))  # Output: 3\nprint(modp(1101, 101))  # Output: 2\nprint(modp(0, 101))  # Output: 1\nprint(modp(3, 11))  # Output: 8\nprint(modp(100, 101))  # Output: 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "passed", "passed": true}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l, t):\n    return all(num < t for num in l)\n\n\n# Testing the function with provided test cases\nprint(below_threshold([1, 2, 4, 10], 100))  # True\nprint(below_threshold([1, 20, 4, 10], 5))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n    \"\"\"Add two numbers x and y\"\"\"\n    return x + y\n\n# Test the function with sample inputs\nprint(add(2, 3))  # Output: 5\nprint(add(5, 7))  # Output: 12", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)\n\n\n# Run the given test cases\nimport doctest\ndoctest.testmod()", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n# Test the function\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# Testing the function with the given test cases\nprint(correct_bracketing(\"<\"))\nprint(correct_bracketing(\"<>\"))\nprint(correct_bracketing(\"<<><>>\"))\nprint(correct_bracketing(\"><<>\"))", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i+1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n\n# Test cases\nprint(monotonic([1, 2, 4, 20]))  # Output: True\nprint(monotonic([1, 20, 4, 10]))  # Output: False\nprint(monotonic([4, 1, 0, -10]))  # Output: True", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    common_elements = set(l1) & set(l2)\n    return sorted(list(set(common_elements)))\n\n# Test the function\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # [2, 3]", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Test the function\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2\n\n# test cases\nprint(sum_to_n(30))  # 465\nprint(sum_to_n(100))  # 5050\nprint(sum_to_n(5))  # 15\nprint(sum_to_n(10))  # 55\nprint(sum_to_n(1))  # 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    \n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n\n# Testing the function\nprint(correct_bracketing(\"(\")) # False\nprint(correct_bracketing(\"()\")) # True\nprint(correct_bracketing(\"(()())\")) # True\nprint(correct_bracketing(\")(()\")) # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    derivative_coeffs = [xs[i] * i for i in range(1, len(xs))]\n    return derivative_coeffs\n\n# Test the function\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))  # Output: [2, 6]", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return n - 1\n\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n\n    return c\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = 'aeiou'\n    s = s.lower()\n    count = 0\n\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif i == len(s) - 1 and s[i] == 'y':\n            count += 1\n\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Output: 2\nprint(vowels_count(\"ACEDY\"))  # Output: 3\nprint(vowels_count(\"python\"))  # Output: 1\nprint(vowels_count(\"onomatopoeia\"))  # Output: 7\nprint(vowels_count(\"programming\"))  # Output: 3", "result": "passed", "passed": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    \n    if shift > length:\n        return x_str[::-1]\n    \n    shift %= length\n    shifted_str = x_str[length - shift:] + x_str[:length - shift]\n    return shifted_str\n\n# Testing the function\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n\n# Test cases\nprint(digitSum(\"\"))  # Output: 0\nprint(digitSum(\"abAB\"))  # Output: 131\nprint(digitSum(\"abcCd\"))  # Output: 67\nprint(digitSum(\"helloE\"))  # Output: 69\nprint(digitSum(\"woArBld\"))  # Output: 131\nprint(digitSum(\"aAaaaXa\"))  # Output: 153", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples = 0\n    oranges = 0\n    for word in s.split():\n        if word == 'apples':\n            apples = int(s.split()[s.split().index(word)-1])\n        elif word == 'oranges':\n            oranges = int(s.split()[s.split().index(word)-1])\n    return n - apples - oranges\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # Output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # Output: 19", "result": "passed", "passed": true}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [(index, node) for index, node in enumerate(arr) if node % 2 == 0]\n    \n    if not even_nodes:\n        return []\n    \n    smallest_even_value = min(even_nodes, key=lambda x: (x[1], x[0]))\n    \n    return [smallest_even_value[1], smallest_even_value[0]]", "result": "passed", "passed": true}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\ndef search(lst):\n    count = Counter(lst)\n    max_val = -1\n    for key, value in count.items():\n        if key > 0 and value >= key:\n            max_val = max(max_val, key)\n    return max_val\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1])) # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # Output: 3\nprint(search([5, 5, 4, 4, 4])) # Output: -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    lst.sort()\n    \n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n\n# Test cases\nprint(triangle_area(3, 4, 5))  # Output: 6.0\nprint(triangle_area(1, 2, 10))  # Output: -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the list is palindromic\n    if q != q[::-1]:\n        return False\n    \n    # Check if the sum of elements is less than or equal to the maximum weight\n    if sum(q) <= w:\n        return True\n    else:\n        return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    \n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    \n    return changes\n\n# Test cases\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))     # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))            # Output: 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total_chars_lst1 = sum([len(word) for word in lst1])\n    total_chars_lst2 = sum([len(word) for word in lst2])\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1\n\n# Test cases\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    primes = []\n    for i in range(2, 100):\n        if is_prime(i):\n            primes.append(i)\n            if len(primes) == 3:\n                break\n\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False\n\n# Test the function\nprint(is_multiply_prime(30))  # Output: True\nprint(is_multiply_prime(20))  # Output: False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    root = int(x ** (1/n))\n    return n ** root == x\n\n# Test cases\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False", "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return round(a**(1/3))**3 == a\n\n# Test cases\nprint(iscube(1))  # True\nprint(iscube(2))  # False\nprint(iscube(-1))  # True\nprint(iscube(64))  # True\nprint(iscube(0))  # True\nprint(iscube(180))  # False", "result": "failed: type complex doesn't define __round__ method", "passed": false}
{"task_id": "HumanEval/78", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            if is_prime(int(digit, 16)):\n                count += 1\n    return count\n\n# Test cases\nprint(hex_key(\"AB\"))  # Output: 1\nprint(hex_key(\"1077E\"))  # Output: 2\nprint(hex_key(\"ABED1A33\"))  # Output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output: 6\nprint(hex_key(\"2020\"))  # Output: 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n\n# Test cases\nprint(decimal_to_binary(15))  # \"db1111db\"\nprint(decimal_to_binary(32))  # \"db100000db\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(2, len(s)):\n        if s[i] == s[i-1] or s[i] == s[i-2] or s[i-1] == s[i-2]:\n            return False\n    return True\n\n# Test cases\nprint(is_happy(\"a\"))  # False\nprint(is_happy(\"aa\"))  # False\nprint(is_happy(\"abcd\"))  # True\nprint(is_happy(\"aabb\"))  # False\nprint(is_happy(\"adb\"))  # True\nprint(is_happy(\"xyy\"))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('D-')\n    return letter_grades\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # ['A+', 'C', 'C-', 'C', 'A-']", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)\n\n# Test cases\nprint(prime_length('Hello'))  # True\nprint(prime_length('abcdcba'))  # True\nprint(prime_length('kittens'))  # True\nprint(prime_length('orange'))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 2\n    else:\n        count = 2  # Numbers ending with 1 or starting with 1\n        count += 8 ** (n-2)  # Numbers starting with 1 and ending with any digit\n        return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_sum = sum(map(int, bin(N)[2:]))  # Get binary representation of N and sum its digits\n    return bin(binary_sum)[2:]  # Return the binary representation of the sum without the '0b' prefix\n\n# Test cases\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\"", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n# Test the function\nprint(add([4, 2, 6, 7]))  # Output: 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    def sort_word(word):\n        return ''.join(sorted(word))\n\n    words = s.split()\n    sorted_words = [sort_word(word) for word in words]\n    return ' '.join(sorted_words)\n\n# Test cases\nprint(anti_shuffle('Hi'))  # Output: Hi\nprint(anti_shuffle('hello'))  # Output: ehllo\nprint(anti_shuffle('Hello World!!!'))  # Output: Hello !!!Wdlor", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    sorted_array = array.copy()\n    if array:\n        if (array[0] + array[-1]) % 2 == 1:\n            return sorted_array.sort()\n        else:\n            return sorted_array.sort(reverse=True)\n    else:\n        return sorted_array\n\n# Test cases\nprint(sort_array([]))  # []\nprint(sort_array([5]))  # [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # [6, 5, 4, 3, 2, 1, 0]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            result += chr((ord(char) - base + 2 * 2) % 26 + base)\n        else:\n            result += char\n    return result\n\n# Test cases\nprint(encrypt('hi'))         # Output: 'lm'\nprint(encrypt('asdfghjkl'))  # Output: 'ewhjklnop'\nprint(encrypt('gf'))         # Output: 'kj'\nprint(encrypt('et'))         # Output: 'ix'", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    unique_list = list(set(lst))\n    unique_list.sort()\n    \n    if len(unique_list) < 2:\n        return None\n    \n    return unique_list[1]\n    \n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # 2\nprint(next_smallest([]))  # None\nprint(next_smallest([1, 1]))  # None", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('. ') + S.split('? ') + S.split('! ')\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith('I '):\n            count += 1\n    return count\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # 1", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if all(isinstance(num, int) for num in (x, y, z)):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n# Test cases\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'AEIOUaeiou'\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.upper() in vowels:\n                new_char = chr(ord(char) + 2)\n            else:\n                new_char = char.swapcase()\n        else:\n            new_char = char\n        encoded_message += new_char\n        \n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # 'TGST'\nprint(encode('This is a message'))  # 'tHKS KS C MGSSCGG'", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime_sum(lst):\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    if largest_prime is None:\n        return 0\n    return sum(int(digit) for digit in str(largest_prime))\n\n# Test cases\nprint(largest_prime_sum([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # 10\nprint(largest_prime_sum([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # 25\nprint(largest_prime_sum([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # 13\nprint(largest_prime_sum([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # 11\nprint(largest_prime_sum([0,81,12,3,1,21]))  # 3\nprint(largest_prime_sum([0,8,1,2,1,7]))  # 7", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    keys = list(dict.keys())\n    is_lower = all(key.islower() for key in keys)\n    is_upper = all(key.isupper() for key in keys)\n\n    return is_lower or is_upper", "result": "failed: 'int' object has no attribute 'islower'", "passed": false}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = [num for num in range(n) if is_prime(num)]\n    return primes\n\n# Test cases\nprint(count_up_to(5))   # [2, 3]\nprint(count_up_to(11))  # [2, 3, 5, 7]\nprint(count_up_to(0))   # []\nprint(count_up_to(20))  # [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))   # []\nprint(count_up_to(18))  # [2, 3, 5, 7, 11, 13, 17]", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # Get the unit digits of the numbers\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    \n    # Calculate the product of the unit digits\n    result = unit_a * unit_b\n    \n    return result\n\n# Test cases\nprint(multiply(148, 412))  # Output: 16\nprint(multiply(19, 28))  # Output: 72\nprint(multiply(2020, 1851))  # Output: 0\nprint(multiply(14, -15))  # Output: 20", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = set('AEIOU')\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n\n# Test the function\nprint(count_upper('aBCdEf'))  # Output should be 1\nprint(count_upper('abcdefg'))  # Output should be 0\nprint(count_upper('dBBE'))     # Output should be 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    lower_int = int(num)\n    upper_int = lower_int + 1\n\n    if num - lower_int >= upper_int - num:\n        return upper_int\n    else:\n        return lower_int\n\n# Test cases\nprint(closest_integer(\"10\"))  # Output: 10\nprint(closest_integer(\"15.3\"))  # Output: 15\nprint(closest_integer(\"14.5\"))  # Output: 15\nprint(closest_integer(\"-14.5\"))  # Output: -15", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = []  \n    for i in range(n):\n        stones.append(n + 2*i)\n        \n    return stones", "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    words = [word.strip() for word in s.replace(',', ' ').split()]\n    return words\n\n# Test cases\nprint(words_string(\"Hi, my name is John\"))  # [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    biggest_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > biggest_even:\n            biggest_even = num\n    return biggest_even\n\n# Test cases\nprint(choose_num(12, 15))  # Output: 14\nprint(choose_num(13, 12))  # Output: -1", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = []\n    \n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    \n    return sorted(result)\n\n# Test cases\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    valid_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    filtered_arr = [num for num in arr if num in valid_nums]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    \n    num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    result = [num_to_word[num] for num in reversed_arr]\n    \n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\n# Test\nprint(f(5))  # Output: [1, 2, 6, 24, 15]", "result": "passed", "passed": true}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\n# Test the function\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12))  # Output: (4, 6)", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        num = abs(num)\n        return sum(int(digit) for digit in str(num))\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count\n\n# test the function with given test cases\nprint(count_nums([]))  # 0\nprint(count_nums([-1, 11, -11]))  # 1\nprint(count_nums([1, 1, 2]))  # 3", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n\n    arr_sorted = sorted(arr)\n    \n    for i in range(len(arr)):\n        shifted = arr[i:] + arr[:i]\n        if shifted == arr_sorted:\n            return True\n            \n    return False\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Check if there are odd numbers in lst1\n    odd_count = sum(1 for n in lst1 if n % 2 != 0)\n    \n    if odd_count == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    letters = test.split()\n    letter_counts = {}\n    \n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    max_count = max(letter_counts.values()) if letter_counts else 0\n    result = {key: value for key, value in letter_counts.items() if value == max_count}\n    \n    return result\n\n# Test cases\nprint(histogram('a b c'))  # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))  # {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))  # {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))  # {'b': 4}\nprint(histogram(''))  # {}", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    s = [ch for ch in s if ch not in c]\n    result = ''.join(s)\n    return result, result == result[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for string in lst:\n        odd_digits_count = sum(int(digit) % 2 != 0 for digit in string)\n        output_str = f\"the number of odd elements {'4' if odd_digits_count == 4 else odd_digits_count}n the str{odd_digits_count}ng {string} of the {odd_digits_count}nput.\"\n        result.append(output_str)\n    return result\n\n# Testing the function with the examples provided in the problem statement\nprint(odd_count(['1234567']))\nprint(odd_count(['3', '11111111']))", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float(\"inf\")\n    current_sum = 0\n    \n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        current_sum = max(current_sum, 0)\n    \n    return min_sum\n\n# Test the function with provided examples\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output should be 1\nprint(minSubArraySum([-1, -2, -3]))        # Output should be -6", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, bucket_capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    total_water = sum(sum(row) for row in grid)\n    result = 0\n\n    while total_water > 0:\n        buckets = 0\n        for row in grid:\n            for i in range(cols):\n                if row[i] == 1:\n                    if buckets < bucket_capacity:\n                        buckets += 1\n                        total_water -= 1\n        result += 1\n\n    return result\n\n# Example 1\ngrid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\ncapacity1 = 1\nprint(max_fill(grid1, capacity1)) # Output: 6\n\n# Example 2\ngrid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\ncapacity2 = 2\nprint(max_fill(grid2, capacity2)) # Output: 5\n\n# Example 3\ngrid3 = [[0,0,0], [0,0,0]]\ncapacity3 = 5\nprint(max_fill(grid3, capacity3)) # Output: 0", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(num):\n        return bin(num).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "def count_consonants(word):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    return sum(1 for char in word if char in consonants)\n\ndef select_words(s, n):\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n\n# Test cases\nprint(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))  # []\nprint(select_words(\"Hello world\", 4))  # [\"world\"]\nprint(select_words(\"Uncle sam\", 3))  # [\"Uncle\"]", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = set([chr(i) for i in range(65, 91)]) - vowels\n    right_vowel = ''\n    \n    for i in range(len(word)-1, 1, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i-2] in consonants:\n            right_vowel = word[i]\n            break\n    \n    return right_vowel", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # Count the total number of opening '(' and closing ')' parentheses in both strings\n    open_cnt = lst[0].count('(') + lst[1].count('(')\n    close_cnt = lst[0].count(')') + lst[1].count(')')\n\n    # If the number of opening and closing parentheses are equal, return 'Yes'\n    if open_cnt == close_cnt:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(match_parens(['()(', ')']))  # 'Yes'\nprint(match_parens([')', ')']))      # 'No'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)\n\n# Test cases\nprint(solution([5, 8, 7, 1]))  # Output: 12\nprint(solution([3, 3, 3, 3, 3]))  # Output: 9\nprint(solution([30, 13, 24, 321]))  # Output: 0", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    total = 0\n    count = 0\n\n    for num in arr[:k]:\n        if 10 <= num <= 99:\n            total += num\n            count += 1\n\n    return total", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    result = set()\n    num = n\n    while num != 1:\n        if num % 2 == 1:\n            result.add(num)\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num = 3 * num + 1\n    result.add(1)\n    \n    return sorted(list(result))\n\n# Test the function with the given example\nprint(get_odd_collatz(5))  # Output should be [1, 5]", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if len(date) != 10:\n        return False\n    \n    if date[2] != '-' or date[5] != '-':\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n        \n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # \u279e 3", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    counter = {}\n    for num in lst:\n        if num in counter:\n            counter[num] += 1\n            if counter[num] > 1:\n                return False\n        else:\n            counter[num] = 1\n\n    return lst == sorted(lst)\n\n# Test the function with the provided examples\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # \u279e False", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    product = 1\n    sum_magnitude = 0\n\n    for num in arr:\n        sign = 1 if num > 0 else (-1 if num < 0 else 0)\n        product *= sign\n        sum_magnitude += abs(num)\n\n    return product * sum_magnitude\n\n# Test the function with the given examples\nprint(prod_signs([1, 2, 2, -4]))  # Output should be -9\nprint(prod_signs([0, 1]))  # Output should be 0\nprint(prod_signs([]))  # Output should be None", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n\n    def get_neighbors(i, j):\n        neighbors = []\n        if i > 0:\n            neighbors.append((i-1, j))\n        if i < n - 1:\n            neighbors.append((i+1, j))\n        if j > 0:\n            neighbors.append((i, j-1))\n        if j < n - 1:\n            neighbors.append((i, j+1))\n        return neighbors\n\n    def dfs(i, j, path):\n        path.append(grid[i][j])\n        visited[i][j] = True\n        if len(path) == k:\n            return path\n\n        neighbors = get_neighbors(i, j)\n        neighbors.sort(key=lambda x: grid[x[0]][x[1]])\n        for x, y in neighbors:\n            if not visited[x][y]:\n                result = dfs(x, y, path[:])\n                if result:\n                    return result\n        visited[i][j] = False\n\n    for i in range(n):\n        for j in range(n):\n            path = dfs(i, j, [])\n            if path:\n                return path", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    tb = [0] * (n + 1)\n    tb[1] = 3\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tb[i] = tb[i-1] + i // 2\n        else:\n            tb[i] = tb[i-1] + tb[i-2] + tb[i-3]\n\n    return tb[1:]\n\n# Test the function with example cases\nprint(tri(3))  # Output should be [3, 2, 8]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    all_even = True\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            all_even = False\n        n //= 10\n    return product if not all_even else 0\n\n# Test cases\nprint(digits(1))  # Output: 1\nprint(digits(4))  # Output: 0\nprint(digits(235))  # Output: 15", "result": "passed", "passed": true}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    opening_bracket_positions = []\n    \n    for index, char in enumerate(string):\n        if char == '[':\n            opening_bracket_positions.append(index)\n        elif char == ']':\n            if opening_bracket_positions:\n                opening_bracket_positions.pop()\n    \n    if len(opening_bracket_positions) < 2:\n        return False\n    else:\n        return opening_bracket_positions[0] < opening_bracket_positions[-1]\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += int(num)**2\n    return total\n\n# Test cases\nprint(sum_squares([1, 2, 3]))  # Output: 14\nprint(sum_squares([1, 4, 9]))  # Output: 98\nprint(sum_squares([1, 3, 5, 7]))  # Output: 84\nprint(sum_squares([1.4, 4.2, 0]))  # Output: 29\nprint(sum_squares([-2.4, 1, 1]))  # Output: 6", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.strip()\n    if txt == '':\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if len(txt.split()[-1]) == 1:\n            return True\n    return False\n\n# Test the function with the given examples\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    if not arr:\n        return -1\n\n    max_index = -1\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            max_index = i\n\n    return max_index\n\n# Test cases\nprint(can_arrange([1,2,4,3,5]))  # Output should be 3\nprint(can_arrange([1,2,3]))       # Output should be -1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg_integers = [n for n in lst if n < 0]\n    pos_integers = [n for n in lst if n > 0]\n\n    largest_negative = None\n    smallest_positive = None\n\n    if neg_integers:\n        largest_negative = max(neg_integers)\n\n    if pos_integers:\n        smallest_positive = min(pos_integers)\n\n    return (largest_negative, smallest_positive)\n\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # (None, 1)\nprint(largest_smallest_integers([]))  # (None, None)\nprint(largest_smallest_integers([0]))  # (None, None)", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if type(a) == type(b):\n        if a > b:\n            return a\n        elif b > a:\n            return b\n        else:\n            return None\n    else:\n        if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n            a = float(str(a).replace(',', '.'))\n            if a > b:\n                return a\n            elif b > a:\n                return b\n            else:\n                return None\n        else:\n            return a if type(a) != int else b\n\n# Test cases\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\nprint(compare_one(\"1\", 1))  # \u279e None", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    if n % 2 != 0 or n < 8:\n        return False\n    return True\n\n# Test cases\nprint(is_equal_to_sum_even(4))  # False\nprint(is_equal_to_sum_even(6))  # False\nprint(is_equal_to_sum_even(8))  # True", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    if n <= 0:\n        return None\n\n    result = 1\n    for i in range(1, n+1):\n        result *= math.factorial(i)\n\n    return result\n\n# Test the function\nprint(special_factorial(4))  # Output: 288", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(' ', '_')\n    result = ''\n    count = 0\n\n    for char in text:\n        if char == '_':\n            count += 1\n            if count > 2:\n                result += '-'\n                count = 0\n            else:\n                result += '_'\n        else:\n            result += char\n            count = 0\n\n    return result\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # \"Example\"\nprint(fix_spaces(\"Example 1\"))  # \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # \"_Example-3\"", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    if not re.match('^[a-zA-Z][a-zA-Z0-9]*\\.(txt|exe|dll)$', file_name):\n        return 'No'\n    if len(re.findall('[0-9]', file_name)) > 3:\n        return 'No'\n    return 'Yes'\n\n# Test cases\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\"))  # => 'No'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result\n\n# Test cases\nprint(sum_squares([1, 2, 3]))  # Output should be 6\nprint(sum_squares([]))  # Output should be 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Output should be -126", "result": "passed", "passed": true}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n\n# Test the function with examples\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\"", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n\n    result = x_fraction * n_fraction\n\n    return result == int(result)\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def calc_sum_of_digits(num):\n        return sum(map(int, str(abs(num))))\n\n    return sorted(nums, key=lambda x: (calc_sum_of_digits(x), nums.index(x)))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    count = 0\n    arr = [i * i - i + 1 for i in range(1, n+1)]\n\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n\n    return count\n\n# Test the function with the given example\nn = 5\nprint(get_max_triples(n))  # Output: 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    start = min(index1, index2)\n    end = max(index1, index2)\n    \n    return tuple(p for p in planets[start+1:end])", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    even_length_words = [word for word in lst if len(word) % 2 == 0]\n    sorted_words = sorted(even_length_words, key=lambda x: (len(x), x))\n    return sorted_words", "result": "passed", "passed": true}
{"task_id": "HumanEval/150", "completion": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = math.isqrt(n)\n    for d in range(3, max_divisor + 1, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Test cases\nprint(x_or_y(7, 34, 12))  # Output: 34\nprint(x_or_y(15, 8, 5))   # Output: 5", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    total = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0 and type(num) == int:\n            total += num ** 2\n    return total\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))  # Output: 10\nprint(double_the_difference([-1, -2, 0]))  # Output: 0\nprint(double_the_difference([9, -2]))  # Output: 81\nprint(double_the_difference([0]))  # Output: 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "def compare(scores, guesses):\n    result = []\n    for i in range(len(scores)):\n        result.append(abs(scores[i] - guesses[i]))\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def get_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    max_strength = float('-inf')\n    strongest_extension = \"\"\n\n    for extension in extensions:\n        strength = get_strength(extension)\n        if strength > max_strength or (strength == max_strength and extensions.index(extension) < extensions.index(strongest_extension)):\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n\n# Test the function\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: 'my_class.AA'", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    for _ in range(len(b)):\n        if b in a:\n            return True\n        b = b[1:] + b[0]\n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\")) # False\nprint(cycpattern_check(\"hello\", \"ell\")) # True\nprint(cycpattern_check(\"whassup\", \"psus\")) # False\nprint(cycpattern_check(\"abab\", \"baa\")) # True\nprint(cycpattern_check(\"efef\", \"eeff\")) # False\nprint(cycpattern_check(\"himenss\", \"simen\")) # True", "result": "failed: test #1", "passed": false}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    if not 0 < number < 1001:\n        raise ValueError(\"Number must be between 1 and 1000\")\n\n    roman_numerals = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n                      100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    result = \"\"\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()\n\n# Test cases\nprint(int_to_mini_roman(19))  # 'xix'\nprint(int_to_mini_roman(152))  # 'clii'\nprint(int_to_mini_roman(426))  # 'cdxxvi'", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_word = word\n            max_unique_chars = unique_chars\n\n    return max_word", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_carrots = number + need\n    if remaining >= need:\n        return [total_carrots, remaining - need]\n    else:\n        return [total_carrots + remaining, 0]\n\n# Test cases\nprint(eat(5, 6, 10))  # [11, 4]\nprint(eat(4, 8, 9))  # [12, 1]\nprint(eat(1, 10, 10))  # [11, 0]\nprint(eat(2, 11, 5))  # [7, 0]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operators, operands):\n    expression = str(operands[0])\n    for op, num in zip(operators, operands[1:]):\n        expression += ' ' + op + ' ' + str(num)\n    return eval(expression)\n\n# Test the function\noperators = ['+', '*', '-']\noperands = [2, 3, 4, 5]\nprint(do_algebra(operators, operands))  # Output: 9", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if all(c.isdigit() or not c.isalpha() for c in s):\n        return s[::-1]\n    else:\n        return ''.join(c.upper() if c.islower() else c.lower() for c in s)", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    result = [digit for digit in range(a, b+1) if digit % 2 == 0]\n    return result", "result": "failed: Test 1", "passed": false}
