{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # Sort the numbers to make comparison easier\n    sorted_numbers = sorted(numbers)\n    \n    # Iterate through the sorted list and check adjacent elements\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i] - sorted_numbers[i + 1]) < threshold:\n            return True\n    \n    return False\n\n# Test cases\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))  # False\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # True"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove all spaces\n    groups = []\n    balance = 0\n    current_group = []\n\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n\n        current_group.append(char)\n\n        # When balance is zero, we've completed a group\n        if balance == 0:\n            groups.append(''.join(current_group))\n            current_group = []  # Reset for the next group\n\n    return groups\n\n# Example usage\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "import math\n\ndef truncate_number(number: float) -> float:\n    fractional_part, _ = math.modf(number)\n    return fractional_part\n\n# Example usage\nprint(truncate_number(3.5))  # Output: 0.5"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Example usage:\nprint(below_zero([1, 2, 3]))  # Output: False\nprint(below_zero([1, 2, -4, 5]))  # Output: True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list of numbers should not be empty\")\n    \n    # Step 1: Calculate the mean of the numbers\n    mean_value = sum(numbers) / len(numbers)\n    \n    # Step 2: Calculate the absolute differences from the mean\n    absolute_differences = [abs(x - mean_value) for x in numbers]\n    \n    # Step 3: Calculate the mean of the absolute differences\n    mad = sum(absolute_differences) / len(absolute_differences)\n    \n    return mad\n\n# Test the function with the provided example\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))  # Output should be 1.0"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers'.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimiter)\n        result.append(num)\n    \n    return result\n\n# Example usage\nprint(intersperse([], 4))  # Output: []\nprint(intersperse([1, 2, 3], 4))  # Output: [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": ""}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"Filter an input list of strings to only include those that contain the given substring.\n    \n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to look for in each string.\n    \n    Returns:\n        List[str]: A list of strings that contain the given substring.\n    \n    Examples:\n        >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\nfrom functools import reduce\nimport operator\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    # Calculate the sum of the numbers, default to 0 if the list is empty\n    total_sum = sum(numbers, 0)\n    \n    # Calculate the product of the numbers, default to 1 if the list is empty\n    total_product = reduce(operator.mul, numbers, 1)\n    \n    return total_sum, total_product\n\n# Example usage\nprint(sum_product([]))          # Output: (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # Output: (10, 24)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    max_list = []\n    current_max = numbers[0]\n    max_list.append(current_max)\n    \n    for num in numbers[1:]:\n        if num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    \n    return max_list\n\n# Example usage\nif __name__ == \"__main__\":\n    print(rolling_max([1, 2, 3, 2, 3, 4, 2]))  # Output: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    if not string:\n        return string\n    \n    # Start from the whole string and reduce until prefix + suffix creates a palindrome\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            # Append the reverse of the non-palindromic prefix to the end of the string\n            return string + string[:i][::-1]\n    \n    return string\n\n# Test cases\nprint(make_palindrome(''))        # Output: ''\nprint(make_palindrome('cat'))     # Output: 'catac'\nprint(make_palindrome('cata'))    # Output: 'catac'"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" \n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    \n    result = []\n    for char_a, char_b in zip(a, b):\n        # XOR operation: '1' if bits are different, '0' if they are the same\n        result.append('1' if char_a != char_b else '0')\n    \n    return ''.join(result)\n\n# Example usage\nprint(string_xor('010', '110'))  # Output: '100'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for string in strings[1:]:\n        if len(string) > len(longest_string):\n            longest_string = string\n    \n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n\n# Example usage\nif __name__ == \"__main__\":\n    print(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "completion": ""}
{"task_id": "HumanEval/17", "completion": ""}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases. \"\"\"\n    count = start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1  # Move start just after the last found occurrence to allow overlap\n        else:\n            break\n    return count\n\n# Test cases\nprint(how_many_times('', 'a'))  # Output: 0\nprint(how_many_times('aaa', 'a'))  # Output: 3\nprint(how_many_times('aaaa', 'aa'))  # Output: 3"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Mapping of numberals to their corresponding numerical values\n    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping of numerical values back to numberals\n    number_to_numeral = {v: k for k, v in numeral_to_number.items()}\n    \n    # Split the input string into a list of numberals\n    numeral_list = numbers.split()\n    \n    # Convert the list of numberals to their corresponding numerical values\n    number_list = [numeral_to_number[numeral] for numeral in numeral_list]\n    \n    # Sort the list of numerical values\n    sorted_number_list = sorted(number_list)\n    \n    # Convert the sorted list of numerical values back to numberals\n    sorted_numeral_list = [number_to_numeral[number] for number in sorted_number_list]\n    \n    # Join the sorted list of numberals into a space-delimited string\n    sorted_numbers_string = ' '.join(sorted_numeral_list)\n    \n    return sorted_numbers_string\n\n# Example usage\nprint(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Step 1: Sort the list of numbers\n    sorted_numbers = sorted(numbers)\n    \n    # Step 2: Initialize variables to track the smallest difference and closest pair\n    min_diff = float('inf')\n    closest_pair = (None, None)\n    \n    # Step 3: Iterate through the sorted list and compare consecutive elements\n    for i in range(len(sorted_numbers) - 1):\n        num1 = sorted_numbers[i]\n        num2 = sorted_numbers[i + 1]\n        diff = num2 - num1\n        \n        # Step 4: Update the smallest difference and closest pair if a smaller difference is found\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (num1, num2)\n    \n    # Step 5: Return the closest pair\n    return closest_pair\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Output: (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # Output: (2.0, 2.0)"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        raise ValueError(\"All numbers in the list are the same. Rescaling is not possible.\")\n    \n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n# Test the function\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"Filter given list of any python values only for integers.\"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(filter_integers(['a', 3.14, 5]))  # Output: [5]\n    print(filter_integers([1, 2, 3, 'abc', {}, []]))  # Output: [1, 2, 3]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n# Example usage:\n# print(strlen(''))  # Output: 0\n# print(strlen('abc'))  # Output: 3"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Start from n-1 and go down to 1\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # This line is theoretically unreachable for n > 1, since 1 divides any integer\n\n# Example usage\nprint(largest_divisor(15))  # Output: 5"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    # Start checking for factors from the smallest prime number, which is 2\n    divisor = 2\n    while n >= 2:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n\n# Test cases\nprint(factorize(8))   # Output: [2, 2, 2]\nprint(factorize(25))  # Output: [5, 5]\nprint(factorize(70))  # Output: [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": ""}
{"task_id": "HumanEval/27", "completion": ""}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n\n# Example usage:\n# print(get_positive([-1, 2, -4, 5, 6]))  # Output: [2, 5, 6]\n# print(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test cases\nprint(is_prime(6))    # False\nprint(is_prime(101))  # True\nprint(is_prime(11))   # True\nprint(is_prime(13441))# True\nprint(is_prime(61))   # True\nprint(is_prime(4))    # False\nprint(is_prime(1))    # False"}
{"task_id": "HumanEval/32", "completion": "import math\nfrom scipy.optimize import fsolve\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list) -> float:\n    \"\"\" \n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even number of elements.\")\n    \n    # fsolve requires a function that takes a single argument x and returns f(x)\n    # We define a lambda function that takes x and returns the polynomial evaluated at x\n    # The initial guess for fsolve should be a reasonable starting point.\n    # Here, we use 0.0 as the initial guess.\n    zero, = fsolve(lambda x: poly(xs, x), 0.0)\n    \n    return zero\n\n# Example Usage:\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # f(x) = 1 + 2x\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    third_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the extracted elements\n    third_elements_sorted = sorted(third_elements)\n    \n    # Create a copy of the original list to modify\n    result = l[:]\n    \n    # Place sorted elements back into the result list at indices divisible by 3\n    sorted_index = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = third_elements_sorted[sorted_index]\n            sorted_index += 1\n    \n    return result\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\"\"\"\n    if not l:  # Check if the list is empty\n        raise ValueError(\"max_element() arg is an empty sequence\")\n\n    max_val = l[0]  # Initialize max_val with the first element of the list\n    for element in l:\n        if element > max_val:\n            max_val = element\n    return max_val\n\n# Test cases\nprint(max_element([1, 2, 3]))  # Output: 3\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: 123"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Test cases\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    # Extract elements at even indices\n    even_index_elements = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the extracted elements\n    even_index_elements.sort()\n    \n    # Create a copy of the original list to modify\n    result = l[:]\n    \n    # Place sorted elements back into their respective even indices\n    even_index = 0\n    for i in range(0, len(l), 2):\n        result[i] = even_index_elements[even_index]\n        even_index += 1\n    \n    return result\n\n# Test cases\nprint(sort_even([1, 2, 3]))        # Output: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))     # Output: [3, 6, 5, 4]\nprint(sort_even([10, 1, 8, 2, 7])) # Output: [7, 1, 8, 2, 10]\nprint(sort_even([4, 5, 2, 3, 1]))  # Output: [1, 5, 2, 3, 4]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    Takes as input a string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Split string into groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n# Example usage:\noriginal_string = \"abcdefg\"\nencoded_string = encode_cyclic(original_string)\ndecoded_string = decode_cyclic(encoded_string)\n\nprint(f\"Original: {original_string}\")\nprint(f\"Encoded: {encoded_string}\")\nprint(f\"Decoded: {decoded_string}\")"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"Return the n-th Fibonacci number that is also prime.\"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    fib_prev, fib_curr = 0, 1\n    count_prime_fibs = 0\n    \n    while True:\n        fib_next = fib_prev + fib_curr\n        fib_prev, fib_curr = fib_curr, fib_next\n        \n        if is_prime(fib_curr):\n            count_prime_fibs += 1\n            if count_prime_fibs == n:\n                return fib_curr\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(prime_fib(1))  # Output: 2\n    print(prime_fib(2))  # Output: 3\n    print(prime_fib(3))  # Output: 5\n    print(prime_fib(4))  # Output: 13\n    print(prime_fib(5))  # Output: 89"}
{"task_id": "HumanEval/40", "completion": ""}
{"task_id": "HumanEval/41", "completion": ""}
{"task_id": "HumanEval/42", "completion": ""}
{"task_id": "HumanEval/43", "completion": ""}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    \"\"\"\n    if x == 0:\n        return \"0\"\n    \n    digits = []\n    while x > 0:\n        remainder = x % base\n        digits.append(str(remainder))\n        x = x // base\n    \n    # The digits are in reverse order, so we need to reverse them\n    digits.reverse()\n    \n    # Join the list of string digits into a single string\n    return ''.join(digits)\n\n# Test cases\nprint(change_base(8, 3))  # Output: '22'\nprint(change_base(8, 2))  # Output: '1000'\nprint(change_base(7, 2))  # Output: '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\n# Example usage\nprint(triangle_area(5, 3))  # Output: 7.5"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    # Base cases\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    \n    # Initialize the first four values of the sequence\n    fib4_values = [0, 0, 2, 0]\n    \n    # Compute the sequence iteratively for n >= 4\n    for i in range(4, n + 1):\n        next_value = sum(fib4_values)\n        # Shift the values to the left and add the new value\n        fib4_values[0] = fib4_values[1]\n        fib4_values[1] = fib4_values[2]\n        fib4_values[2] = fib4_values[3]\n        fib4_values[3] = next_value\n    \n    # The n-th value is the last computed value\n    return fib4_values[3]\n\n# Test cases\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    \n    if n % 2 == 1:\n        # If the length of the list is odd, return the middle element\n        return sorted_list[mid]\n    else:\n        # If the length of the list is even, return the average of the two middle elements\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2.0\n\n# Test cases\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Normalize the text to lowercase to make the function case-insensitive\n    text = text.lower()\n    \n    # Check if the text is equal to its reverse\n    return text == text[::-1]\n\n# Test cases\nprint(is_palindrome(''))       # True\nprint(is_palindrome('aba'))    # True\nprint(is_palindrome('aaaaa'))  # True\nprint(is_palindrome('zbcd'))   # False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)\n\n# Test cases\nprint(modp(3, 5))     # Expected output: 3\nprint(modp(1101, 101)) # Expected output: 2\nprint(modp(0, 101))   # Expected output: 1\nprint(modp(3, 11))    # Expected output: 8\nprint(modp(100, 101))  # Expected output: 1"}
{"task_id": "HumanEval/50", "completion": ""}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns the string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    return all(x < t for x in l)\n\n# Test cases\nprint(below_threshold([1, 2, 4, 10], 100))  # True\nprint(below_threshold([1, 20, 4, 10], 5))   # False"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    \n    Args:\n        x (int): The first number.\n        y (int): The second number.\n        \n    Returns:\n        int: The sum of x and y.\n    \n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return set(s0) == set(s1)\n\n# Test cases\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))              # True\nprint(same_chars('dddddddabc', 'abcd'))              # True\nprint(same_chars('eabcd', 'dddddddabc'))             # False\nprint(same_chars('abcd', 'dddddddabce'))            # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input should be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    \n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n# Test cases\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21"}
{"task_id": "HumanEval/56", "completion": ""}
{"task_id": "HumanEval/57", "completion": ""}
{"task_id": "HumanEval/58", "completion": ""}
{"task_id": "HumanEval/59", "completion": ""}
{"task_id": "HumanEval/60", "completion": ""}
{"task_id": "HumanEval/61", "completion": ""}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    \"\"\"\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))        # Output: [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"Calculate the n-th FibFib number.\"\"\"\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Initialize base cases\n    fibfib_values = [0, 0, 1]\n\n    # Compute the fibfib values up to n\n    for i in range(3, n + 1):\n        next_value = fibfib_values[i - 1] + fibfib_values[i - 2] + fibfib_values[i - 3]\n        fibfib_values.append(next_value)\n\n    return fibfib_values[n]\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n    \"\"\"\n    # Define the set of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    # Convert the string to lowercase to handle case insensitivity\n    s = s.lower()\n    # Initialize the count of vowels\n    count = 0\n    \n    # Iterate over each character in the string\n    for i, char in enumerate(s):\n        # Check if the character is a vowel\n        if char in vowels:\n            count += 1\n        # Check if 'y' is at the end of the word\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    \n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Output: 2\nprint(vowels_count(\"ACEDY\"))  # Output: 3\n\n# Additional test cases\nprint(vowels_count(\"happy\"))  # Output: 1\nprint(vowels_count(\"sky\"))    # Output: 0\nprint(vowels_count(\"rhythm\")) # Output: 0\nprint(vowels_count(\"Y\"))      # Output: 1\nprint(vowels_count(\"fly\"))    # Output: 1\nprint(vowels_count(\"aeiouy\")) # Output: 6\nprint(vowels_count(\"bcdfg\"))  # Output: 0\nprint(vowels_count(\"\"))       # Output: 0\nprint(vowels_count(\"AeIoUy\")) # Output: 6\nprint(vowels_count(\"y\"))      # Output: 1"}
{"task_id": "HumanEval/65", "completion": ""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Takes a string and returns the sum of the ASCII codes of the uppercase characters.\"\"\"\n    # Initialize a variable to hold the sum\n    total = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Add the ASCII value of the uppercase character to the total\n            total += ord(char)\n    \n    # Return the total sum\n    return total\n\n# Test cases\nprint(digitSum(\"\"))        # => 0\nprint(digitSum(\"abAB\"))    # => 131\nprint(digitSum(\"abcCd\"))   # => 67\nprint(digitSum(\"helloE\"))  # => 69\nprint(digitSum(\"woArBld\")) # => 131\nprint(digitSum(\"aAaaaXa\")) # => 153"}
{"task_id": "HumanEval/67", "completion": "import re\n\ndef fruit_distribution(s, n):\n    # Extract numbers from the string\n    numbers = re.findall(r'\\d+', s)\n    # Convert extracted numbers to integers\n    apples, oranges = map(int, numbers)\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # Output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # Output: 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even_value = float('inf')\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_index = index\n    \n    if smallest_index == -1:  # No even value was found\n        return []\n    \n    return [smallest_even_value, smallest_index]\n\n# Example usage:\nprint(pluck([4, 2, 3]))       # Output: [2, 1]\nprint(pluck([1, 2, 3]))       # Output: [2, 1]\nprint(pluck([]))              # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\ndef search(lst):\n    # Step 1: Count the frequency of each integer in the list\n    freq = Counter(lst)\n    \n    # Step 2: Initialize a variable to keep track of the greatest valid integer\n    greatest_valid = -1\n    \n    # Step 3: Iterate over each unique integer and its frequency\n    for num, count in freq.items():\n        # Check if the frequency is greater than or equal to the integer itself\n        if count >= num:\n            # Update greatest_valid if this integer is greater than the current one\n            greatest_valid = max(greatest_valid, num)\n    \n    # Step 4: Return the greatest valid integer found, or -1 if none was found\n    return greatest_valid\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1])) # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) # Output: 3\nprint(search([5, 5, 4, 4, 4])) # Output: -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    \n    # Initialize pointers and result list\n    start = 0\n    end = len(lst) - 1\n    result = []\n    \n    # Alternate between picking from the start and end\n    while start <= end:\n        if start == end:\n            # If there's only one element left, add it to the result\n            result.append(lst[start])\n        else:\n            # Pick the minimum value\n            result.append(lst[start])\n            # Pick the maximum value\n            result.append(lst[end])\n        \n        # Move the pointers\n        start += 1\n        end -= 1\n    \n    return result\n\n# Test cases\nprint(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\nprint(strange_sort_list([]))            # Output: []"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round the area to 2 decimal points\n    return round(area, 2)\n\n# Example usage:\nprint(triangle_area(3, 4, 5))  # Expected output: 6.00\nprint(triangle_area(1, 2, 10)) # Expected output: -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the list q is a palindrome\n    is_palindrome = (q == q[::-1])\n    \n    # Calculate the sum of elements in q\n    total_weight = sum(q)\n    \n    # Check if the total weight is less than or equal to w\n    within_weight_limit = (total_weight <= w)\n    \n    # The object will fly if it is both a palindrome and within weight limit\n    return is_palindrome and within_weight_limit\n\n# Test cases\nprint(will_it_fly([1, 2], 5))          # \u279e False \nprint(will_it_fly([3, 2, 3], 1))       # \u279e False\nprint(will_it_fly([3, 2, 3], 9))       # \u279e True\nprint(will_it_fly([3], 5))             # \u279e True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    \n    return changes\n\n# Example usage:\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))    # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))          # Output: 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in lst1\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    \n    # Calculate the total number of characters in lst2\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1\n\n# Test cases\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    # List of prime numbers less than 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check all combinations of three primes\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Example usage:\nprint(is_multiply_prime(30))  # Output: True\nprint(is_multiply_prime(60))  # Output: False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    # Edge case: 1 is a simple power of any number\n    if x == 1:\n        return True\n    # Edge case: any number (except 1) is not a simple power of 1\n    if n == 1:\n        return False\n    \n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    \n    return False\n\n# Testing the function with the provided examples\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    # Determine the absolute value of a for the calculation\n    abs_a = abs(a)\n    \n    # Calculate the cube root of the absolute value of a\n    # Using round to get the nearest integer\n    cube_root = round(abs_a ** (1/3))\n    \n    # Check if the cube of the cube_root is equal to the absolute value of a\n    # Also need to handle the sign of a\n    return cube_root ** 3 == abs_a if a >= 0 else -cube_root ** 3 == a\n\n# Test cases\nprint(iscube(1))   # True\nprint(iscube(2))   # False\nprint(iscube(-1))  # True\nprint(iscube(64))  # True\nprint(iscube(0))   # True\nprint(iscube(180)) # False"}
{"task_id": "HumanEval/78", "completion": ""}
{"task_id": "HumanEval/79", "completion": ""}
{"task_id": "HumanEval/80", "completion": ""}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    # Define a helper function to convert a single GPA to a letter grade\n    def gpa_to_letter_grade(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        elif gpa == 0.0:\n            return 'E'\n        else:\n            return 'Invalid GPA'  # This is a safeguard for any GPA values less than 0\n\n    # Use list comprehension to convert each GPA in the list to a letter grade\n    return [gpa_to_letter_grade(gpa) for gpa in grades]\n\n# Example usage\ngrades = [4.0, 3, 1.7, 2, 3.5]\nprint(numerical_letter_grade(grades))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    # Get the length of the string\n    length = len(string)\n    \n    # Check if the length is a prime number\n    return is_prime(length)\n\n# Examples\nprint(prime_length('Hello'))     # True, because 5 is a prime number\nprint(prime_length('abcdcba'))   # True, because 7 is a prime number\nprint(prime_length('kittens'))   # True, because 7 is a prime number\nprint(prime_length('orange'))    # False, because 6 is not a prime number"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    return 10**(n-1) + 8 * 10**(n-2)\n\n# Testing the function with some values\nprint(starts_one_ends(1))  # Expected: 1\nprint(starts_one_ends(2))  # Expected: 18\nprint(starts_one_ends(3))  # Expected: 180"}
{"task_id": "HumanEval/84", "completion": ""}
{"task_id": "HumanEval/85", "completion": ""}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # Split the string into words while keeping the spaces using split and join trick\n    words = s.split(' ')\n    \n    # Create a new list to store the sorted words\n    sorted_words = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Sort the characters of the word based on their ASCII values\n        sorted_word = ''.join(sorted(word))\n        # Append the sorted word to the list\n        sorted_words.append(sorted_word)\n    \n    # Join the sorted words with spaces to form the final string\n    result = ' '.join(sorted_words)\n    \n    return result\n\n# Test cases\nprint(anti_shuffle('Hi'))          # Output: 'Hi'\nprint(anti_shuffle('hello'))       # Output: 'ehllo'\nprint(anti_shuffle('Hello World!!!')) # Output: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n    \n    # Iterate over the rows\n    for row_idx, row in enumerate(lst):\n        # Iterate over the columns in the current row\n        for col_idx, val in enumerate(row):\n            if val == x:\n                # If the value matches x, store the coordinate\n                coordinates.append((row_idx, col_idx))\n    \n    # Sort by row in ascending order and by column in descending order for the same row\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n\n# Test cases\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))  # Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # Output: [(2, 2)]"}
{"task_id": "HumanEval/88", "completion": ""}
{"task_id": "HumanEval/89", "completion": ""}
{"task_id": "HumanEval/90", "completion": ""}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    # Split the string into sentences based on '.', '?', and '!'\n    import re\n    sentences = re.split(r'[.?!]', S)\n    \n    # Initialize boredom count\n    boredom_count = 0\n    \n    # Iterate over each sentence\n    for sentence in sentences:\n        # Strip leading and trailing whitespace\n        sentence = sentence.strip()\n        # Check if the sentence starts with 'I'\n        if sentence.startswith('I '):\n            boredom_count += 1\n    \n    return boredom_count\n\n# Test cases\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1\nprint(is_bored(\"I am here. I am there! How are you? I am fine.\"))  # Output: 3"}
{"task_id": "HumanEval/92", "completion": ""}
{"task_id": "HumanEval/93", "completion": ""}
{"task_id": "HumanEval/94", "completion": ""}
{"task_id": "HumanEval/95", "completion": ""}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True  # 2 is the only even prime number\n    if num % 2 == 0:\n        return False  # other even numbers are not primes\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Function to return a list of prime numbers less than n.\"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n# Test cases\nprint(count_up_to(5))   # => [2, 3]\nprint(count_up_to(11))  # => [2, 3, 5, 7]\nprint(count_up_to(0))   # => []\nprint(count_up_to(20))  # => [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))   # => []\nprint(count_up_to(18))  # => [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Get the absolute value of the unit digit of each number\n    unit_digit_a = abs(a % 10)\n    unit_digit_b = abs(b % 10)\n    \n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n\n# Test cases\nprint(multiply(148, 412))  # Should return 16\nprint(multiply(19, 28))    # Should return 72\nprint(multiply(2020, 1851)) # Should return 0\nprint(multiply(14, -15))   # Should return 20"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # Define the set of uppercase vowels\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Initialize a counter for uppercase vowels at even indices\n    count = 0\n    \n    # Iterate over even indices in the string\n    for i in range(0, len(s), 2):\n        # Check if the character at the even index is an uppercase vowel\n        if s[i] in uppercase_vowels:\n            count += 1\n    \n    return count\n\n# Example usage:\nprint(count_upper('aBCdEf'))  # Output: 1\nprint(count_upper('abcdefg')) # Output: 0\nprint(count_upper('dBBE'))    # Output: 0"}
{"task_id": "HumanEval/99", "completion": "from decimal import Decimal, ROUND_HALF_UP\n\ndef closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n    \n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    \"\"\"\n    # Convert the string to a Decimal object for precise arithmetic operations\n    decimal_value = Decimal(value)\n    \n    # Use the quantize function to round the decimal value to the nearest integer\n    # ROUND_HALF_UP and precision of '1' rounds the number to the nearest integer\n    # but away from zero when equidistant\n    rounded_value = decimal_value.to_integral_value(rounding=ROUND_HALF_UP)\n    \n    # Convert the rounded Decimal value to an integer and return it\n    return int(rounded_value)\n\n# Test cases\nprint(closest_integer(\"10\"))     # Output: 10\nprint(closest_integer(\"15.3\"))   # Output: 15\nprint(closest_integer(\"14.5\"))   # Output: 15\nprint(closest_integer(\"-14.5\"))  # Output: -15"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    pile = [n]\n    current_stones = n\n    \n    for _ in range(1, n):\n        if n % 2 == 0:  # n is even\n            current_stones += 2  # next even number\n        else:  # n is odd\n            current_stones += 2  # next odd number\n        \n        pile.append(current_stones)\n    \n    return pile\n\n# Example usage:\nprint(make_a_pile(3))  # Output: [3, 5, 7]\nprint(make_a_pile(4))  # Output: [4, 6, 8, 10]"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    # Use re.split to split the string by commas or spaces\n    # The pattern ',\\s*' matches a comma followed by any number of spaces\n    # The pattern '\\s+' matches one or more spaces\n    words = re.split(r',\\s*|\\s+', s)\n    return words\n\n# Test cases\nprint(words_string(\"Hi, my name is John\"))  # [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n    \"\"\"\n    # Ensure x is less than or equal to y\n    if x > y:\n        return -1\n    \n    # Start from y and go downwards to find the largest even number\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number is found in the range\n    return -1\n\n# Test cases\nprint(choose_num(12, 15))  # Expected output: 14\nprint(choose_num(13, 12))  # Expected output: -1\nprint(choose_num(10, 20))  # Expected output: 20\nprint(choose_num(9, 9))    # Expected output: -1\nprint(choose_num(8, 8))    # Expected output: 8"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    # If n is greater than m, return -1\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m (inclusive)\n    total_sum = sum(range(n, m + 1))\n    \n    # Calculate the number of integers from n to m (inclusive)\n    count = m - n + 1\n    \n    # Compute the average and round it to the nearest integer\n    rounded_average = round(total_sum / count)\n    \n    # Convert the rounded average to binary\n    binary_result = bin(rounded_average)\n    \n    return binary_result\n\n# Test cases\nprint(rounded_avg(1, 5))   # Output: \"0b11\"\nprint(rounded_avg(7, 5))   # Output: -1\nprint(rounded_avg(10, 20)) # Output: \"0b1111\"\nprint(rounded_avg(20, 33)) # Output: \"0b11010\""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n    \n    Note: Returned list should be sorted in increasing order.\n    \"\"\"\n    # Define a set of even digits for quick lookup\n    even_digits = {'0', '2', '4', '6', '8'}\n    \n    # List to store numbers without even digits\n    result = []\n    \n    # Iterate through each number in the input list\n    for num in x:\n        # Convert the number to a string to check each digit\n        num_str = str(num)\n        \n        # Assume the number has no even digits\n        has_even_digit = False\n        \n        # Check each digit\n        for digit in num_str:\n            if digit in even_digits:\n                has_even_digit = True\n                break\n        \n        # If the number has no even digits, add it to the result list\n        if not has_even_digit:\n            result.append(num)\n    \n    # Sort the result list in increasing order\n    result.sort()\n    \n    # Return the sorted list\n    return result\n\n# Test cases\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Define a mapping from digits to their corresponding names\n    digit_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter the array to keep only integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array in ascending order\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace each digit with its corresponding name\n    result = [digit_to_name[num] for num in reversed_arr]\n    \n    return result\n\n# Example usage:\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))  # ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\nprint(by_length([]))  # []\nprint(by_length([1, -1, 55]))  # ['One']"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        result = 1\n        for j in range(2, i + 1):\n            result *= j\n        return result\n\n    def sum_to(i):\n        return sum(range(1, i + 1))\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to(i))\n    \n    return result\n\n# Test the function with the given example:\nprint(f(5))  # Output should be [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(num):\n        # Convert the number to a string and check if it reads the same forward and backward\n        s = str(num)\n        return s == s[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)\n\n# Example usage:\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12)) # Output: (4, 6)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    \n    for num in arr:\n        # Convert the number to a string to easily access each digit\n        str_num = str(num)\n        \n        # Initialize sum of digits\n        digit_sum = 0\n        \n        # Start iterating from the first character of the string\n        i = 0\n        \n        # If the number is negative, start the sum with the negative of the first digit\n        if str_num[0] == '-':\n            digit_sum += int(str_num[0] + str_num[1])\n            i = 2\n        \n        # Add the rest of the digits to the sum\n        while i < len(str_num):\n            digit_sum += int(str_num[i])\n            i += 1\n        \n        # If the sum of digits is greater than 0, increment the count\n        if digit_sum > 0:\n            count += 1\n    \n    return count\n\n# Test cases\nprint(count_nums([]))          # Output: 0\nprint(count_nums([-1, 11, -11])) # Output: 1\nprint(count_nums([1, 1, 2]))     # Output: 3"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0:\n        return True\n    \n    # Count the number of places where an element is greater than the next element\n    count_breaks = 0\n    break_index = -1\n    \n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count_breaks += 1\n            break_index = i\n            \n        if count_breaks > 1:\n            return False\n    \n    # If there are no breaks, the array is already sorted\n    if count_breaks == 0:\n        return True\n    \n    # If there is exactly one break, check if the wrap-around condition is satisfied\n    # arr[break_index] > arr[break_index + 1]\n    # We need to check if the array is sorted when we consider wrap around\n    if count_breaks == 1:\n        # Check if arr[break_index] is the maximum element and arr[break_index+1] is the minimum element\n        return arr[break_index] <= arr[(break_index + 2) % n] and arr[(break_index + 1) % n] <= arr[(break_index + 3) % n]\n        \n    return False\n\n# Example usage\nprint(move_one_ball([3, 4, 5, 1, 2]))  # Output: True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # Output: False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Count the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # Check if we can replace all odd numbers in lst1 with even numbers from lst2\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # Step 1: Split the string into individual letters\n    letters = test.split()\n    \n    # Step 2: Count the occurrences of each letter\n    from collections import defaultdict\n    letter_count = defaultdict(int)\n    for letter in letters:\n        letter_count[letter] += 1\n    \n    # Step 3: Determine the maximum count\n    if not letter_count:\n        return {}\n    \n    max_count = max(letter_count.values())\n    \n    # Step 4: Collect all letters that have this maximum count\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    \n    return result\n\n# Test cases\nprint(histogram('a b c'))        # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))      # {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))    # {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))    # {'b': 4}\nprint(histogram(''))             # {}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Create a set of characters to delete for faster lookup\n    chars_to_delete = set(c)\n    \n    # Filter out all characters in s that are in c\n    result = ''.join(char for char in s if char not in chars_to_delete)\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)\n\n# Test cases\nprint(reverse_delete(\"abcde\", \"ae\"))       # Should output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))      # Should output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Should output: ('cdedc', True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    # Helper function to count odd digits in a string\n    def count_odd_digits(s):\n        return sum(1 for char in s if int(char) % 2 != 0)\n    \n    result = []\n    for s in lst:\n        odd_count = count_odd_digits(s)\n        # Replace all 'i's in the template string with the odd_count\n        output = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(output)\n    \n    return result\n\n# Test cases\nprint(odd_count(['1234567']))\nprint(odd_count(['3', \"11111111\"]))"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        raise ValueError(\"Input list cannot be empty\")\n    \n    # Initialize the minimum sum to the first element\n    min_sum = current_sum = nums[0]\n    \n    # Iterate through the array starting from the second element\n    for num in nums[1:]:\n        # Update the current sum to be the minimum of the current number itself\n        # or the current number plus the current sum\n        current_sum = min(num, current_sum + num)\n        \n        # Update the minimum sum encountered so far\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n\n# Example usage\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))         # Output: -6"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # Calculate the total water units in the grid\n    total_water = sum(sum(row) for row in grid)\n    \n    # Calculate the number of bucket operations required\n    bucket_operations = math.ceil(total_water / capacity)\n    \n    return bucket_operations\n\n# Example usage\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers according to the number of ones\n    in their binary representation in ascending order. For similar number of ones,\n    sort based on decimal value.\n\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 4, 3, 5]\n    >>> sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 4, 3]\n    \"\"\"\n    # Sort the array using a tuple (count of ones in binary, decimal value) as the key\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n# Test cases\nprint(sort_array([1, 5, 2, 3, 4]))  # Output: [1, 2, 4, 3, 5]\nprint(sort_array([1, 0, 2, 3, 4]))  # Output: [0, 1, 2, 4, 3]"}
{"task_id": "HumanEval/117", "completion": ""}
{"task_id": "HumanEval/118", "completion": ""}
{"task_id": "HumanEval/119", "completion": "def is_balanced(s):\n    # This function checks if a given string `s` is balanced\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        # If balance goes negative, it means there are more ')' than '(' at some point\n        if balance < 0:\n            return False\n    # At the end, balance should be 0 for the string to be balanced\n    return balance == 0\n\ndef match_parens(lst):\n    s1, s2 = lst\n    # Check both possible concatenations\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))     # Output: 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Sort the array in descending order\n    sorted_desc = sorted(arr, reverse=True)\n    \n    # Take the first k elements from the sorted array\n    top_k_elements = sorted_desc[:k]\n    \n    # Sort these k elements in ascending order\n    result = sorted(top_k_elements)\n    \n    return result\n\n# Test cases\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))   # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    total_sum = 0\n    for i in range(0, len(lst), 2):  # Iterate over even indices\n        if lst[i] % 2 != 0:  # Check if the element is odd\n            total_sum += lst[i]\n    return total_sum\n\n# Example usage:\nprint(solution([5, 8, 7, 1]))  # Output: 12\nprint(solution([3, 3, 3, 3, 3]))  # Output: 9\nprint(solution([30, 13, 24, 321]))  # Output: 0"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate over the first k elements of arr\n    for i in range(k):\n        # Check if the element has at most two digits\n        if -99 <= arr[i] <= 99:\n            # Add to the sum\n            total_sum += arr[i]\n    \n    # Return the computed sum\n    return total_sum\n\n# Example usage:\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))  # Output: 24"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    odd_numbers = []\n    \n    while n != 1:\n        if n % 2 != 0:  # Check if the number is odd\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n // 2  # If n is even, divide by 2\n        else:\n            n = 3 * n + 1  # If n is odd, multiply by 3 and add 1\n    \n    # Add 1 at the end since the sequence always ends with 1, which is odd\n    odd_numbers.append(1)\n    \n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)\n\n# Example usage:\nprint(get_odd_collatz(5))  # Output: [1, 5]"}
{"task_id": "HumanEval/124", "completion": "import datetime\n\ndef valid_date(date):\n    \"\"\"Validates a given date string and returns True if the date is valid otherwise False.\"\"\"\n    # Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Check if the date is in the correct format by trying to parse it\n    try:\n        month, day, year = map(int, date.split('-'))\n        # Create a datetime object to check if the date is valid\n        datetime.datetime(year, month, day)\n    except ValueError:\n        return False\n    \n    # At this point, month, day, and year are already validated using datetime\n    # But we can still perform additional checks if necessary\n    \n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is appropriate for the given month and year (handled by datetime)\n    # The datetime check already ensures the day is valid for the month and leap year considerations\n    \n    # If all checks pass, return True\n    return True\n\n# Example usage:\nprint(valid_date('03-11-2000'))  # => True\nprint(valid_date('15-01-2012'))  # => False (invalid format, day-month-year instead of month-day-year)\nprint(valid_date('04-0-2040'))   # => False (invalid day)\nprint(valid_date('06-04-2020'))  # => True\nprint(valid_date('06/04/2020'))  # => False (invalid format, uses '/' instead of '-')"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Check if there is any whitespace\n    if ' ' in txt:\n        return txt.split()\n    \n    # Check if there is any comma\n    elif ',' in txt:\n        return txt.split(',')\n    \n    # If no whitespace or comma, count lowercase letters with odd order\n    else:\n        odd_order_count = 0\n        for char in txt:\n            if char.islower():\n                # Calculate the order assuming ord('a') = 0\n                order = ord(char) - ord('a')\n                if order % 2 == 1:  # Check if the order is odd\n                    odd_order_count += 1\n        return odd_order_count\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))        # \u279e 3"}
{"task_id": "HumanEval/126", "completion": ""}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    # Calculate the intersection of the two intervals\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # If the intervals do not intersect, the length will be non-positive\n    if length <= 0:\n        return \"NO\"\n    \n    # Check if the length of the intersection is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # Output: \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # Output: \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # Output: \"YES\""}
{"task_id": "HumanEval/128", "completion": ""}
{"task_id": "HumanEval/129", "completion": ""}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 0:\n        return []\n    \n    sequence = [1]  # tri(0) is not defined in your problem, but let's assume tri(0) = 1\n    if n >= 1:\n        sequence.append(3)  # tri(1) = 3\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i // 2)\n        else:\n            # tri(n) = tri(n-1) + tri(n-2) + tri(n-3)\n            next_value = sequence[i-1] + sequence[i-2] + (sequence[i-3] if i >= 3 else 0)\n            sequence.append(next_value)\n    \n    return sequence\n\n# Test the function:\nprint(tri(3))  # Output: [1, 3, 2, 8]\nprint(tri(4))  # Output: [1, 3, 2, 8, 3]\nprint(tri(5))  # Output: [1, 3, 2, 8, 3, 13]"}
{"task_id": "HumanEval/131", "completion": ""}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    nested_found = False\n    \n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n                if stack:\n                    # If the stack is not empty after popping, it means we have nested brackets\n                    nested_found = True\n            else:\n                # Unmatched closing bracket\n                return False\n    \n    # If the stack is not empty here, it means there are unmatched opening brackets\n    if stack:\n        return False\n    \n    return nested_found\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    # Round each element up, square it, and sum the results\n    return sum(math.ceil(num) ** 2 for num in lst)\n\n# Test cases\nprint(sum_squares([1, 2, 3]))  # Output: 14\nprint(sum_squares([1, 4, 9]))  # Output: 98\nprint(sum_squares([1, 3, 5, 7]))  # Output: 84\nprint(sum_squares([1.4, 4.2, 0]))  # Output: 29\nprint(sum_squares([-2.4, 1, 1]))  # Output: 6"}
{"task_id": "HumanEval/134", "completion": ""}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n    \"\"\"\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index\n\n# Test cases\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))        # Output: -1\nprint(can_arrange([5, 4, 3, 2, 1]))  # Output: 4\nprint(can_arrange([10, 20, 15, 30, 25, 40]))  # Output: 4\nprint(can_arrange([1]))              # Output: -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    \n    return (largest_negative, smallest_positive)\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Output should be (None, 1)\nprint(largest_smallest_integers([]))                  # Output should be (None, None)\nprint(largest_smallest_integers([0]))                 # Output should be (None, None)\nprint(largest_smallest_integers([-10, -1, 0, 1, 10])) # Output should be (-1, 1)\nprint(largest_smallest_integers([-5, -2, -8]))        # Output should be (-2, None)\nprint(largest_smallest_integers([3, 6, 9]))           # Output should be (None, 3)"}
{"task_id": "HumanEval/137", "completion": "def convert_to_number(value):\n    \"\"\"\n    Convert a value to a float if it's a string representing a number.\n    Handles both '.' and ',' as decimal separators.\n    \"\"\"\n    if isinstance(value, str):\n        # Replace comma with dot for float conversion\n        value = value.replace(',', '.')\n        try:\n            return float(value)\n        except ValueError:\n            raise ValueError(f\"Invalid number representation: {value}\")\n    return value\n\ndef compare_one(a, b):\n    \"\"\"\n    Compare two values which can be integers, floats, or strings representing real numbers.\n    Return the larger value in its original type, or None if they are equal.\n    \"\"\"\n    # Convert both values to comparable numbers\n    a_converted = convert_to_number(a)\n    b_converted = convert_to_number(b)\n    \n    # Compare the converted values\n    if a_converted > b_converted:\n        return a\n    elif a_converted < b_converted:\n        return b\n    else:\n        return None\n\n# Test cases\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\nprint(compare_one(\"1\", 1))  # \u279e None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\"\"\"\n    # n must be at least 8 and a multiple of 4 to be written as the sum of 4 positive even numbers\n    return n >= 8 and n % 4 == 0\n\n# Example usage:\nprint(is_equal_to_sum_even(4))  # Output: False\nprint(is_equal_to_sum_even(6))  # Output: False\nprint(is_equal_to_sum_even(8))  # Output: True"}
{"task_id": "HumanEval/139", "completion": "from math import factorial\n\ndef special_factorial(n):\n    \"\"\"Calculates the Brazilian factorial of a given number n.\n    \n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    \n    Parameters:\n    n (int): The number for which the Brazilian factorial is to be calculated.\n    \n    Returns:\n    int: The Brazilian factorial of the number n.\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(special_factorial(4))  # Expected output: 288"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace more than 2 consecutive spaces with '-'\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining single or double spaces with '_'\n    text = text.replace(' ', '_')\n    return text\n\n# Test cases\nprint(fix_spaces(\"Example\"))       # == \"Example\"\nprint(fix_spaces(\"Example 1\"))     # == \"Example_1\"\nprint(fix_spaces(\" Example 2\"))    # == \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # == \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    # Check if there is exactly one dot in the filename\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the filename into name and extension parts\n    name, extension = file_name.rsplit('.', 1)\n    \n    # Check if the name part is not empty and starts with a Latin alphabet letter\n    if not name or not re.match(r'^[a-zA-Z]', name):\n        return 'No'\n    \n    # Check if the extension is one of the valid ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Check if there are more than three digits in the name\n    if len(re.findall(r'\\d', name)) > 3:\n        return 'No'\n    \n    # If all checks are passed, the filename is valid\n    return 'Yes'\n\n# Test cases\nprint(file_name_check(\"example.txt\"))    # => 'Yes'\nprint(file_name_check(\"1example.dll\"))   # => 'No'\nprint(file_name_check(\"example1234.txt\"))# => 'No'\nprint(file_name_check(\"example.123\"))    # => 'No'\nprint(file_name_check(\"example.exe\"))    # => 'Yes'\nprint(file_name_check(\"exa.mp.le.txt\"))  # => 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \"\"\"\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum\n\n# Test cases\nprint(sum_squares([1, 2, 3]))  # The output should be 6\nprint(sum_squares([]))  # The output should be 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # The output should be -126"}
{"task_id": "HumanEval/143", "completion": ""}
{"task_id": "HumanEval/144", "completion": ""}
{"task_id": "HumanEval/145", "completion": ""}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_odd(digit):\n        return digit in {'1', '3', '5', '7', '9'}\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            s_num = str(num)\n            first_digit = s_num[0]\n            last_digit = s_num[-1]\n            if is_odd(first_digit) and is_odd(last_digit):\n                count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/147", "completion": ""}
{"task_id": "HumanEval/148", "completion": ""}
{"task_id": "HumanEval/149", "completion": ""}
{"task_id": "HumanEval/150", "completion": ""}
{"task_id": "HumanEval/151", "completion": ""}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    # Initialize an empty result list\n    results = []\n    \n    # Iterate through both game and guess lists simultaneously\n    for g, gs in zip(game, guess):\n        # Calculate the absolute difference between the game score and the guess\n        difference = abs(g - gs)\n        # Append the difference to the results list\n        results.append(difference)\n    \n    return results\n\n# Test the function with provided examples\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))  # Expected output: [0,0,0,0,3,3]\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))  # Expected output: [4,4,1,0,0,6]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        return cap_count - sm_count\n\n    # Initialize variables to track the strongest extension and its strength\n    strongest_extension = None\n    max_strength = float('-inf')\n    \n    # Iterate over each extension and calculate its strength\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        \n        # Update the strongest extension if we find a stronger one\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n\n    # Return the result in the desired format\n    return f\"{class_name}.{strongest_extension}\"\n\n# Example usage:\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Output: 'Slices.SErviNGSliCes'\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: 'my_class.AA'"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n    \n    :param a: The first word (string).\n    :param b: The second word (string).\n    :return: True if any rotation of b is a substring of a, False otherwise.\n    \"\"\"\n    # Generate all rotations of b\n    for i in range(len(b)):\n        # Create a rotation by slicing\n        rotated_b = b[i:] + b[:i]\n        # Check if this rotation is a substring of a\n        if rotated_b in a:\n            return True\n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\"\"\"\n    # Convert the number to a string and remove the negative sign if present\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate over each character in the string representation of the number\n    for char in num_str:\n        digit = int(char)  # Convert the character back to an integer\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return the counts as a tuple\n    return (even_count, odd_count)\n\n# Example usage:\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    # Mapping of Roman numeral symbols to their corresponding values\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'),\n        (1, 'i')\n    ]\n    \n    result = []\n    \n    # Iterate over the Roman numeral mapping\n    for value, symbol in roman_numerals:\n        # While the number is greater than or equal to the value\n        while number >= value:\n            # Append the symbol to the result\n            result.append(symbol)\n            # Subtract the value from the number\n            number -= value\n    \n    # Join the list into a string and return it\n    return ''.join(result)\n\n# Test cases\nprint(int_to_mini_roman(19))   # Output: 'xix'\nprint(int_to_mini_roman(152))  # Output: 'clii'\nprint(int_to_mini_roman(426))  # Output: 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides to make sure the largest side is last (hypotenuse)\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False\nprint(right_angle_triangle(5, 12, 13))  # True\nprint(right_angle_triangle(6, 8, 10))  # True\nprint(right_angle_triangle(7, 24, 25))  # True\nprint(right_angle_triangle(5, 5, 5))  # False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # Initialize variables to track the maximum unique character count and the corresponding word\n    max_unique_count = 0\n    result_word = None\n    \n    for word in words:\n        # Calculate the number of unique characters in the word\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n        \n        # Check if this word has more unique characters or is lexicographically smaller in case of a tie\n        if (unique_count > max_unique_count) or (unique_count == max_unique_count and word < result_word):\n            max_unique_count = unique_count\n            result_word = word\n    \n    return result_word\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))   # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # Determine how many carrots the rabbit can actually eat\n    can_eat = min(need, remaining)\n    \n    # Calculate the total number of carrots eaten\n    total_eaten = number + can_eat\n    \n    # Calculate the number of carrots left\n    carrots_left = remaining - can_eat\n    \n    # Return the result as an array\n    return [total_eaten, carrots_left]\n\n# Example usage:\nprint(eat(5, 6, 10))  # Output: [11, 4]\nprint(eat(4, 8, 9))   # Output: [12, 1]\nprint(eat(1, 10, 10)) # Output: [11, 0]\nprint(eat(2, 11, 5))  # Output: [7, 0]"}
{"task_id": "HumanEval/160", "completion": ""}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # Check if there are any letters in the string\n    contains_letters = any(c.isalpha() for c in s)\n    \n    if contains_letters:\n        # Reverse the case of each letter\n        result = ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        # Reverse the entire string\n        result = s[::-1]\n    \n    return result\n\n# Test cases\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\""}
{"task_id": "HumanEval/162", "completion": ""}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even numbers between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => [10, 12, 14]\n    \"\"\"\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n    \n    # Generate the list of even numbers in the range [a, b]\n    even_numbers = [num for num in range(a, b + 1) if num % 2 == 0]\n    \n    return even_numbers"}
