{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Iterate through the sorted list and check adjacent elements\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \"\"\"\n    result = []\n    current_group = []\n    balance = 0\n\n    for char in paren_string:\n        if char == ' ':\n            continue  # Ignore spaces\n\n        current_group.append(char)\n\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n\n        # If balance is zero, we have a complete group\n        if balance == 0 and current_group:\n            result.append(''.join(current_group))\n            current_group = []  # Reset for the next group\n\n    return result\n\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "import math\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    fractional_part, integer_part = math.modf(number)\n    return fractional_part\n\n# Example usage\nprint(truncate_number(3.5))  # Output: 0.5"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" \n    For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    \n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The list of numbers cannot be empty\")\n    \n    # Step 1: Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Step 2: Calculate the absolute deviations from the mean\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    \n    # Step 3: Calculate the mean of the absolute deviations\n    mad = sum(absolute_deviations) / len(absolute_deviations)\n    \n    return mad\n\n\n# Test the function with the provided example\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))  # Output: 1.0"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers`\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        # Add the delimiter between elements, but not after the last element\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(intersperse([], 4))          # Output: []\n    print(intersperse([1, 2, 3], 4))   # Output: [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    # Split the input string into groups\n    groups = paren_string.split()\n    # Initialize the result list\n    result = []\n    \n    # Process each group\n    for group in groups:\n        current_depth = 0  # Current level of nesting\n        max_depth = 0      # Maximum level of nesting for the current group\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        \n        # Append the maximum depth for this group to the result list\n        result.append(max_depth)\n    \n    return result\n\n\n# Example usage\nif __name__ == '__main__':\n    print(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" \n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    \n    for number in numbers:\n        sum_of_numbers += number\n        product_of_numbers *= number\n    \n    return sum_of_numbers, product_of_numbers\n\n# Example usage\nif __name__ == \"__main__\":\n    print(sum_product([]))        # Output: (0, 1)\n    print(sum_product([1, 2, 3, 4]))  # Output: (10, 24)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:  # Handle the edge case of an empty list\n        return []\n    \n    # Initialize the list to store the rolling maximums\n    max_values = []\n    \n    # Start with the first element as the initial maximum\n    current_max = numbers[0]\n    max_values.append(current_max)\n    \n    # Iterate through the rest of the list and update the rolling max\n    for num in numbers[1:]:\n        if num > current_max:\n            current_max = num\n        max_values.append(current_max)\n    \n    return max_values\n\n\n# Example usage:\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))  # Output: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    \n    # Check for the longest palindromic suffix\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            # Append the reverse of the non-palindromic prefix\n            return string + string[i:][::-1]\n    \n    # If no palindromic suffix is found, which is not possible for len > 0, return the string + its reverse\n    return string + string[::-1]\n\n\n# Testing the function\nprint(make_palindrome(''))    # Expected: ''\nprint(make_palindrome('cat')) # Expected: 'catac'\nprint(make_palindrome('cata'))# Expected: 'catac'"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \"\"\"\n    # Ensure both strings are of the same length by padding with leading zeros\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n    \n    # Perform XOR operation\n    result = []\n    for bit1, bit2 in zip(a, b):\n        # XOR operation: 1 if bits are different, 0 if they are the same\n        xor_bit = '1' if bit1 != bit2 else '0'\n        result.append(xor_bit)\n    \n    # Join the list into a string and return\n    return ''.join(result)\n\n# Example usage\nprint(string_xor('010', '110'))  # Output: '100'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([]) is None\n    True\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    \n    return longest_str"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b.\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)\n\n# Test cases\nprint(greatest_common_divisor(3, 5))  # Output: 1\nprint(greatest_common_divisor(25, 15))  # Output: 5"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n\n# Example usage\nif __name__ == \"__main__\":\n    print(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']\n    print(all_prefixes('hello'))  # Output: ['h', 'he', 'hel', 'hell', 'hello']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    return len(set(string.lower()))\n\n# Test cases\nprint(count_distinct_characters('xyzXYZ'))  # Output: 3\nprint(count_distinct_characters('Jerry'))   # Output: 4"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" \n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n    \"\"\"\n    # Split the music string into individual note representations\n    notes = music_string.split()\n    \n    # Create a mapping from note representation to beats\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Convert each note to its corresponding number of beats\n    beats = [note_to_beats[note] for note in notes]\n    \n    return beats\n\n# Example usage\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))\n# Output should be [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\"\"\"\n    count = 0\n    sub_len = len(substring)\n    \n    # If the substring is empty, return 0 as there are no valid substrings to find\n    if sub_len == 0:\n        return 0\n    \n    # Iterate over the string with a sliding window of the length of the substring\n    for i in range(len(string) - sub_len + 1):\n        # Check if the current window matches the substring\n        if string[i:i + sub_len] == substring:\n            count += 1\n    \n    return count\n\n# Test cases\nprint(how_many_times('', 'a'))        # Output: 0\nprint(how_many_times('aaa', 'a'))     # Output: 3\nprint(how_many_times('aaaa', 'aa'))   # Output: 3"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Mapping from numeral words to their corresponding integer values\n    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    \n    # Mapping from integer values back to numeral words\n    number_to_numeral = {v: k for k, v in numeral_to_number.items()}\n    \n    # Split the input string into a list of numeral words\n    numeral_words = numbers.split()\n    \n    # Convert the numeral words to their corresponding integer values\n    numbers_list = [numeral_to_number[word] for word in numeral_words]\n    \n    # Sort the list of integer values\n    numbers_list.sort()\n    \n    # Convert the sorted integer values back to numeral words\n    sorted_numeral_words = [number_to_numeral[number] for number in numbers_list]\n    \n    # Join the sorted numeral words into a single string\n    return ' '.join(sorted_numeral_words)\n\n# Example usage\nprint(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two numbers\")\n    \n    # Sort the numbers\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize with the first pair\n    min_diff = abs(sorted_numbers[1] - sorted_numbers[0])\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(1, len(sorted_numbers) - 1):\n        diff = abs(sorted_numbers[i + 1] - sorted_numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    \n    return closest_pair\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # (2.0, 2.0)"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    \n    if min_val == max_val:\n        # If all numbers are the same, they should all be rescaled to 0\n        return [0.0] * len(numbers)\n    \n    return [(x - min_val) / (max_val - min_val) for x in numbers]\n\n\n# Example usage\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n\n# Example usage\nif __name__ == \"__main__\":\n    print(filter_integers(['a', 3.14, 5]))  # Output: [5]\n    print(filter_integers([1, 2, 3, 'abc', {}, []]))  # Output: [1, 2, 3]"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(100)\n    50\n    >>> largest_divisor(37)  # 37 is a prime number\n    1\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n# Test cases\nprint(largest_divisor(15))  # Output: 5\nprint(largest_divisor(100)) # Output: 50\nprint(largest_divisor(37))  # Output: 1"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    # Start with the smallest prime number\n    divisor = 2\n    \n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    \n    return factors\n\n\n# Test cases\nprint(factorize(8))   # Output: [2, 2, 2]\nprint(factorize(25))  # Output: [5, 5]\nprint(factorize(70))  # Output: [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\nfrom collections import Counter\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Count the occurrences of each number\n    counts = Counter(numbers)\n    \n    # Create a new list with elements that appear only once\n    return [num for num in numbers if counts[num] == 1]\n\n\n# Example usage\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = ''\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char  # Non-alphabetic characters remain unchanged\n    return flipped_string\n\n# Example usage\nprint(flip_case('Hello'))  # Output: hELLO"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list) -> list:\n    \"\"\"Return only positive numbers in the list.\"\"\"\n    return [num for num in l if num > 0]\n\n# Test cases\nprint(get_positive([-1, 2, -4, 5, 6]))  # Expected output: [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Expected output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Test cases\nprint(is_prime(6))     # False\nprint(is_prime(101))   # True\nprint(is_prime(11))    # True\nprint(is_prime(13441)) # True\nprint(is_prime(61))    # True\nprint(is_prime(4))     # False\nprint(is_prime(1))     # False"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"Evaluates polynomial with coefficients xs at point x.\"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef poly_derivative(xs: list, x: float):\n    \"\"\"Evaluates the derivative of the polynomial with coefficients xs at point x.\"\"\"\n    return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs)][1:])\n\n\ndef find_zero(xs: list):\n    \"\"\" \n    xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees a solution.\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The polynomial must have an even number of coefficients.\")\n    \n    # Initial guess can be 0, but other choices might be better depending on the polynomial.\n    x = 0.0\n    tolerance = 1e-10\n    max_iterations = 1000\n    \n    for _ in range(max_iterations):\n        fx = poly(xs, x)\n        dfx = poly_derivative(xs, x)\n        \n        if abs(fx) < tolerance:\n            return x\n        if abs(dfx) < tolerance:\n            raise RuntimeError(\"Derivative near zero, no convergence.\")\n        \n        x = x - fx / dfx\n        \n    raise RuntimeError(\"Exceeded maximum iterations, no convergence.\")\n\n\n# Test cases\nprint(round(find_zero([1, 2]), 2))  # f(x) = 1 + 2x -> x = -0.5\nprint(round(find_zero([-6, 11, -6, 1]), 2))  # (x - 1) * (x - 2) * (x - 3) -> x = 1.0"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Extract elements at indices divisible by 3\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort that extracted sublist\n    divisible_by_three.sort()\n    \n    # Create a new list to store the result\n    result = l[:]\n    \n    # Replace elements at indices divisible by 3 with the sorted elements\n    j = 0\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = divisible_by_three[j]\n            j += 1\n    \n    return result"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Use a set to get unique elements\n    unique_elements = set(l)\n    # Convert the set back to a list and sort it\n    sorted_unique_elements = sorted(unique_elements)\n    return sorted_unique_elements\n\n# Example usage\nif __name__ == \"__main__\":\n    print(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        raise ValueError(\"The list is empty\")\n    \n    max_elem = l[0]\n    for elem in l[1:]:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n\n# Example usage:\n# print(max_element([1, 2, 3]))  # Output: 3\n# print(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: 123"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\"\"\"\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Example usage:\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    # Extract elements at even indices\n    even_index_elements = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the extracted elements\n    even_index_elements_sorted = sorted(even_index_elements)\n    \n    # Create a new list to store the result\n    result = l[:]\n    \n    # Place the sorted even index elements back into their positions\n    even_index = 0\n    for i in range(0, len(l), 2):\n        result[i] = even_index_elements_sorted[even_index]\n        even_index += 1\n    \n    return result\n\n# Test cases\nprint(sort_even([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))  # Output: [3, 6, 5, 4]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Uncycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n# Example usage:\noriginal = \"abcdefg\"\nencoded = encode_cyclic(original)\ndecoded = decode_cyclic(encoded)\n\nprint(f\"Original: {original}\")\nprint(f\"Encoded: {encoded}\")\nprint(f\"Decoded: {decoded}\")"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    if num in (2, 3):\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"Return the n-th number that is a Fibonacci number and it's also prime.\"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Starting Fibonacci numbers\n    fib1, fib2 = 1, 1\n    count = 0\n    \n    while True:\n        fib_next = fib1 + fib2\n        fib1, fib2 = fib2, fib_next\n        \n        if is_prime(fib_next):\n            count += 1\n            if count == n:\n                return fib_next\n\n# Test cases\nprint(prime_fib(1))  # Output: 2\nprint(prime_fib(2))  # Output: 3\nprint(prime_fib(3))  # Output: 5\nprint(prime_fib(4))  # Output: 13\nprint(prime_fib(5))  # Output: 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    l.sort()  # Sorting the list first\n    n = len(l)\n    \n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue  # Skip the same element to avoid duplicate triplets\n        \n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    \n    return False\n\n# Test cases\nprint(triples_sum_to_zero([1, 3, 5, 0]))  # False\nprint(triples_sum_to_zero([1, 3, -2, 1]))  # True\nprint(triples_sum_to_zero([1, 2, 3, 7]))  # False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # True\nprint(triples_sum_to_zero([1]))  # False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of n cars moving in opposite directions.\n    \n    :param n: Number of cars in each set.\n    :return: Total number of collisions.\n    \"\"\"\n    return n * n\n\n# Example usage:\n# If there are 3 cars in each set, there will be 3 * 3 = 9 collisions.\nprint(car_race_collision(3))  # Output: 9"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]\n\n# Example usage\nprint(incr_list([1, 2, 3]))  # Output: [2, 3, 4]\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    Return string representation after the conversion.\n    Base numbers are less than 10.\n    \n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9, inclusive.\")\n    \n    if x == 0:\n        return '0'\n    \n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    \n    # The digits are in reverse order, so we need to reverse them\n    digits.reverse()\n    \n    return ''.join(digits)\n\n# Test cases\nprint(change_base(8, 3))  # Output: '22'\nprint(change_base(8, 2))  # Output: '1000'\nprint(change_base(7, 2))  # Output: '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side and height return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\n# Example usage:\nprint(triangle_area(5, 3))  # This should output 7.5"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    # Base cases\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    \n    # Initialize the first four values of the sequence\n    fib4_values = [0, 0, 2, 0]\n    \n    # Compute the sequence iteratively up to n\n    for i in range(4, n + 1):\n        next_value = sum(fib4_values)\n        # Update the list to hold the last four values\n        fib4_values = [fib4_values[1], fib4_values[2], fib4_values[3], next_value]\n    \n    # The last element in the list is the n-th fib4 number\n    return fib4_values[-1]\n\n# Test cases\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # If the number of elements is odd, return the middle one\n    if n % 2 == 1:\n        return sorted_list[n // 2]\n    else:\n        # If the number of elements is even, return the average of the two middle ones\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2\n\n# Test cases\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\"\"\"\n    return pow(2, n, p)\n\n# Test cases\nprint(modp(3, 5))    # Should print 3\nprint(modp(1101, 101)) # Should print 2\nprint(modp(0, 101))   # Should print 1\nprint(modp(3, 11))   # Should print 8\nprint(modp(100, 101)) # Should print 1"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n# Example usage:\noriginal = \"hello\"\nencoded = encode_shift(original)\ndecoded = decode_shift(encoded)\nprint(f\"Original: {original}, Encoded: {encoded}, Decoded: {decoded}\")"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for number in l:\n        if number >= t:\n            return False\n    return True\n\n# Example usage:\nprint(below_threshold([1, 2, 4, 10], 100))  # Output: True\nprint(below_threshold([1, 20, 4, 10], 5))   # Output: False"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return Counter(s0) == Counter(s1)\n\n# Test cases\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))              # True\nprint(same_chars('dddddddabc', 'abcd'))              # True\nprint(same_chars('eabcd', 'dddddddabc'))             # False\nprint(same_chars('abcd', 'dddddddabce'))             # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input should be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    \n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter += 1\n        elif bracket == '>':\n            counter -= 1\n        # If counter goes negative, it means there is a closing bracket without a matching opening bracket\n        if counter < 0:\n            return False\n    # At the end, counter should be zero for correct bracketing\n    return counter == 0\n\n# Test cases\nprint(correct_bracketing(\"<\"))        # False\nprint(correct_bracketing(\"<>\"))       # True\nprint(correct_bracketing(\"<<><>>\"))   # True\nprint(correct_bracketing(\"><<>\"))     # False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if not l:\n        return True  # An empty list is considered monotonic\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n\n# Test cases\nprint(monotonic([1, 2, 4, 20]))    # True\nprint(monotonic([1, 20, 4, 10]))   # False\nprint(monotonic([4, 1, 0, -10]))   # True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    return sorted(set(l1) & set(l2))\n\n# Test cases\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # Output: [2, 3]"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    # Initialize the largest factor\n    largest_factor = None\n    \n    # Divide n by 2 until it becomes odd\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Check for odd factors from 3 onwards\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n    \n    # If n is still greater than 2, then n itself is a prime number\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n\n# Test cases\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\"\"\"\n    return sum(range(1, n + 1))"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" Returns True if every opening bracket has a corresponding closing bracket. \"\"\"\n    stack = []\n    \n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    \n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"(\"))       # False\nprint(correct_bracketing(\"()\"))      # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))    # False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # The derivative of a constant is 0, so we start from the first power of x\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))        # Output: [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    # Base cases\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize the first three values of the sequence\n    fibfib_values = [0, 0, 1]\n    \n    # Compute fibfib values from 3 to n using dynamic programming\n    for i in range(3, n + 1):\n        next_value = fibfib_values[i - 1] + fibfib_values[i - 2] + fibfib_values[i - 3]\n        fibfib_values.append(next_value)\n    \n    return fibfib_values[n]\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    s = s.lower()\n    vowels = set('aeiou')\n    count = 0\n    \n    for i, char in enumerate(s):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s) - 1:\n            count += 1\n    \n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # Expected output: 2\nprint(vowels_count(\"ACEDY\"))  # Expected output: 3\nprint(vowels_count(\"rhythm\")) # Expected output: 0\nprint(vowels_count(\"fly\"))    # Expected output: 1\nprint(vowels_count(\"sky\"))    # Expected output: 1\nprint(vowels_count(\"skyY\"))   # Expected output: 2\nprint(vowels_count(\"Y\"))      # Expected output: 1\nprint(vowels_count(\"bcd\"))    # Expected output: 0\nprint(vowels_count(\"aeiouy\")) # Expected output: 6\nprint(vowels_count(\"AEIOUY\")) # Expected output: 6\nprint(vowels_count(\"\"))       # Expected output: 0"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \"\"\"\n    x_str = str(x)\n    num_digits = len(x_str)\n    \n    if shift >= num_digits:\n        # Return the reversed string of digits\n        return x_str[::-1]\n    else:\n        # Perform circular shift\n        shift = shift % num_digits  # Ensure shift is within bounds\n        return x_str[-shift:] + x_str[:-shift]\n\n# Test cases\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\"\nprint(circular_shift(12345, 3))  # Output: \"34512\"\nprint(circular_shift(12345, 5))  # Output: \"54321\"\nprint(circular_shift(12345, 6))  # Output: \"54321\""}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate through each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Add the ASCII value of the uppercase character to the total\n            total += ord(char)\n    \n    return total\n\n# Test cases\nprint(digitSum(\"\"))        # Output: 0\nprint(digitSum(\"abAB\"))    # Output: 131\nprint(digitSum(\"abcCd\"))   # Output: 67\nprint(digitSum(\"helloE\"))  # Output: 69\nprint(digitSum(\"woArBld\")) # Output: 131\nprint(digitSum(\"aAaaaXa\")) # Output: 153"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Split the input string by spaces\n    parts = s.split()\n    \n    # Extract the number of apples and oranges from the string\n    apples = int(parts[0])  # The first element is the number of apples\n    oranges = int(parts[3])  # The fourth element is the number of oranges\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes\n\n# Example usage:\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # Output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # Output: 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    smallest_even = None\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the number is even\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n    \n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []\n\n# Test cases\nprint(pluck([4, 2, 3]))  # Output: [2, 1]\nprint(pluck([1, 2, 3]))  # Output: [2, 1]\nprint(pluck([]))         # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n\ndef search(lst):\n    # Step 1: Count the frequency of each integer in the list\n    freq = Counter(lst)\n    \n    # Step 2 & 3: Initialize the variable to track the greatest valid integer\n    greatest_valid_integer = -1\n    \n    # Iterate through the frequency dictionary\n    for num, count in freq.items():\n        # Check if the frequency of the integer is greater than or equal to the integer itself\n        if count >= num:\n            # Update the greatest valid integer if this integer is greater\n            greatest_valid_integer = max(greatest_valid_integer, num)\n    \n    # Step 4: Return the result\n    return greatest_valid_integer\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1]))  # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\nprint(search([5, 5, 4, 4, 4]))  # Output: -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    sorted_list = []\n    ascending = True  # Flag to alternate between min and max\n\n    while lst:\n        if ascending:\n            # Find and remove the minimum value\n            value = min(lst)\n        else:\n            # Find and remove the maximum value\n            value = max(lst)\n\n        # Add the found value to the sorted list\n        sorted_list.append(value)\n        # Remove the found value from the original list\n        lst.remove(value)\n        # Flip the flag\n        ascending = not ascending\n\n    return sorted_list\n\n# Test cases\nprint(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\nprint(strange_sort_list([]))            # Output: []"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Return the area rounded to 2 decimal points\n    return round(area, 2)\n\n# Example usage:\nprint(triangle_area(3, 4, 5))  # Output: 6.00\nprint(triangle_area(1, 2, 10)) # Output: -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if the list q is a palindrome\n    is_palindrome = q == q[::-1]\n    \n    # Calculate the sum of elements in q\n    total_weight = sum(q)\n    \n    # Check if the total weight is less than or equal to the maximum possible weight w\n    is_within_weight = total_weight <= w\n    \n    # Return True if both conditions are satisfied\n    return is_palindrome and is_within_weight\n\n# Example usage:\nprint(will_it_fly([1, 2], 5))    # \u279e False\nprint(will_it_fly([3, 2, 3], 1)) # \u279e False\nprint(will_it_fly([3, 2, 3], 9)) # \u279e True\nprint(will_it_fly([3], 5))       # \u279e True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    \n    # Compare elements from the start and end moving towards the center\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    \n    return changes\n\n# Test cases\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))    # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))          # Output: 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total number of characters and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1  # If both have the same number of characters, return the first list\n\n# Examples\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    # List of all prime numbers less than 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    # Check all combinations of three primes\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Example usage\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(60))  # True\nprint(is_multiply_prime(100)) # False\nprint(is_multiply_prime(105)) # True\nprint(is_multiply_prime(2))   # False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x < 1 or n < 1:\n        return False\n    if n == 1:\n        return x == 1  # Only 1 is a power of 1 (1**k = 1 for any k >= 0)\n    \n    current_power = 1\n    while current_power < x:\n        current_power *= n\n        if current_power == x:\n            return True\n    \n    return False\n\n# Test cases\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a == 0:\n        return True\n    # Calculate the cube root of the absolute value of a\n    cube_root = round(abs(a) ** (1/3))\n    # Check if cubing the cube_root gives back the absolute value of a\n    return cube_root ** 3 == abs(a) if a >= 0 else -(cube_root) ** 3 == a\n\n# Test cases\nprint(iscube(1))    # True\nprint(iscube(2))    # False\nprint(iscube(-1))   # True\nprint(iscube(64))   # True\nprint(iscube(0))    # True\nprint(iscube(180))  # False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    # Define a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count the number of prime digits in the input string\n    prime_count = sum(1 for digit in num if digit in prime_hex_digits)\n    \n    return prime_count\n\n# Test cases\nprint(hex_key(\"AB\"))          # Output should be 1\nprint(hex_key(\"1077E\"))       # Output should be 2\nprint(hex_key(\"ABED1A33\"))    # Output should be 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output should be 6\nprint(hex_key(\"2020\"))        # Output should be 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to a binary string with 'db' at the beginning and end.\n    \n    :param decimal: An integer in decimal form.\n    :return: A string representing the binary number with 'db' at the beginning and end.\n    \"\"\"\n    # Convert the decimal number to binary and remove the '0b' prefix\n    binary_str = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and end of the binary string\n    formatted_binary_str = f\"db{binary_str}db\"\n    \n    return formatted_binary_str\n\n# Example usage:\nprint(decimal_to_binary(15))  # Output: \"db1111db\"\nprint(decimal_to_binary(32))  # Output: \"db100000db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string, checking each set of 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Extract the current set of 3 characters\n        triplet = s[i:i+3]\n        # Check if all characters in the triplet are distinct\n        if len(set(triplet)) != 3:\n            return False\n    \n    # If all triplets have distinct characters, the string is happy\n    return True\n\n# Test cases\nprint(is_happy(\"a\"))      # False\nprint(is_happy(\"aa\"))     # False\nprint(is_happy(\"abcd\"))   # True\nprint(is_happy(\"aabb\"))   # False\nprint(is_happy(\"adb\"))    # True\nprint(is_happy(\"xyy\"))    # False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    # Function to convert a single GPA to a letter grade\n    def gpa_to_letter(gpa):\n        if gpa == 4.0:\n            return 'A+'\n        elif gpa > 3.7:\n            return 'A'\n        elif gpa > 3.3:\n            return 'A-'\n        elif gpa > 3.0:\n            return 'B+'\n        elif gpa > 2.7:\n            return 'B'\n        elif gpa > 2.3:\n            return 'B-'\n        elif gpa > 2.0:\n            return 'C+'\n        elif gpa > 1.7:\n            return 'C'\n        elif gpa > 1.3:\n            return 'C-'\n        elif gpa > 1.0:\n            return 'D+'\n        elif gpa > 0.7:\n            return 'D'\n        elif gpa > 0.0:\n            return 'D-'\n        else:\n            return 'E'\n    \n    # Convert each GPA in the list to a letter grade\n    letter_grades = [gpa_to_letter(gpa) for gpa in grades]\n    \n    return letter_grades\n\n# Example usage\ngrades = [4.0, 3, 1.7, 2, 3.5]\nprint(numerical_letter_grade(grades))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        \"\"\"Helper function to check if a number is prime\"\"\"\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Get the length of the string\n    string_length = len(string)\n    \n    # Check if the length is a prime number\n    return is_prime(string_length)\n\n# Test cases\nprint(prime_length('Hello'))    # Expected: True (length is 5, which is prime)\nprint(prime_length('abcdcba'))  # Expected: True (length is 7, which is prime)\nprint(prime_length('kittens'))  # Expected: True (length is 7, which is prime)\nprint(prime_length('orange'))   # Expected: False (length is 6, which is not prime)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        # Special case for 1-digit numbers: 1, 2, ..., 9\n        # Only 1 and 11 (which doesn't exist for n=1) are valid, so we return 1\n        return 1\n    \n    # Count of numbers starting with 1\n    start_with_1 = 10**(n-1)\n    \n    # Count of numbers ending with 1\n    end_with_1 = 10**(n-1)\n    \n    # Count of numbers both starting and ending with 1\n    start_and_end_with_1 = 10**(n-2)\n    \n    # Using inclusion-exclusion principle\n    total_count = start_with_1 + end_with_1 - start_and_end_with_1\n    \n    return total_count\n\n# Example usage:\nprint(starts_one_ends(1))  # output should be 1\nprint(starts_one_ends(2))  # output should be 19\nprint(starts_one_ends(3))  # output should be 190"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert N to its binary representation and remove the '0b' prefix\n    binary_representation = bin(N)[2:]\n    \n    # Calculate the sum of the digits in the binary representation\n    sum_of_digits = sum(int(digit) for digit in binary_representation)\n    \n    # Convert the sum of digits to its binary representation and remove the '0b' prefix\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    # Return the binary string of the sum\n    return binary_sum\n\n# Test cases\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0)\n\n# Example usage:\nprint(add([4, 2, 6, 7]))  # Output: 2\nprint(add([1, 4, 2, 6, 3, 8]))  # Output: 12 (4 + 8)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    # Split the string into words while keeping spaces intact\n    words = s.split(' ')\n    \n    # Sort characters in each word\n    sorted_words = [''.join(sorted(word)) for word in words]\n    \n    # Join the sorted words with spaces to form the final sentence\n    result = ' '.join(sorted_words)\n    \n    return result\n\n# Test cases\nprint(anti_shuffle('Hi'))          # Output: 'Hi'\nprint(anti_shuffle('hello'))       # Output: 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # Output: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates\n    coordinates = []\n\n    # Iterate over the rows of the list\n    for row_index, row in enumerate(lst):\n        # Find all the column indices in the current row where the element is x\n        column_indices = [col_index for col_index, value in enumerate(row) if value == x]\n        # Sort the column indices in descending order\n        column_indices.sort(reverse=True)\n        # Add the coordinates (row_index, col_index) to the list\n        for col_index in column_indices:\n            coordinates.append((row_index, col_index))\n    \n    return coordinates\n\n# Test cases\nprint(get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1))  # Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nprint(get_row([], 1))  # Output: []\nprint(get_row([[], [1], [1, 2, 3]], 3))  # Output: [(2, 2)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n    \"\"\"\n    # Check if the array is empty or has only one element\n    if len(array) <= 1:\n        return array.copy()\n    \n    # Compute the sum of the first and last elements\n    sum_first_last = array[0] + array[-1]\n    \n    # Determine the sorting order based on the sum\n    if sum_first_last % 2 == 0:\n        # Sum is even, sort in descending order\n        sorted_array = sorted(array, reverse=True)\n    else:\n        # Sum is odd, sort in ascending order\n        sorted_array = sorted(array)\n    \n    return sorted_array\n\n# Test cases\nprint(sort_array([]))          # Output: []\nprint(sort_array([5]))         # Output: [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # Output: [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # Output: [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    def shift_char(c):\n        if 'a' <= c <= 'z':  # Check if the character is a lowercase letter\n            return chr((ord(c) - ord('a') + 4) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':  # Check if the character is an uppercase letter\n            return chr((ord(c) - ord('A') + 4) % 26 + ord('A'))\n        else:\n            return c  # Non-alphabetic characters remain unchanged\n\n    return ''.join(shift_char(c) for c in s)\n\n# Test cases\nprint(encrypt('hi'))        # Should return 'lm'\nprint(encrypt('asdfghjkl')) # Should return 'ewhjklnop'\nprint(encrypt('gf'))        # Should return 'kj'\nprint(encrypt('et'))        # Should return 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    Returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    # Using set to remove duplicates\n    unique_elements = set(lst)\n    \n    if len(unique_elements) < 2:\n        return None\n    \n    # Convert set back to a sorted list\n    sorted_elements = sorted(unique_elements)\n    \n    # Return the second smallest element\n    return sorted_elements[1]\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Output: 2\nprint(next_smallest([]))               # Output: None\nprint(next_smallest([1, 1]))           # Output: None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    # Split the string into sentences using '.', '?', and '!' as delimiters\n    import re\n    sentences = re.split(r'[.?!]\\s*', S.strip())\n    \n    # Initialize the boredom count\n    boredom_count = 0\n    \n    # Iterate through each sentence and check if it starts with \"I\"\n    for sentence in sentences:\n        if sentence.startswith(\"I \"):\n            boredom_count += 1\n    \n    return boredom_count\n\n# Example usage\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1\nprint(is_bored(\"I am here. Are you there? I think so!\"))  # Output: 2"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if not all(isinstance(i, int) for i in (x, y, z)):\n        return False\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    return (x == y + z) or (y == x + z) or (z == x + y)\n\n# Test cases\nprint(any_int(5, 2, 7))   # \u279e True\nprint(any_int(3, 2, 2))   # \u279e False\nprint(any_int(3, -2, 1))  # \u279e True\nprint(any_int(3.6, -2.2, 2))  # \u279e False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    # Define vowels and the corresponding replacement after 2 letter shift\n    vowels = 'aeiou'\n    replacements = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                    'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    # Initialize an empty list to store the encoded characters\n    encoded_message = []\n\n    # Iterate through each character in the message\n    for char in message:\n        # Swap case and replace vowel if applicable\n        swapped_char = char.swapcase()\n        if swapped_char in replacements:\n            encoded_message.append(replacements[swapped_char])\n        else:\n            encoded_message.append(swapped_char)\n\n    # Join the list into a string and return it\n    return ''.join(encoded_message)\n\n# Examples provided in the problem statement\nprint(encode('test'))  # Expected Output: 'TGST'\nprint(encode('This is a message'))  # Expected Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, else False.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime number in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n    \n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    \n    if largest_prime is None:\n        return 0  # In case there are no prime numbers in the list\n    \n    # Calculate the sum of the digits of the largest prime number\n    return sum(int(digit) for digit in str(largest_prime))\n\n# Test cases\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))          # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))             # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))                                 # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))                                   # Output: 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    \"\"\"\n    if not d:  # Check if dictionary is empty\n        return False\n    \n    # Filter out non-string keys\n    string_keys = [key for key in d.keys() if isinstance(key, str)]\n    \n    # If there are no string keys, return False\n    if not string_keys:\n        return False\n    \n    # Check if all string keys are lower case\n    all_lower = all(key.islower() for key in string_keys)\n    \n    # Check if all string keys are upper case\n    all_upper = all(key.isupper() for key in string_keys)\n    \n    return all_lower or all_upper\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))  # True\nprint(check_dict_case({}))  # False"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\n# Test cases\nprint(count_up_to(5))   # Output: [2, 3]\nprint(count_up_to(11))  # Output: [2, 3, 5, 7]\nprint(count_up_to(0))   # Output: []\nprint(count_up_to(20))  # Output: [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))   # Output: []\nprint(count_up_to(18))  # Output: [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    # Get the unit digit of each number using the absolute value and modulo operation\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n\n# Example usage:\nprint(multiply(148, 412))  # Should return 16\nprint(multiply(19, 28))    # Should return 72\nprint(multiply(2020, 1851))  # Should return 0\nprint(multiply(14, -15))   # Should return 20"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # Define a set of uppercase vowels\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Initialize a counter for uppercase vowels at even indices\n    count = 0\n    \n    # Iterate over the string using enumeration to get both index and character\n    for i, char in enumerate(s):\n        # Check if the index is even and the character is an uppercase vowel\n        if i % 2 == 0 and char in uppercase_vowels:\n            count += 1\n    \n    return count\n\n# Test cases\nprint(count_upper('aBCdEf'))  # Output: 1\nprint(count_upper('abcdefg')) # Output: 0\nprint(count_upper('dBBE'))    # Output: 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert the value from string to float\n    num = float(value)\n    \n    # Use round() function, but add a small value to ensure correct rounding away from zero\n    # for the edge cases where the number is equidistant from two integers\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)\n\n# Test cases\nprint(closest_integer(\"10\"))     # Output: 10\nprint(closest_integer(\"15.3\"))   # Output: 15\nprint(closest_integer(\"14.5\"))   # Output: 15\nprint(closest_integer(\"-14.5\"))  # Output: -15\nprint(closest_integer(\"14.4\"))   # Output: 14\nprint(closest_integer(\"-14.4\"))  # Output: -14"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n    \"\"\"\n    pile = [n]\n    current_stones = n\n    \n    for _ in range(1, n):\n        if current_stones % 2 == 0:\n            current_stones += 2  # Add the next even number\n        else:\n            current_stones += 2  # Add the next odd number (same operation as even)\n        \n        pile.append(current_stones)\n    \n    return pile\n\n# Example usage\nprint(make_a_pile(3))  # Output: [3, 5, 7]\nprint(make_a_pile(4))  # Output: [4, 6, 8, 10]"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    \"\"\"\n    Splits the input string into words and returns an array of the words.\n    Words in the input string are separated by commas or spaces.\n    \"\"\"\n    # Use regular expression to split by comma or space(s)\n    words = re.split(r'[,\\s]+', s.strip())\n    \n    # Remove any empty strings that may result from multiple delimiters\n    words = [word for word in words if word]\n    \n    return words\n\n# Example usage:\nprint(words_string(\"Hi, my name is John\"))  # [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nprint(words_string(\"  Hello  ,  world  ,  this  is  a  test  \"))  # [\"Hello\", \"world\", \"this\", \"is\", \"a\", \"test\"]"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    # Ensure x is less than or equal to y\n    if x > y:\n        return -1\n    \n    # Start from the upper bound y and move downwards to find the largest even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number is found, return -1\n    return -1\n\n# Test cases\nprint(choose_num(12, 15))  # Output: 14\nprint(choose_num(13, 12))  # Output: -1\nprint(choose_num(10, 10))  # Output: 10\nprint(choose_num(11, 11))  # Output: -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    # Compute the average of integers from n to m (inclusive)\n    avg = (n + m) / 2\n    \n    # Compute the number of integers in the range [n, m]\n    num_integers = m - n + 1\n    \n    # Alternatively, we can compute the sum of the integers from n to m using the formula for the sum of an arithmetic series\n    # sum = (num_integers / 2) * (n + m)\n    # avg = sum / num_integers which simplifies to (n + m) / 2\n    \n    # Round the average to the nearest integer\n    rounded_avg = round(avg)\n    \n    # Convert to binary\n    binary_result = bin(rounded_avg)\n    \n    return binary_result\n\n# Test cases\nprint(rounded_avg(1, 5))  # Output: \"0b11\"\nprint(rounded_avg(7, 5))  # Output: -1\nprint(rounded_avg(10, 20))  # Output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Output: \"0b11010\""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    \n    for number in x:\n        # Convert the number to a string and check each digit\n        if all(digit not in '02468' for digit in str(number)):\n            result.append(number)\n    \n    # Sort the result list in increasing order\n    result.sort()\n    return result\n\n# Example usage\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Create a dictionary to map numbers to their corresponding names\n    number_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter out numbers that are not between 1 and 9 inclusive\n    filtered_numbers = [num for num in arr if num in number_to_name]\n    \n    # Sort the filtered numbers\n    filtered_numbers.sort()\n    \n    # Reverse the sorted list\n    filtered_numbers.reverse()\n    \n    # Replace each digit by its corresponding name\n    result = [number_to_name[num] for num in filtered_numbers]\n    \n    return result\n\n# Test cases\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))\n# Output should be ['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n\nprint(by_length([]))\n# Output should be []\n\nprint(by_length([1, -1, 55]))\n# Output should be ['One']"}
{"task_id": "HumanEval/106", "completion": "def factorial(x):\n    \"\"\" Helper function to calculate the factorial of a number x. \"\"\"\n    if x == 0 or x == 1:\n        return 1\n    result = 1\n    for i in range(2, x + 1):\n        result *= i\n    return result\n\ndef sum_of_numbers(x):\n    \"\"\" Helper function to calculate the sum of numbers from 1 to x. \"\"\"\n    return x * (x + 1) // 2\n\ndef f(n):\n    \"\"\" Main function to generate the list as per the problem statement. \"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # If i is even, calculate the factorial of i\n            result.append(factorial(i))\n        else:\n            # If i is odd, calculate the sum of numbers from 1 to i\n            result.append(sum_of_numbers(i))\n    return result\n\n# Example usage:\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        \"\"\"Check if a number is a palindrome.\"\"\"\n        s = str(x)\n        return s == s[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)\n\n# Example usage:\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12)) # Output: (4, 6)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        # Convert the number to string to process each digit\n        s = str(num)\n        # Initialize the sum of digits\n        total = 0\n        # Process each character in the string\n        for i, char in enumerate(s):\n            # Convert the character to integer\n            digit = int(char)\n            # If it's the first character and negative sign, make the digit negative\n            if i == 0 and char == '-':\n                continue\n            elif i == 0 and s[i] == '-':\n                digit = -digit\n            # Add the digit to the total sum\n            total += digit\n        return total\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count\n\n# Test cases\nprint(count_nums([]))          # Output: 0\nprint(count_nums([-1, 11, -11]))  # Output: 1\nprint(count_nums([1, 1, 2]))     # Output: 3"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) <= 1:\n        return True\n    \n    count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        if arr[i] > arr[(i + 1) % n]:\n            count += 1\n            if count > 1:\n                return False\n    \n    return count <= 1\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False\nprint(move_one_ball([1, 2, 3, 4, 5]))  # True\nprint(move_one_ball([5, 1, 2, 3, 4]))  # True\nprint(move_one_ball([2, 3, 4, 5, 1]))  # True\nprint(move_one_ball([4, 5, 6, 1, 2, 3]))  # True\nprint(move_one_ball([4, 5, 6, 2, 1, 3]))  # False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    # Count the number of odd elements in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # Count the number of even elements in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even elements in lst2 to replace all odd elements in lst1, return \"YES\"\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # => \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # => \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \"\"\"\n    # Step 1: Split the input string into a list of letters\n    letters = test.split()\n    \n    # Step 2: Count occurrences of each letter\n    count_dict = {}\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    \n    # Step 3: Determine the maximum count of occurrences\n    if not count_dict:  # Handle the edge case of an empty string\n        return {}\n    \n    max_count = max(count_dict.values())\n    \n    # Step 4: Filter the dictionary to include only letters with the maximum count\n    result = {letter: count for letter, count in count_dict.items() if count == max_count}\n    \n    return result\n\n# Test cases\nprint(histogram('a b c'))  # Expected: {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))  # Expected: {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))  # Expected: {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))  # Expected: {'b': 4}\nprint(histogram(''))  # Expected: {}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # First, create a set of characters to delete from s for faster lookup\n    chars_to_delete = set(c)\n    \n    # Delete all characters from s that are present in c\n    result_string = ''.join([char for char in s if char not in chars_to_delete])\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    # Return the result string and the palindrome check result\n    return (result_string, is_palindrome)\n\n# Test cases\nprint(reverse_delete(\"abcde\", \"ae\"))       # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))      # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # Output: ('cdedc', True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for digit in s if int(digit) % 2 != 0)\n        template = \"the number of odd elements in the string of the input.\"\n        # Replace 'i' with the odd_count in the template\n        modified_string = template.replace('i', str(odd_count))\n        result.append(modified_string)\n    return result\n\n# Test cases\nprint(odd_count(['1234567']))  # [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nprint(odd_count(['3', \"11111111\"]))  # [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Array must contain at least one integer\")\n    \n    # Initialize the minimum sum to a very large number\n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        # Update the current sum by including the current number\n        current_sum = min(num, current_sum + num)\n        # Update the minimum sum found so far\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n\n# Test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))        # Output: -6"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # Calculate the total amount of water in the grid\n    total_water = sum(sum(row) for row in grid)\n    \n    # Calculate the number of times we need to lower the bucket\n    # We need to round up to account for any remainder when dividing total_water by capacity\n    bucket_uses = math.ceil(total_water / capacity)\n    \n    return bucket_uses\n\n# Example usage:\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers according to the number of ones in their binary representation.\n    For similar number of ones, sort based on decimal value.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n# Test cases\nprint(sort_array([1, 5, 2, 3, 4]))  # Expected output: [1, 2, 4, 3, 5]\nprint(sort_array([1, 0, 2, 3, 4]))  # Expected output: [0, 1, 2, 4, 3]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    def is_consonant(char):\n        return char.lower() in 'bcdfghjklmnpqrstvwxyz'\n    \n    # Split the string into words\n    words = s.split()\n    \n    # List to store words with exactly n consonants\n    result = []\n    \n    # Iterate through each word\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(1 for char in word if is_consonant(char))\n        \n        # If the count matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n\n# Test cases\nprint(select_words(\"Mary had a little lamb\", 4))  # [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # []\nprint(select_words(\"Hello world\", 4))             # [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    last_consonant_index = -1\n    closest_vowel = \"\"\n\n    # Iterate over the word from right to left\n    for i in range(len(word) - 2, 0, -1):  # Skip the last character\n        if word[i] not in vowels:\n            last_consonant_index = i\n        elif last_consonant_index != -1 and word[i + 1] not in vowels:\n            closest_vowel = word[i]\n            break\n\n    return closest_vowel\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\"))  # Output: \"u\"\nprint(get_closest_vowel(\"FULL\"))    # Output: \"U\"\nprint(get_closest_vowel(\"quick\"))   # Output: \"\"\nprint(get_closest_vowel(\"ab\"))      # Output: \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:  # char == ')'\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n    \n    str1, str2 = lst\n    # Check both concatenation orders\n    if is_good(str1 + str2) or is_good(str2 + str1):\n        return 'Yes'\n    else:\n        return 'No'\n\n# Examples\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))    # Output: 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Edge case: if k is 0, return an empty list\n    if k == 0:\n        return []\n    \n    # Sort the array in descending order\n    sorted_desc = sorted(arr, reverse=True)\n    \n    # Pick the first k elements from the sorted array\n    max_k_elements = sorted_desc[:k]\n    \n    # Sort the picked k elements in ascending order before returning\n    return sorted(max_k_elements)\n\n# Test cases\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))   # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\"\"\"\n    total = 0\n    for i in range(0, len(lst), 2):  # Iterate over even indices\n        if lst[i] % 2 != 0:  # Check if the element is odd\n            total += lst[i]\n    return total\n\n# Test cases\nprint(solution([5, 8, 7, 1]))  # Output: 12\nprint(solution([3, 3, 3, 3, 3]))  # Output: 9\nprint(solution([30, 13, 24, 321]))  # Output: 0"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n    for i in range(k):\n        if abs(arr[i]) < 100:\n            total_sum += arr[i]\n    return total_sum\n\n# Example usage:\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nprint(add_elements(arr, k))  # Output: 24"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)  # Append the final 1 to the sequence\n\n    # Filter the collatz_sequence to keep only the odd numbers\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n\n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)\n\n# Example usage:\nprint(get_odd_collatz(5))  # Output: [1, 5]"}
{"task_id": "HumanEval/124", "completion": "import re\nfrom datetime import date\n\ndef is_leap_year(year):\n    \"\"\"Determine whether a given year is a leap year.\"\"\"\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)\n\ndef valid_date(date_str):\n    \"\"\"Validate the date based on the given rules.\"\"\"\n    # Rule 1: The date string is not empty\n    if not date_str:\n        return False\n    \n    # Rule 4: The date should be in the format: mm-dd-yyyy\n    match = re.match(r\"(\\d{2})-(\\d{2})-(\\d{4})\", date_str)\n    if not match:\n        return False\n    \n    month, day, year = map(int, match.groups())\n    \n    # Rule 3: The months should not be less than 1 or higher than 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Rule 2: Validate day range based on month\n    max_days_in_month = {\n        1: 31, 2: 29 if is_leap_year(year) else 28,  # February\n        3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    if day < 1 or day > max_days_in_month[month]:\n        return False\n    \n    return True  # If all checks pass, return True\n\n# Test cases\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))   # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False\nprint(valid_date('02-29-2020'))  # True (Leap year)\nprint(valid_date('02-29-2019'))  # False (Not a leap year)"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Check if the string contains whitespace and split on them\n    if ' ' in txt:\n        return txt.split()\n    # Check if the string contains commas and split on them\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count the number of lower-case letters with odd order in the alphabet\n        odd_order_count = sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)\n        return odd_order_count\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))        # \u279e 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if not lst:  # An empty list is trivially sorted\n        return True\n    \n    for i in range(1, len(lst)):\n        # Check if the list is sorted in ascending order\n        if lst[i] < lst[i - 1]:\n            return False\n    \n    # Check if there are more than one duplicate of any number\n    counts = {}\n    for num in lst:\n        if num in counts:\n            counts[num] += 1\n            if counts[num] > 2:\n                return False\n        else:\n            counts[num] = 1\n    \n    return True\n\n# Examples\nprint(is_sorted([5])) \u279e True\nprint(is_sorted([1, 2, 3, 4, 5])) \u279e True\nprint(is_sorted([1, 3, 2, 4, 5])) \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6])) \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4])) \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4])) \u279e False"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    # Extract start and end of each interval\n    a1, a2 = interval1\n    b1, b2 = interval2\n    \n    # Calculate the intersection\n    start_intersection = max(a1, b1)\n    end_intersection = min(a2, b2)\n    \n    # Check if the intervals intersect\n    if start_intersection > end_intersection:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length_intersection = end_intersection - start_intersection + 1\n    \n    # Check if the length is a prime number\n    if is_prime(length_intersection):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # Output: \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # Output: \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # Output: \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:  # Check if the array is empty\n        return None\n    \n    sum_of_magnitudes = 0\n    product_of_signs = 1\n    \n    for num in arr:\n        sum_of_magnitudes += abs(num)  # Add the absolute value of the number to the sum\n        \n        if num == 0:\n            product_of_signs = 0  # If there is a zero in the array, the product of signs is zero\n        elif num < 0:\n            product_of_signs *= -1  # Flip the sign if the number is negative\n    \n    return sum_of_magnitudes * product_of_signs\n\n# Example usage:\nprint(prod_signs([1, 2, 2, -4]))  # Output: -9\nprint(prod_signs([0, 1]))         # Output: 0\nprint(prod_signs([]))             # Output: None"}
{"task_id": "HumanEval/129", "completion": "from heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    min_path = None\n\n    def bfs(start_row, start_col):\n        nonlocal min_path\n        queue = [(grid[start_row][start_col], [(start_row, start_col)])]\n        \n        while queue:\n            current_value_sum, path = heappop(queue)\n            if len(path) == k:\n                current_path_values = [grid[r][c] for r, c in path]\n                if min_path is None or current_path_values < min_path:\n                    min_path = current_path_values\n                continue\n            \n            last_row, last_col = path[-1]\n            for dr, dc in directions:\n                new_row, new_col = last_row + dr, last_col + dc\n                if 0 <= new_row < N and 0 <= new_col < N:\n                    new_path = path + [(new_row, new_col)]\n                    heappush(queue, (current_value_sum + grid[new_row][new_col], new_path))\n    \n    for r in range(N):\n        for c in range(N):\n            bfs(r, c)\n    \n    return min_path\n\n# Example usage:\ngrid1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk1 = 3\nprint(minPath(grid1, k1))  # Output: [1, 2, 1]\n\ngrid2 = [[5, 9, 3], [4, 1, 6], [7, 8, 2]]\nk2 = 1\nprint(minPath(grid2, k2))  # Output: [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    \n    # Initialize the sequence with tri(1) = 3\n    sequence = [1, 3]\n    \n    # Generate the sequence up to tri(n)\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            # Even n: tri(n) = 1 + n / 2\n            sequence.append(1 + i // 2)\n        else:\n            # Odd n > 1: tri(n) = tri(n - 1) + tri(n - 2) + tri(n - 3)\n            # Add a conditional to manage index lower bounds for the first few terms\n            if i == 1:\n                sequence.append(3)  # tri(1) should be 3, already in the list\n            elif i == 2:\n                sequence.append(2)  # tri(2) = 1 + 2/2 = 2, already calculated\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 3])\n    \n    # Return the sequence up to tri(n)\n    return sequence[:n + 1]\n\n# Example usage:\nprint(tri(3))  # Output should be [1, 3, 2, 8]\nprint(tri(4))  # Output should be [1, 3, 2, 8, 3]\nprint(tri(5))  # Output should be [1, 3, 2, 8, 3, 16]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    \"\"\"\n    product = 1\n    has_odd = False\n    \n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:  # Check if the digit is odd\n            product *= digit\n            has_odd = True\n        n //= 10  # Move to the next digit\n    \n    return product if has_odd else 0\n\n# Example usage:\nprint(digits(1))   # Output: 1\nprint(digits(4))   # Output: 0\nprint(digits(235)) # Output: 15"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n    '''\n    # Initialize a counter to track the depth of the brackets\n    depth = 0\n    \n    # Variable to check if we have found a nested structure\n    found_nested = False\n    \n    for char in string:\n        if char == '[':\n            # Increase depth when encountering an opening bracket\n            depth += 1\n            \n            # Check if the depth is greater than 1 which indicates nesting\n            if depth > 1:\n                found_nested = True\n        elif char == ']':\n            # Decrease depth when encountering a closing bracket\n            depth -= 1\n            \n            # If depth goes negative, it means there are mismatched brackets\n            if depth < 0:\n                return False\n    \n    # If depth is not zero, it means there are mismatched brackets\n    if depth != 0:\n        return False\n    \n    return found_nested\n\n# Test cases\nprint(is_nested('[[]]'))        # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))        # \u279e False\nprint(is_nested('[]'))          # \u279e False\nprint(is_nested('[[][]]'))      # \u279e True\nprint(is_nested('[[]][['))      # \u279e True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"Return the sum of squares of the ceiling values of the numbers in the list.\"\"\"\n    return sum(math.ceil(x) ** 2 for x in lst)\n\n# Example usage:\nprint(sum_squares([1, 2, 3]))    # Output: 14\nprint(sum_squares([1, 4, 9]))    # Output: 98\nprint(sum_squares([1, 3, 5, 7])) # Output: 84\nprint(sum_squares([1.4, 4.2, 0]))# Output: 29\nprint(sum_squares([-2.4, 1, 1])) # Output: 6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Step 1: Strip trailing whitespace\n    txt = txt.rstrip()\n    \n    # Step 2: If the string is empty after stripping, return False\n    if not txt:\n        return False\n    \n    # Step 3: Split the string into words\n    words = txt.split()\n    \n    # Step 4: Get the last word\n    last_word = words[-1]\n    \n    # Step 5: Check if the last word is a single letter and is alphabetical\n    return len(last_word) == 1 and last_word.isalpha()\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    # Initialize the variable to store the largest index\n    largest_index = -1\n    \n    # Iterate through the array starting from the second element\n    for i in range(1, len(arr)):\n        # Check if the current element is less than the previous one\n        if arr[i] < arr[i - 1]:\n            # Update the largest index\n            largest_index = i\n    \n    # Return the largest index found, or -1 if no such index exists\n    return largest_index\n\n# Test cases\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))        # Output: -1\nprint(can_arrange([5, 4, 3, 2, 1]))  # Output: 4\nprint(can_arrange([1, 3, 2, 4, 5]))  # Output: 2\nprint(can_arrange([10]))             # Output: -1 (single element)"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    \n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n                \n    return (largest_negative, smallest_positive)\n\n# Examples to test the function\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Output: (None, 1)\nprint(largest_smallest_integers([]))                  # Output: (None, None)\nprint(largest_smallest_integers([0]))                 # Output: (None, None)\nprint(largest_smallest_integers([-3, -1, -2, 0, 1, 2]))  # Output: (-1, 1)\nprint(largest_smallest_integers([-10, -20, -30]))     # Output: (-10, None)\nprint(largest_smallest_integers([10, 20, 30]))        # Output: (None, 10)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def to_float(value):\n        if isinstance(value, str):\n            # Replace comma with dot for float conversion\n            value = value.replace(',', '.')\n        return float(value)\n\n    # Convert inputs to float for comparison\n    float_a = to_float(a)\n    float_b = to_float(b)\n\n    # Compare the float values\n    if float_a > float_b:\n        return a\n    elif float_b > float_a:\n        return b\n    else:\n        return None\n\n# Test cases\nprint(compare_one(1, 2.5))    # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\")) # \u279e \"6\"\nprint(compare_one(\"1\", 1))     # \u279e None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\"\"\"\n    # Check if n is at least 8 and if n is even\n    return n >= 8 and n % 2 == 0\n\n# Test cases\nprint(is_equal_to_sum_even(4))  # Expected: False\nprint(is_equal_to_sum_even(6))  # Expected: False\nprint(is_equal_to_sum_even(8))  # Expected: True\nprint(is_equal_to_sum_even(10)) # Expected: True\nprint(is_equal_to_sum_even(12)) # Expected: True"}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n    \n    For example:\n    >>> special_factorial(4)\n    288\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    \n    return result\n\n# Test the function with the given example\nprint(special_factorial(4))  # Output should be 288"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \"\"\"\n    # Replace sequences of 3 or more spaces with a hyphen\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining single or double spaces with underscores\n    text = re.sub(r' ', '_', text)\n    return text\n\n# Test cases\nprint(fix_spaces(\"Example\"))        # Output: \"Example\"\nprint(fix_spaces(\"Example 1\"))      # Output: \"Example_1\"\nprint(fix_spaces(\" Example 2\"))     # Output: \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))   # Output: \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    # Split the file name by dot\n    parts = file_name.split('.')\n    \n    # Check if there is exactly one dot in the file name\n    if len(parts) != 2:\n        return 'No'\n    \n    # Extract the name and extension\n    name, extension = parts\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Count the number of digits in the name\n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n    \n    # Check if the extension is one of the allowed values\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all checks pass, the file name is valid\n    return 'Yes'\n\n# Test cases\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\")) # => 'No'\nprint(file_name_check(\"ex1ample.txt\")) # => 'Yes'\nprint(file_name_check(\"ex1am2ple.txt\")) # => 'Yes'\nprint(file_name_check(\"ex1am2ple3.txt\")) # => 'Yes'\nprint(file_name_check(\"ex1am2ple34.txt\")) # => 'No'\nprint(file_name_check(\"example.\")) # => 'No'\nprint(file_name_check(\".example\")) # => 'No'\nprint(file_name_check(\"example\")) # => 'No'\nprint(file_name_check(\"example.doc\")) # => 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total_sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total_sum += lst[i] ** 2\n        elif i % 4 == 0:\n            total_sum += lst[i] ** 3\n        else:\n            total_sum += lst[i]\n    return total_sum\n\n# Test cases\nprint(sum_squares([1, 2, 3]))  # Output should be 6\nprint(sum_squares([]))  # Output should be 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Output should be -126"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Return a string with words whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n# Example usage:\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\""}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # Parse the fractions\n    num1, denom1 = map(int, x.split('/'))\n    num2, denom2 = map(int, n.split('/'))\n    \n    # Multiply the fractions\n    numerator = num1 * num2\n    denominator = denom1 * denom2\n    \n    # Check if the result is a whole number\n    return numerator % denominator == 0\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(n):\n        # Calculate the sum of digits of a number\n        # Convert the number to a string, take the absolute value to handle negative numbers\n        return sum(int(digit) for digit in str(abs(n)))\n\n    # Use the `sorted` function with a custom key\n    # The key is a tuple (digit_sum, index), which ensures that\n    # sorting is done first by digit sum and then by the original index\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n\n# Example usage:\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []"}
{"task_id": "HumanEval/146", "completion": "def is_odd_digit(digit):\n    \"\"\"Helper function to check if a digit is odd.\"\"\"\n    return digit in {'1', '3', '5', '7', '9'}\n\ndef specialFilter(nums):\n    \"\"\"Returns the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd.\"\"\"\n    count = 0\n    for num in nums:\n        if num > 10:\n            # Convert the number to a string and get the first and last digits\n            num_str = str(num)\n            first_digit = num_str[0]\n            last_digit = num_str[-1]\n            # Check if both first and last digits are odd\n            if is_odd_digit(first_digit) and is_odd_digit(last_digit):\n                count += 1\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    # Step 1: Generate the array 'a' based on the given formula.\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Step 2: Count the numbers with remainder 0, 1, and 2 when divided by 3.\n    count = [0, 0, 0]  # count[0] -> remainder 0, count[1] -> remainder 1, count[2] -> remainder 2\n    \n    for num in a:\n        count[num % 3] += 1\n    \n    # Step 3: Calculate the number of valid triples.\n    # 3 numbers with the same remainder 0\n    triples = count[0] * (count[0] - 1) * (count[0] - 2) // 6\n    # 3 numbers with the same remainder 1\n    triples += count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    # 3 numbers with the same remainder 2\n    triples += count[2] * (count[2] - 1) * (count[2] - 2) // 6\n    # One number with remainder 0, one with remainder 1, one with remainder 2\n    triples += count[0] * count[1] * count[2]\n    \n    return triples\n\n# Example usage:\nn = 5\nprint(get_max_triples(n))  # Output: 1"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    # List of planets in order by their proximity to the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planet1 and planet2 are valid planet names\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Get the indices of the given planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Determine the range of indices to select\n    if index1 < index2:\n        # Collect planets between the indices of planet1 and planet2\n        result = planets[index1 + 1:index2]\n    else:\n        # if planet1 comes after planet2 in the list, swap them\n        result = planets[index2 + 1:index1]\n    \n    # Convert the list to a tuple before returning\n    return tuple(result)\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # Expected output: (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # Expected output: (\"Venus\",)\nprint(bf(\"Mercury\", \"Uranus\")) # Expected output: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n\n# Example usage:\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Returns x if n is a prime number, otherwise returns y.\"\"\"\n    return x if is_prime(n) else y\n\n# Example usage:\nprint(x_or_y(7, 34, 12))  # Output: 34\nprint(x_or_y(15, 8, 5))   # Output: 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if not lst:\n        return 0\n    \n    sum_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            sum_squares += num ** 2\n    \n    return sum_squares\n\n# Example test cases\nprint(double_the_difference([1, 3, 2, 0]))  # Output: 10\nprint(double_the_difference([-1, -2, 0]))   # Output: 0\nprint(double_the_difference([9, -2]))       # Output: 81\nprint(double_the_difference([0]))           # Output: 0\nprint(double_the_difference([]))            # Output: 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    # Ensure both lists are of the same length\n    if len(game) != len(guess):\n        raise ValueError(\"The input lists must be of the same length.\")\n    \n    # Calculate the absolute differences\n    result = []\n    for score, prediction in zip(game, guess):\n        difference = abs(score - prediction)\n        result.append(difference)\n    \n    return result\n\n# Example usage:\nprint(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))  # Output: [0, 0, 0, 0, 3, 3]\nprint(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]))  # Output: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        uppercase_count = sum(1 for c in extension if c.isupper())\n        lowercase_count = sum(1 for c in extension if c.islower())\n        return uppercase_count - lowercase_count\n\n    strongest_extension = None\n    max_strength = float('-inf')\n\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n\n# Example usage:\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Output: 'Slices.SErviNGSliCes'\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: 'my_class.AA'"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n    \n    Parameters:\n    a (str): The first word.\n    b (str): The second word.\n    \n    Returns:\n    bool: True if any rotation of b is a substring of a, otherwise False.\n    \"\"\"\n    # Generate all rotations of b\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check if any rotation of b is a substring of a\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to string and remove the negative sign if present\n    num_str = str(abs(num))\n    \n    even_count = 0\n    odd_count = 0\n    \n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)\nprint(even_odd_count(0))    # Output: (1, 0)\nprint(even_odd_count(2468)) # Output: (4, 0)\nprint(even_odd_count(1357)) # Output: (0, 4)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n    \"\"\"\n    # Define the mapping of integers to Roman numeral symbols\n    int_to_roman_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'),\n        (1, 'i')\n    ]\n    \n    # Initialize the result as an empty string\n    roman_numeral = ''\n    \n    # Iterate over the mapping\n    for (value, symbol) in int_to_roman_map:\n        # Determine how many times the symbol can fit into the number\n        count = number // value\n        # Append the symbol 'count' times to the result\n        roman_numeral += symbol * count\n        # Reduce the number by the equivalent integer value\n        number -= value * count\n    \n    return roman_numeral\n\n# Test cases\nprint(int_to_mini_roman(19))   # Output: 'xix'\nprint(int_to_mini_roman(152))  # Output: 'clii'\nprint(int_to_mini_roman(426))  # Output: 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Sort the sides to ensure the largest side is considered as hypotenuse\n    sides = sorted([a, b, c])\n    # Check the Pythagorean theorem with the sorted sides\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5))  # Should return True\nprint(right_angle_triangle(1, 2, 3))  # Should return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_count = -1\n    result_word = None\n    \n    for word in words:\n        unique_chars = set(word)\n        unique_count = len(unique_chars)\n        \n        if unique_count > max_unique_count:\n            max_unique_count = unique_count\n            result_word = word\n        elif unique_count == max_unique_count:\n            if result_word is None or word < result_word:\n                result_word = word\n    \n    return result_word\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))   # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # Calculate how many carrots the rabbit can actually eat\n    can_eat = min(need, remaining)\n    \n    # Update the total number of eaten carrots\n    total_eaten = number + can_eat\n    \n    # Update the number of remaining carrots\n    carrots_left = remaining - can_eat\n    \n    # Return the result as a list\n    return [total_eaten, carrots_left]\n\n# Example usage:\nprint(eat(5, 6, 10))  # Output: [11, 4]\nprint(eat(4, 8, 9))   # Output: [12, 1]\nprint(eat(1, 10, 10)) # Output: [11, 0]\nprint(eat(2, 11, 5))  # Output: [7, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operators, operands):\n    # Start with the first operand\n    expression = str(operands[0])\n    \n    # Add operators and corresponding operands to the expression string\n    for i in range(len(operators)):\n        operator = operators[i]\n        operand = operands[i + 1]\n        expression += f\" {operator} {operand}\"\n    \n    # Evaluate the constructed expression string\n    result = eval(expression)\n    \n    return result\n\n# Example usage:\noperators = ['+', '*', '-']\noperands = [2, 3, 4, 5]\nresult = do_algebra(operators, operands)\nprint(result)  # Output should be 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # Check if there are any letters in the string\n    has_letters = any(char.isalpha() for char in s)\n    \n    if has_letters:\n        # If the string contains letters, reverse their case\n        result = ''.join(char.swapcase() if char.isalpha() else char for char in s)\n    else:\n        # If there are no letters, reverse the string\n        result = s[::-1]\n    \n    return result\n\n# Test cases\nprint(solve(\"1234\"))  # Expected output: \"4321\"\nprint(solve(\"ab\"))    # Expected output: \"AB\"\nprint(solve(\"#a@C\"))  # Expected output: \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    \n    # Encode the text to bytes\n    encoded_text = text.encode()\n    \n    # Create an md5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the bytes\n    md5_hash.update(encoded_text)\n    \n    # Get the hexadecimal representation of the hash\n    hex_md5 = md5_hash.hexdigest()\n    \n    return hex_md5"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even integers between a\n    and b (inclusive), in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => [10, 12, 14]\n    \"\"\"\n    # Ensure a is less than or equal to b\n    if a > b:\n        a, b = b, a\n\n    # Use a list comprehension to filter and collect even integers\n    even_integers = [i for i in range(a, b + 1) if i % 2 == 0]\n    \n    return even_integers\n\n# Examples\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14)) # Output: [10, 12, 14]"}
