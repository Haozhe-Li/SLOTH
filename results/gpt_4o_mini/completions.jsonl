{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in the given list of numbers, any two numbers are closer to each other than\n    the given threshold.\n    \n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # Sort the numbers\n    numbers.sort()\n    \n    # Check the differences between consecutive numbers\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i+1] - numbers[i]) < threshold:\n            return True\n    \n    return False"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"Separate groups of nested parentheses into individual strings.\"\"\"\n    # Initialize variables\n    balance = 0\n    current_group = []\n    result = []\n    \n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n    \n    for char in paren_string:\n        # If we encounter an opening parenthesis\n        if char == '(':\n            balance += 1\n            current_group.append(char)\n        elif char == ')':\n            balance -= 1\n            current_group.append(char)\n        \n        # If the balance is zero, we have a complete group\n        if balance == 0 and current_group:\n            result.append(''.join(current_group))\n            current_group = []\n    \n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    >>> truncate_number(7.25)\n    0.25\n    >>> truncate_number(10.0)\n    0.0\n    >>> truncate_number(5.999)\n    0.999\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"The number must be positive.\")\n    integer_part = int(number)  # Get the integer part\n    decimal_part = number - integer_part  # Calculate the decimal part\n    return decimal_part"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"Detect if the account balance falls below zero at any point.\n\n    Args:\n        operations (List[int]): A list of integers representing deposit and withdrawal operations.\n\n    Returns:\n        bool: True if the balance goes below zero at any point, False otherwise.\n\n    Examples:\n        >>> below_zero([1, 2, 3])\n        False\n        >>> below_zero([1, 2, -4, 5])\n        True\n    \"\"\"\n    balance = 0  # Starting balance is zero\n\n    for operation in operations:\n        balance += operation  # Update balance with the current operation\n        if balance < 0:  # Check if the balance goes below zero\n            return True  # Return True if it falls below zero\n\n    return False  # Return False if the balance never goes below zero"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    \n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    if not numbers:\n        return 0.0  # Return 0 for an empty list to avoid division by zero\n\n    mean_value = sum(numbers) / len(numbers)  # Calculate the mean\n    absolute_deviations = [abs(x - mean_value) for x in numbers]  # Calculate absolute deviations\n    mad = sum(absolute_deviations) / len(numbers)  # Calculate MAD\n    return mad"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers`.\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:  # Avoid adding delimiter after the last element\n            result.append(delimiter)\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(intersperse([1, 2, 3], 4))  # Output: [1, 4, 2, 4, 3]\n    print(intersperse([], 4))          # Output: []"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()  # Split the input string into individual groups\n    depths = []  # This will store the maximum depth for each group\n\n    for group in groups:\n        max_depth = 0  # To track the maximum depth for the current group\n        current_depth = 0  # To track current depth as we traverse the group\n\n        for char in group:\n            if char == '(':  # If we encounter an opening parenthesis\n                current_depth += 1  # Increase current depth\n                max_depth = max(max_depth, current_depth)  # Update max depth if current is greater\n            elif char == ')':  # If we encounter a closing parenthesis\n                current_depth -= 1  # Decrease current depth\n\n        depths.append(max_depth)  # Append the maximum depth for the current group to the result list\n\n    return depths\n\n# Example usage\nif __name__ == \"__main__\":\n    print(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" \n    Filter an input list of strings only for ones that contain given substring.\n    \n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n# Example usage\nif __name__ == \"__main__\":\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))  # Output: ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    \n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    total_sum = sum(numbers)\n    total_product = 1 if numbers else 1  # Initialize to 1, which is the identity for multiplication\n    \n    for number in numbers:\n        total_product *= number\n    \n    return total_sum, total_product\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(sum_product([]))          # Output: (0, 1)\n    print(sum_product([1, 2, 3, 4])) # Output: (10, 24)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    \n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n    current_max = numbers[0]\n\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n\n    return result\n\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(rolling_max([1, 2, 3, 2, 3, 4, 2]))  # Output: [1, 2, 3, 3, 3, 4, 4]"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n    \n    # Find the longest palindromic suffix\n    for i in range(len(string)):\n        # Check if the substring from i to end is a palindrome\n        if is_palindrome(string[i:]):\n            # The prefix to be added in reverse is from the start to i\n            prefix_to_add = string[:i]\n            return string + prefix_to_add[::-1]\n    \n    # If no palindromic suffix was found, the whole string will be added in reverse\n    return string + string[::-1]\n\n# Example usage:\nprint(make_palindrome(''))      # ''\nprint(make_palindrome('cat'))   # 'catac'\nprint(make_palindrome('cata'))  # 'catac'"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    \n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Ensure that both strings are of the same length\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length\")\n    \n    # Perform XOR operation\n    result = []\n    for bit_a, bit_b in zip(a, b):\n        # XOR operation: 1 if bits are different, 0 if they're the same\n        xor_bit = '1' if bit_a != bit_b else '0'\n        result.append(xor_bit)\n    \n    # Join the list into a string and return\n    return ''.join(result)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(string_xor('010', '110'))  # Output: '100'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \n    >>> longest([])\n    >>> None\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = strings[0]  # Start with the first string\n    for string in strings[1:]:  # Iterate through the rest of the strings\n        if len(string) > len(longest_string):  # Check if the current string is longer\n            longest_string = string\n    \n    return longest_string\n\n# Example usage\nif __name__ == \"__main__\":\n    print(longest([]))  # None\n    print(longest(['a', 'b', 'c']))  # 'a'\n    print(longest(['a', 'bb', 'ccc']))  # 'ccc'"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return the greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    >>> greatest_common_divisor(48, 18)\n    6\n    >>> greatest_common_divisor(101, 10)\n    1\n    >>> greatest_common_divisor(0, 10)\n    10\n    >>> greatest_common_divisor(10, 0)\n    10\n    >>> greatest_common_divisor(0, 0)\n    0\n    \"\"\"\n    if a == 0 and b == 0:\n        return 0  # GCD is not defined for both numbers being zero\n    if a == 0:\n        return abs(b)\n    if b == 0:\n        return abs(a)\n    \n    while b:\n        a, b = b, a % b\n    return abs(a)\n\n# You can run the doctests to verify that the function works correctly\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(all_prefixes('abc'))  # Output: ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))\n\n# Example usage\nprint(string_sequence(0))  # Output: '0'\nprint(string_sequence(5))  # Output: '0 1 2 3 4 5'"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of.\n    \n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase and create a set of characters\n    distinct_characters = set(string.lower())\n    # Return the size of the set\n    return len(distinct_characters)\n\n# Test cases to verify the function\nif __name__ == \"__main__\":\n    print(count_distinct_characters('xyzXYZ'))  # Output: 3\n    print(count_distinct_characters('Jerry'))    # Output: 4"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    note last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Mapping of note representations to their respective beat values\n    note_to_beats = {\n        'o': 4,  # whole note\n        'o|': 2, # half note\n        '.|': 1   # quarter note\n    }\n    \n    # Split the input string into individual notes\n    notes = music_string.split()\n    \n    # Convert each note to its corresponding beat value\n    beat_values = [note_to_beats[note] for note in notes if note in note_to_beats]\n    \n    return beat_values\n\n# Example usage\nif __name__ == \"__main__\":\n    result = parse_music('o o| .| o| o| .| .| .| .| o o')\n    print(result)  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlapping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    start = 0\n    \n    while True:\n        start = string.find(substring, start)\n        if start == -1:  # No more occurrences found\n            break\n        count += 1\n        start += 1  # Move to the next character to allow overlapping\n\n    return count\n\n# You can test the function with the provided examples\nif __name__ == \"__main__\":\n    print(how_many_times('', 'a'))      # Output: 0\n    print(how_many_times('aaa', 'a'))   # Output: 3\n    print(how_many_times('aaaa', 'aa')) # Output: 3"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n    \n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n\n    # Mapping from string representations to integers\n    num_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    \n    # Reverse mapping to convert back to strings\n    reverse_num_map = {v: k for k, v in num_map.items()}\n    \n    # Split the input string into a list of words\n    words = numbers.split()\n    \n    # Convert words to integers using the num_map\n    num_list = [num_map[word] for word in words]\n    \n    # Sort the list of integers\n    num_list.sort()\n    \n    # Convert sorted integers back to words using the reverse_num_map\n    sorted_words = [reverse_num_map[num] for num in num_list]\n    \n    # Join the sorted words into a single string and return\n    return ' '.join(sorted_words)\n\n# Example usage\nprint(sort_numbers('three one five'))  # Output: 'one three five'"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # Sort the list to bring closest elements next to each other\n    sorted_numbers = sorted(numbers)\n    \n    # Initialize variables to track the smallest difference and the corresponding closest pair\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    \n    # Iterate through the sorted list and find the closest pair\n    for i in range(len(sorted_numbers) - 1):\n        diff = abs(sorted_numbers[i + 1] - sorted_numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    \n    return closest_pair\n\n# Example usage and tests:\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Output: (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # Output: (2.0, 2.0)"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1.\n    \n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two elements.\")\n    \n    min_value = min(numbers)\n    max_value = max(numbers)\n    \n    # Avoid division by zero if all numbers are the same\n    if min_value == max_value:\n        return [0.0] * len(numbers)\n    \n    return [(x - min_value) / (max_value - min_value) for x in numbers]\n\n# Example usage:\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n\n# You can also run the doctests to verify the functionality\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(28)\n    14\n    >>> largest_divisor(1)\n    0\n    >>> largest_divisor(10)\n    5\n    \"\"\"\n    # We start checking from n-1 down to 1\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:  # Check if i divides n evenly\n            return i     # Return the first (largest) divisor found\n    return 0  # If no divisor is found, we return 0 (in case n is 1)\n\n# Example usage:\nprint(largest_divisor(15))  # Output: 5"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    # Start with the smallest prime number\n    divisor = 2\n\n    while n > 1:\n        while n % divisor == 0:  # While divisible by the current divisor\n            factors.append(divisor)  # Append the factor\n            n //= divisor  # Divide n by the factor\n        divisor += 1  # Move to the next number\n\n        # If divisor squared is greater than n, we can stop\n        if divisor * divisor > n:\n            if n > 1:  # If there's any prime factor left, it must be n itself\n                factors.append(n)\n            break\n\n    return factors\n\n# Example usage\nif __name__ == \"__main__\":\n    print(factorize(8))   # Output: [2, 2, 2]\n    print(factorize(25))  # Output: [5, 5]\n    print(factorize(70))  # Output: [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Count the occurrences of each number\n    count = {}\n    for num in numbers:\n        count[num] = count.get(num, 0) + 1\n    \n    # Filter out the numbers that occur more than once\n    result = [num for num in numbers if count[num] == 1]\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    >>> flip_case('hELLO')\n    'Hello'\n    >>> flip_case('Python3')\n    'pYTHON3'\n    >>> flip_case('')\n    ''\n    \"\"\"\n    return string.swapcase()\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(flip_case('Hello'))  # Output: 'hELLO'\n    print(flip_case('hELLO'))  # Output: 'Hello'\n    print(flip_case('Python3')) # Output: 'pYTHON3'\n    print(flip_case(''))        # Output: ''"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n\n# You can test the function using the provided examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    \n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    \n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n# If you want to run the doctests to verify the function, you can use the following lines:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False  # 1 and numbers less than 1 are not prime\n    if n <= 3:\n        return True   # 2 and 3 are prime numbers\n    if n % 2 == 0 or n % 3 == 0:\n        return False  # eliminate multiples of 2 and 3\n    \n    i = 5\n    while i * i <= n:  # check for factors from 5 to sqrt(n)\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6  # check 6k \u00b1 1\n    \n    return True\n\n# You can test the function using the provided docstring examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef poly_derivative(xs: list, x: float):\n    \"\"\"\n    Evaluates the derivative of the polynomial defined by coefficients xs at point x.\n    \"\"\"\n    return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero finds x such that poly(x) = 0.\n    find_zero returns only one zero point, even if there are many.\n    Moreover, find_zero only takes list xs having an even number of coefficients\n    and largest non-zero coefficient as it guarantees a solution.\n    \n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Initial guess can be zero or a small number\n    x = 0.0\n    tolerance = 1e-7\n    max_iterations = 1000\n\n    for _ in range(max_iterations):\n        f_x = poly(xs, x)\n        f_prime_x = poly_derivative(xs, x)\n        \n        if abs(f_x) < tolerance:  # Found a root\n            return x\n        \n        if f_prime_x == 0:  # Derivative is zero, cannot proceed\n            raise ValueError(\"Derivative is zero; Newton-Raphson method fails.\")\n        \n        # Newton-Raphson iteration\n        x = x - f_x / f_prime_x\n\n    raise ValueError(\"Maximum iterations reached; root not found.\")\n\n# Test the function\nif __name__ == \"__main__\":\n    print(round(find_zero([1, 2]), 2))  # Example test case\n    print(round(find_zero([-6, 11, -6, 1]), 2))  # Example test case"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    \n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Extract values at indices divisible by 3\n    third_values = [l[i] for i in range(len(l)) if i % 3 == 0]\n    \n    # Sort the values extracted\n    sorted_third_values = sorted(third_values)\n    \n    # Iterator for sorted values\n    sorted_iter = iter(sorted_third_values)\n    \n    # Create new list according to the rules\n    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(next(sorted_iter))  # Replace with sorted value\n        else:\n            result.append(l[i])  # Keep original value\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\n    print(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n# Example usage\nif __name__ == '__main__':\n    print(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [0, 2, 3, 5, 9, 123]"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    \n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:  # Check if the list is empty\n        raise ValueError(\"The list is empty.\")\n    \n    return max(l)\n\n# You can run the docstring tests using the following:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    \n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count_of_sevens = 0\n    \n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count_of_sevens += str(i).count('7')\n    \n    return count_of_sevens\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(fizz_buzz(50))  # Output: 0\n    print(fizz_buzz(78))  # Output: 2\n    print(fizz_buzz(79))  # Output: 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indices, while its values at the even indices are equal\n    to the values of the even indices of l, but sorted.\n    \n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    >>> sort_even([10, 1, 2, 3, 4, 5, 6])\n    [2, 1, 4, 3, 6, 5]\n    >>> sort_even([9, 8, 7, 6, 5, 4, 3, 2, 1])\n    [1, 8, 3, 6, 5, 4, 9, 2]\n    \"\"\"\n    \n    # Extract even index elements\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    \n    # Sort the even index elements\n    even_indices.sort()\n    \n    # Create a new list to hold the result\n    result = l[:]  # Make a copy of the original list\n    \n    # Replace even indices with sorted values\n    for i, value in enumerate(even_indices):\n        result[i * 2] = value\n    \n    return result\n\n# Uncomment below lines to test the function\n# print(sort_even([1, 2, 3]))          # Output: [1, 2, 3]\n# print(sort_even([5, 6, 3, 4]))       # Output: [3, 6, 5, 4]\n# print(sort_even([10, 1, 2, 3, 4, 5, 6]))  # Output: [2, 1, 4, 3, 6, 5]\n# print(sort_even([9, 8, 7, 6, 5, 4, 3, 2, 1]))  # Output: [1, 8, 3, 6, 5, 4, 9, 2]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split the string into groups of three characters\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # reverse the cycling operation for each group\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    \n    return \"\".join(groups)\n\n# Example usage:\nencoded = encode_cyclic(\"abcdefghijk\")\nprint(\"Encoded:\", encoded)  # Output: \"bcadefhgik\"\ndecoded = decode_cyclic(encoded)\nprint(\"Decoded:\", decoded)  # Output: \"abcdefghijk\""}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns the n-th number that is a Fibonacci number and also a prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    fib1, fib2 = 0, 1\n    prime_fib_list = []\n\n    while len(prime_fib_list) < n:\n        fib_next = fib1 + fib2\n        fib1, fib2 = fib2, fib_next\n        \n        if is_prime(fib_next):\n            prime_fib_list.append(fib_next)\n\n    return prime_fib_list[n - 1]\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    l.sort()  # Sort the list first\n    n = len(l)\n\n    for i in range(n - 2):  # Iterate through the list\n        if i > 0 and l[i] == l[i - 1]:  # Skip duplicates\n            continue\n        \n        left, right = i + 1, n - 1  # Set pointers\n        \n        while left < right:  # Use two-pointer technique\n            current_sum = l[i] + l[left] + l[right]\n            \n            if current_sum == 0:\n                return True  # Found a triplet\n            \n            elif current_sum < 0:\n                left += 1  # Move left pointer to the right to increase the sum\n            else:\n                right -= 1  # Move right pointer to the left to decrease the sum\n\n    return False  # No triplet found that sums to zero\n\n# You can run the doctests below to verify the implementation\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Calculate the number of collisions between two sets of cars\n    moving in opposite directions on a straight road.\n\n    Parameters:\n    n (int): The number of cars moving left to right and also the number \n              of cars moving right to left.\n\n    Returns:\n    int: The total number of collisions.\n    \"\"\"\n    return n * n  # Each car from the left will collide with each car from the right\n\n# Example usage:\nif __name__ == \"__main__\":\n    n = 5  # Example number of cars\n    print(f\"Number of collisions for {n} cars: {car_race_collision(n)}\")"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n\n# Example usage:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for number in l:\n        if -number in seen:\n            return True\n        seen.add(number)\n    return False\n\n# You can test the function with the provided examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if base <= 1 or base >= 10:\n        raise ValueError(\"Base must be between 2 and 9 (inclusive).\")\n\n    if x == 0:\n        return '0'\n\n    result = []\n    while x > 0:\n        remainder = x % base\n        result.append(str(remainder))\n        x //= base\n\n    # The digits are collected in reverse order, so we need to reverse them back\n    result.reverse()\n    return ''.join(result)\n\n# You can test the function with the provided examples\nif __name__ == \"__main__\":\n    print(change_base(8, 3))  # Output: '22'\n    print(change_base(8, 2))  # Output: '1000'\n    print(change_base(7, 2))  # Output: '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side (base) and height, return area for a triangle.\n    \n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n\n# You can test the function with the provided example\nif __name__ == \"__main__\":\n    print(triangle_area(5, 3))  # Should output 7.5"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    # Initialize the first four values of the Fib4 sequence\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Create a list to store the Fib4 values up to n\n    fib_values = [0] * (n + 1)\n    fib_values[0] = 0\n    fib_values[1] = 0\n    fib_values[2] = 2\n    fib_values[3] = 0\n\n    # Fill the list using the definition of the Fib4 sequence\n    for i in range(4, n + 1):\n        fib_values[i] = fib_values[i - 1] + fib_values[i - 2] + fib_values[i - 3] + fib_values[i - 4]\n    \n    return fib_values[n]\n\n# Example usage\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # Sort the list\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    \n    # Calculate median\n    if n % 2 == 1:  # odd number of elements\n        return sorted_list[n // 2]\n    else:  # even number of elements\n        mid1 = sorted_list[n // 2 - 1]\n        mid2 = sorted_list[n // 2]\n        return (mid1 + mid2) / 2\n\n# Example usage\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Normalize the string by converting it to lowercase and removing spaces\n    normalized_text = text.lower().replace(\" \", \"\")\n    # Check if the string is equal to its reverse\n    return normalized_text == normalized_text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n\n# You can test the function using the provided examples:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    \"\"\"\n    Returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    Takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n\n# Example usage:\nencoded = encode_shift(\"hello\")\nprint(\"Encoded:\", encoded)  # Output should be \"mjqqt\"\n\ndecoded = decode_shift(encoded)\nprint(\"Decoded:\", decoded)  # Output should be \"hello\""}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes a string and returns a string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)\n\n# You can run the following code to test the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    \n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(x < t for x in l)\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(below_threshold([1, 2, 4, 10], 100))  # Output: True\n    print(below_threshold([1, 20, 4, 10], 5))   # Output: False"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y.\n    \n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/54", "completion": "from collections import Counter\n\ndef same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    # Count characters in both strings\n    count_s0 = Counter(s0)\n    count_s1 = Counter(s1)\n    \n    # Compare the two counts\n    return count_s0 == count_s1\n\n# You can run the test cases as follows:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    \n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input should be a positive integer\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n\n# Uncomment to run doctests if you want to verify the function\n# if __name__ == \"__main__\":\n#     import doctest\n#     doctest.testmod()"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    \n    for char in brackets:\n        if char == '<':\n            count += 1\n        elif char == '>':\n            count -= 1\n        \n        # If at any point count is negative, we have more closing than opening brackets\n        if count < 0:\n            return False\n    \n    # At the end, count should be zero for a valid bracket sequence\n    return count == 0\n\n# Test cases\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"<\"))       # False\n    print(correct_bracketing(\"<>\"))      # True\n    print(correct_bracketing(\"<<><>>\"))  # True\n    print(correct_bracketing(\"><<>\"))    # False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    \n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    >>> monotonic([1, 1, 1, 1])\n    True\n    >>> monotonic([])\n    True\n    \"\"\"\n    if not l:  # An empty list is considered monotonic\n        return True\n    \n    increasing = decreasing = True\n    \n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    \n    return increasing or decreasing\n\n# You can run the doctests to verify the function works as expected.\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n    \"\"\"\n    # Convert lists to sets to get unique elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find common elements using intersection\n    common_elements = set1.intersection(set2)\n    \n    # Convert to a sorted list before returning\n    return sorted(common_elements)\n\n# Example usage\nif __name__ == \"__main__\":\n    print(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n    print(common([5, 3, 2, 8], [3, 2]))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Initialize the largest prime factor\n    largest_factor = None\n    \n    # Check for the number of 2s that divide n\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n\n    # At this point, n must be odd. We can skip even numbers.\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n\n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n\n    return largest_factor"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2  # Use integer division for an integer result"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        # If balance goes negative, there's a closing bracket without a match\n        if balance < 0:\n            return False\n    # At the end, balance should be zero for correct bracketing\n    return balance == 0\n\n# Test cases\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"(\"))         # False\n    print(correct_bracketing(\"()\"))        # True\n    print(correct_bracketing(\"(()())\"))    # True\n    print(correct_bracketing(\")(()\"))      # False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    \"\"\" \n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    Return derivative of this polynomial in the same form.\n    \n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # The derivative of a polynomial is given by:\n    # For each coefficient a_i at index i, the new coefficient will be i * a_i\n    # We skip the first term since its derivative is 0\n    return [i * coeff for i, coeff in enumerate(xs) if i > 0]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))        # Output: [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    \"\"\"Compute the n-th element of the FibFib number sequence.\"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    # Create a list to store FibFib numbers up to n\n    fibfib_sequence = [0] * (n + 1)\n    fibfib_sequence[0] = 0\n    fibfib_sequence[1] = 0\n    fibfib_sequence[2] = 1\n    \n    # Calculate FibFib numbers using dynamic programming\n    for i in range(3, n + 1):\n        fibfib_sequence[i] = fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3]\n    \n    return fibfib_sequence[n]\n\n# Test cases\nif __name__ == \"__main__\":\n    print(fibfib(1))  # Output: 0\n    print(fibfib(5))  # Output: 4\n    print(fibfib(8))  # Output: 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n    # Define the set of vowels\n    vowels = set('aeiou')\n    count = 0\n    \n    # Convert the string to lowercase for case insensitivity\n    s_lower = s.lower()\n    \n    # Count vowels in the string\n    for i, char in enumerate(s_lower):\n        if char in vowels:\n            count += 1\n        # Check for 'y' at the end of the word\n        elif char == 'y' and i == len(s_lower) - 1:\n            count += 1\n            \n    return count\n\n# Add more test cases to validate the solution\nif __name__ == \"__main__\":\n    # Provided test cases\n    print(vowels_count(\"abcde\"))  # 2\n    print(vowels_count(\"ACEDY\"))  # 3\n    \n    # Additional test cases\n    print(vowels_count(\"hello\"))  # 2\n    print(vowels_count(\"sky\"))    # 1 (y is at the end)\n    print(vowels_count(\"rhythm\"))  # 0 (no vowels)\n    print(vowels_count(\"Y\"))      # 1 (y at the end)\n    print(vowels_count(\"Yummy\"))   # 2 (y at the start and 'u')\n    print(vowels_count(\"AEIOU\"))  # 5 (all vowels)\n    print(vowels_count(\"\"))        # 0 (empty string)\n    print(vowels_count(\"abcdEfghIJKlmnOPqrstuvwxyzY\"))  # 9 (includes 'y' at the end)"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    >>> circular_shift(12, 1)\n    '21'\n    >>> circular_shift(12, 2)\n    '12'\n    >>> circular_shift(12345, 1)\n    '51234'\n    >>> circular_shift(12345, 5)\n    '54321'\n    >>> circular_shift(12345, 7)\n    '54321'\n    \"\"\"\n    # Convert the integer to a string to manipulate the digits\n    str_x = str(x)\n    n = len(str_x)  # Number of digits\n\n    # If shift is greater than or equal to the number of digits, reverse the digits\n    if shift >= n:\n        return str_x[::-1]\n    \n    # Perform the circular shift\n    shift = shift % n  # Use modulo to handle cases where shift is larger than n\n    return str_x[-shift:] + str_x[:-shift]\n\n# Test cases\nprint(circular_shift(12, 1))  # Output: '21'\nprint(circular_shift(12, 2))  # Output: '12'\nprint(circular_shift(12345, 1))  # Output: '51234'\nprint(circular_shift(12345, 5))  # Output: '54321'\nprint(circular_shift(12345, 7))  # Output: '54321'"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Calculate the sum of ASCII values of uppercase characters in the input string.\"\"\"\n    return sum(ord(char) for char in s if char.isupper())\n\n# Test cases\nprint(digitSum(\"\"))          # Output: 0\nprint(digitSum(\"abAB\"))     # Output: 131\nprint(digitSum(\"abcCd\"))    # Output: 67\nprint(digitSum(\"helloE\"))   # Output: 69\nprint(digitSum(\"woArBld\"))  # Output: 131\nprint(digitSum(\"aAaaaXa\"))  # Output: 153"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    # Split the input string to extract numbers of apples and oranges\n    parts = s.split()\n    apples = int(parts[0])  # The first part is the number of apples\n    oranges = int(parts[3])  # The fourth part is the number of oranges\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # Output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120))  # Output: 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n    \n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n    \n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1] \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n    \"\"\"\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if value < smallest_even:  # Check if it's the smallest even found\n                smallest_even = value\n                smallest_index = index\n\n    if smallest_index == -1:  # No even value found\n        return []\n    else:\n        return [smallest_even, smallest_index]\n\n# Example usage:\nprint(pluck([4, 2, 3]))  # Output: [2, 1]\nprint(pluck([1, 2, 3]))  # Output: [2, 1]\nprint(pluck([]))         # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n\n    # Count the frequency of each integer in the list\n    frequency = Counter(lst)\n\n    max_value = -1\n\n    # Iterate through the frequency dictionary\n    for num, freq in frequency.items():\n        # Check if frequency is greater than or equal to the number itself\n        if freq >= num:\n            max_value = max(max_value, num)\n\n    return max_value\n\n# Example test cases\nprint(search([4, 1, 2, 2, 3, 1]))  # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\nprint(search([5, 5, 4, 4, 4]))  # Output: -1"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return []\n\n    lst.sort()  # Sort the list to prepare for strange ordering\n    result = []\n    \n    left = 0  # Pointer for minimum values\n    right = len(lst) - 1  # Pointer for maximum values\n\n    # Alternate between minimum and maximum values\n    while left <= right:\n        if left == right:  # In case of odd number of elements\n            result.append(lst[left])\n            break\n        result.append(lst[left])  # Append the minimum\n        result.append(lst[right])  # Append the maximum\n        left += 1\n        right -= 1\n    \n    return result\n\n# Example usages:\nprint(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\nprint(strange_sort_list([]))             # Output: []"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1.\n    \n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    \n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Return the area rounded to 2 decimal points\n    return round(area, 2)\n\n# Example usage\nprint(triangle_area(3, 4, 5))  # Output: 6.00\nprint(triangle_area(1, 2, 10))  # Output: -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Check if the list is a palindrome\n    is_palindrome = (q == q[::-1])\n    # Calculate the sum of the elements in the list\n    total_weight = sum(q)\n    \n    # The object will fly if it is balanced (palindrome) and the total weight is within the limit\n    return is_palindrome and total_weight <= w\n\n# Test cases\nprint(will_it_fly([1, 2], 5))  # \u279e False\nprint(will_it_fly([3, 2, 3], 1))  # \u279e False\nprint(will_it_fly([3, 2, 3], 9))  # \u279e True\nprint(will_it_fly([3], 5))  # \u279e True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic.\n    \"\"\"\n    changes = 0\n    n = len(arr)\n    \n    # Compare elements from the start and the end of the array\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    \n    return changes\n\n# Test cases\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))     # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))            # Output: 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\n    # Calculate total characters for each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    # Compare totals and return appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1  # return the first list if totals are equal\n\n# Test cases\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']"}
{"task_id": "HumanEval/75", "completion": "from itertools import combinations\n\ndef is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_primes(limit):\n    \"\"\"Generate a list of prime numbers less than the given limit.\"\"\"\n    return [num for num in range(2, limit) if is_prime(num)]\n\ndef is_multiply_prime(a):\n    \"\"\"Return true if a is the multiplication of 3 prime numbers, false otherwise.\"\"\"\n    if a < 1 or a >= 100:\n        return False\n    \n    primes = generate_primes(100)\n    \n    # Check combinations of 3 different primes\n    for combination in combinations(primes, 3):\n        if combination[0] * combination[1] * combination[2] == a:\n            return True\n    \n    return False\n\n# Example usage:\nprint(is_multiply_prime(30))  # Output: True\nprint(is_multiply_prime(60))  # Output: False"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if n <= 1:\n        # If n is 1, n**k will always be 1 for any k >= 0, \n        # so x must be 1 for n to be a simple power of n.\n        return x == 1\n    if x < 1:\n        # If x is less than 1, no positive n raised to any\n        # integer power can result in a negative number or zero.\n        return False\n    \n    power = 1\n    while True:\n        power_value = n ** power\n        if power_value == x:\n            return True\n        if power_value > x:\n            return False\n        power += 1\n\n# Example usage\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    '''\n    Check if the given integer a is a perfect cube.\n    \n    Parameters:\n    a (int): The integer to check.\n    \n    Returns:\n    bool: True if a is a perfect cube, False otherwise.\n    \n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a < 0:\n        # For negative numbers, we use -a to find the cube root\n        root = round((-a) ** (1/3))\n        return root ** 3 == a\n    else:\n        root = round(a ** (1/3))\n        return root ** 3 == a\n\n# Testing the function with the provided examples\nprint(iscube(1))    # True\nprint(iscube(2))    # False\nprint(iscube(-1))   # True\nprint(iscube(64))   # True\nprint(iscube(0))    # True\nprint(iscube(180))  # False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    \"\"\"Counts the number of prime hexadecimal digits in the given string.\"\"\"\n    \n    # Set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Count the number of prime digits in the input string\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    \n    return count\n\n# Example usage:\nprint(hex_key(\"AB\"))        # Output: 1\nprint(hex_key(\"1077E\"))     # Output: 2\nprint(hex_key(\"ABED1A33\"))  # Output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output: 6\nprint(hex_key(\"2020\"))      # Output: 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    \"\"\"Convert a decimal number to a binary string formatted with 'db' at the beginning and end.\n    \n    Args:\n    decimal (int): The decimal number to convert.\n    \n    Returns:\n    str: A string representing the binary format with 'db' characters.\n    \n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    # Convert decimal to binary and remove the '0b' prefix\n    binary_string = bin(decimal)[2:]\n    # Format the result with 'db' at both ends\n    formatted_string = f\"db{binary_string}db\"\n    return formatted_string\n\n# Example usage:\nprint(decimal_to_binary(15))  # Output: \"db1111db\"\nprint(decimal_to_binary(32))  # Output: \"db100000db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    \"\"\"Check if the given string s is happy.\n    \n    A string is considered happy if:\n    1. Its length is at least 3.\n    2. Every 3 consecutive letters are distinct.\n    \n    Args:\n    s (str): The input string to check.\n    \n    Returns:\n    bool: True if the string is happy, False otherwise.\n    \"\"\"\n    # Check if the length of the string is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Check consecutive triplets\n    for i in range(len(s) - 2):\n        # Get the three consecutive characters\n        triplet = s[i:i+3]\n        # Check if all three characters are distinct\n        if len(set(triplet)) < 3:\n            return False\n    \n    return True\n\n# Test cases\nprint(is_happy('a'))        # False\nprint(is_happy('aa'))       # False\nprint(is_happy('abcd'))     # True\nprint(is_happy('aabb'))     # False\nprint(is_happy('adb'))      # True\nprint(is_happy('xyy'))      # False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    \"\"\"Convert a list of GPAs to letter grades based on a custom grading scale.\"\"\"\n    \n    letter_grades = []\n    \n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    \n    return letter_grades\n\n# Example usage:\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    \"\"\"Helper function to check if a number n is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"Returns True if the string length is a prime number, False otherwise.\"\"\"\n    length = len(string)\n    return is_prime(length)\n\n# Examples\nprint(prime_length('Hello'))    # True (length 5)\nprint(prime_length('abcdcba'))  # True (length 7)\nprint(prime_length('kittens'))   # True (length 7)\nprint(prime_length('orange'))    # False (length 6)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    if n < 1:\n        return 0\n\n    # Count of n-digit integers starting with '1'\n    # The first digit is '1', and the remaining (n - 1) digits can be anything from 0-9\n    count_starting_with_1 = 10 ** (n - 1)\n    \n    # Count of n-digit integers ending with '1'\n    # The last digit is '1', and the first digit can be anything from 1-9 (to maintain n digits)\n    # The remaining (n - 2) digits can be anything from 0-9\n    count_ending_with_1 = 9 * (10 ** (n - 2)) if n > 1 else 1  # n=1 case is handled separately\n\n    # Count of n-digit integers both starting and ending with '1'\n    # The first digit is '1', the last digit is '1', and the remaining (n - 2) digits can be anything from 0-9\n    count_starting_and_ending_with_1 = 10 ** (n - 2) if n > 1 else 1  # n=1 case is handled separately\n\n    # Total count using the inclusion-exclusion principle\n    total_count = (count_starting_with_1 + count_ending_with_1 \n                   - count_starting_and_ending_with_1)\n    \n    return total_count\n\n# Example usage\nprint(starts_one_ends(1))  # Output: 1 (the number is '1')\nprint(starts_one_ends(2))  # Output: 18 (10 numbers starting with '1' and 9 ending with '1')\nprint(starts_one_ends(3))  # Output: 180 (100 numbers starting with '1' and 90 ending with '1' minus 10 that start and end with '1')"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    return binary_sum\n\n# Example usage:\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0\n    for index in range(1, len(lst), 2):  # Start from index 1 to access odd indices\n        if lst[index] % 2 == 0:  # Check if the element is even\n            total += lst[index]  # Add to total if it's even\n    return total\n\n# Example usage\nprint(add([4, 2, 6, 7]))  # Output: 2"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    \"\"\"\n    Takes a string and returns an ordered version of it where all words \n    (separated by space) have their characters arranged in ascending order \n    based on ASCII value. Maintains the order of words and blank spaces.\n    \"\"\"\n    # Split the string into words based on spaces\n    words = s.split(' ')\n    \n    # Sort characters in each word and keep the spaces\n    ordered_words = [''.join(sorted(word)) for word in words]\n    \n    # Join the ordered words back into a single string with spaces\n    result = ' '.join(ordered_words)\n    \n    return result\n\n# Test cases\nprint(anti_shuffle('Hi'))                # returns 'Hi'\nprint(anti_shuffle('hello'))             # returns 'ehllo'\nprint(anti_shuffle('Hello World!!!'))     # returns 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = []\n\n    # Iterate through the list of lists\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                coordinates.append((row_index, col_index))\n    \n    # Sort coordinates by row (ascending) and by column (descending)\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n\n    return coordinates\n\n# Example usage\nprint(get_row([\n    [1, 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n], 1))  # Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # Output: [(2, 2)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    if not array:  # Handle the empty array case\n        return []\n    \n    first_index = array[0]\n    last_index = array[-1]\n    \n    # Determine the sorting order based on the sum of the first and last elements\n    if (first_index + last_index) % 2 == 0:\n        # Even sum -> sort in descending order\n        return sorted(array, reverse=True)\n    else:\n        # Odd sum -> sort in ascending order\n        return sorted(array)\n\n# Example usage\nprint(sort_array([]))  # []\nprint(sort_array([5]))  # [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted_string = ''\n    \n    for char in s:\n        if 'a' <= char <= 'z':  # Check if the character is a lowercase letter\n            # Shift the character by 4 positions, wrapping around using modulo\n            shifted_char = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            encrypted_string += shifted_char\n        else:\n            # If the character is not a lowercase letter, we just append it unchanged\n            encrypted_string += char\n\n    return encrypted_string\n\n# Test cases\nprint(encrypt('hi'))           # Expected output: 'lm'\nprint(encrypt('asdfghjkl'))    # Expected output: 'ewhjklnop'\nprint(encrypt('gf'))           # Expected output: 'kj'\nprint(encrypt('et'))           # Expected output: 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    \"\"\"\n    Returns the second smallest element in the given list of integers.\n    \n    Parameters:\n    lst (list): A list of integers\n    \n    Returns:\n    int or None: The second smallest integer, or None if it doesn't exist.\n    \"\"\"\n    # Use a set to remove duplicates and then convert back to a sorted list\n    unique_sorted_lst = sorted(set(lst))\n    \n    # Check if there are at least 2 unique elements\n    if len(unique_sorted_lst) < 2:\n        return None\n    \n    # Return the second smallest element\n    return unique_sorted_lst[1]\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Output: 2\nprint(next_smallest([]))                 # Output: None\nprint(next_smallest([1, 1]))             # Output: None"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    # Define sentence delimiters\n    delimiters = ['.', '?', '!']\n    \n    # Split the string into sentences based on delimiters\n    sentences = []\n    temp_sentence = []\n    for char in S:\n        temp_sentence.append(char)\n        if char in delimiters:\n            sentences.append(''.join(temp_sentence).strip())\n            temp_sentence = []\n    \n    # Append the last sentence if there's no ending punctuation\n    if temp_sentence:\n        sentences.append(''.join(temp_sentence).strip())\n    \n    # Count sentences that start with \"I\"\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith(\"I\"))\n    \n    return boredom_count\n\n# Example usage:\nprint(is_bored(\"Hello world\"))  # Output: 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    any_int(3, 2, 2) \u279e False\n    any_int(3, -2, 1) \u279e True\n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    # Check if all inputs are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one number equals the sum of the other two\n        return x == y + z or y == x + z or z == x + y\n    return False\n\n# Example usages\nprint(any_int(5, 2, 7))    # True\nprint(any_int(3, 2, 2))    # False\nprint(any_int(3, -2, 1))   # True\nprint(any_int(3.6, -2.2, 2))  # False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    def swap_case_and_replace_vowels(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            # Calculate the new character that is 2 places ahead\n            if char.islower():\n                return chr((ord(char) - ord('a') + 2) % 26 + ord('a')).upper()\n            else:\n                return chr((ord(char) - ord('A') + 2) % 26 + ord('A')).lower()\n        elif char.isalpha():\n            # Swap case for consonants\n            return char.swapcase()\n        else:\n            return char\n\n    encoded_message = ''.join(swap_case_and_replace_vowels(c) for c in message)\n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # Output: 'TGST'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Return the sum of the digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    \"\"\"Find the largest prime value in the list and return the sum of its digits.\"\"\"\n    largest_prime = None\n\n    for number in lst:\n        if is_prime(number):\n            if largest_prime is None or number > largest_prime:\n                largest_prime = number\n\n    if largest_prime is not None:\n        return sum_of_digits(largest_prime)\n    else:\n        return 0  # If no prime number is found, we can return 0 or some other value as per requirements.\n\n# Test cases\nprint(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))  # Output: 10\nprint(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))  # Output: 25\nprint(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))  # Output: 13\nprint(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))  # Output: 11\nprint(skjkasdkd([0, 81, 12, 3, 1, 21]))  # Output: 3\nprint(skjkasdkd([0, 8, 1, 2, 1, 7]))  # Output: 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(input_dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False if the given dictionary is empty.\n    \n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not input_dict:  # Check if the dictionary is empty\n        return False\n\n    keys = input_dict.keys()\n    \n    # Check if all keys are strings\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    # Check for all lower case or all upper case\n    all_lower = all(key.islower() for key in keys)\n    all_upper = all(key.isupper() for key in keys)\n\n    return all_lower or all_upper\n\n# Test cases\nprint(check_dict_case({\"a\": \"apple\", \"b\": \"banana\"}))  # True\nprint(check_dict_case({\"a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"}))  # False\nprint(check_dict_case({\"a\": \"apple\", 8: \"banana\", \"a\": \"apple\"}))  # False\nprint(check_dict_case({\"Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}))  # False\nprint(check_dict_case({\"STATE\": \"NC\", \"ZIP\": \"12345\"}))  # True"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Return a list of all prime numbers less than n.\"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n# Example usage:\nprint(count_up_to(5))   # [2, 3]\nprint(count_up_to(11))  # [2, 3, 5, 7]\nprint(count_up_to(0))   # []\nprint(count_up_to(20))  # [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))   # []\nprint(count_up_to(18))  # [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    # Get the unit digits\n    unit_digit_a = abs(a) % 10  # Use abs to handle negative numbers\n    unit_digit_b = abs(b) % 10  # Use abs to handle negative numbers\n    \n    # Calculate the product of the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    return product\n\n# Test cases\nprint(multiply(148, 412))  # Output: 16\nprint(multiply(19, 28))    # Output: 72\nprint(multiply(2020, 1851))  # Output: 0\nprint(multiply(14, -15))   # Output: 20"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    # Define the set of uppercase vowels\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    \n    # Initialize a counter for uppercase vowels at even indices\n    count = 0\n    \n    # Iterate through the string with index\n    for index in range(len(s)):\n        if index % 2 == 0:  # Check if the index is even\n            if s[index] in uppercase_vowels:  # Check if the character is an uppercase vowel\n                count += 1\n                \n    return count\n\n# Example usage\nprint(count_upper('aBCdEf'))  # Output: 1\nprint(count_upper('abcdefg'))  # Output: 0\nprint(count_upper('dBBE'))     # Output: 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert string input to float\n    num = float(value)\n    \n    # Get the floor and ceil values to check for rounding\n    lower_int = int(num // 1)  # Floor\n    upper_int = lower_int + 1   # Ceil\n    \n    # Calculate the distances to the two nearest integers\n    distance_to_lower = abs(num - lower_int)\n    distance_to_upper = abs(num - upper_int)\n    \n    # Determine which integer to return based on distances\n    if distance_to_lower < distance_to_upper:\n        return lower_int\n    elif distance_to_upper < distance_to_lower:\n        return upper_int\n    else:\n        # If equidistant, round away from zero\n        if num > 0:\n            return upper_int\n        else:\n            return lower_int\n\n# Examples of usage\nprint(closest_integer(\"10\"))     # Output: 10\nprint(closest_integer(\"15.3\"))   # Output: 15\nprint(closest_integer(\"14.5\"))   # Output: 15\nprint(closest_integer(\"-14.5\"))  # Output: -15"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    >>> make_a_pile(4)\n    [4, 6, 8, 10]\n    \"\"\"\n    stones = []\n    \n    # Determine if n is odd or even\n    if n % 2 == 0:\n        # If n is even, we will use even numbers\n        for i in range(n):\n            stones.append(n + 2 * i)\n    else:\n        # If n is odd, we will use odd numbers\n        for i in range(n):\n            stones.append(n + 2 * i)\n    \n    return stones\n\n# Example usage\nprint(make_a_pile(3))  # Output: [3, 5, 7]\nprint(make_a_pile(4))  # Output: [4, 6, 8, 10]"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    \"\"\"\n    Splits the input string into words separated by commas or spaces\n    and returns a list of the words.\n    \n    Args:\n    s (str): The input string containing words separated by commas or spaces.\n    \n    Returns:\n    list: A list of words.\n    \n    Examples:\n    >>> words_string(\"Hi, my name is John\")\n    ['Hi', 'my', 'name', 'is', 'John']\n    \n    >>> words_string(\"One, two, three, four, five, six\")\n    ['One', 'two', 'three', 'four', 'five', 'six']\n    \"\"\"\n    # Use regex to split by commas or spaces\n    words = re.split(r'[,\\s]+', s.strip())\n    return words\n\n# Example usage\nprint(words_string(\"Hi, my name is John\"))  # Output: ['Hi', 'my', 'name', 'is', 'John']\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: ['One', 'two', 'three', 'four', 'five', 'six']"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    if y < x:\n        return -1  # Return -1 if the range is invalid\n\n    # Adjust y to the nearest even number less than or equal to y\n    if y % 2 != 0:\n        y -= 1\n\n    # Check if y is still within the bounds of x\n    if y >= x:\n        return y\n    else:\n        return -1\n\n# Example usage\nprint(choose_num(12, 15))  # Output: 14\nprint(choose_num(13, 12))  # Output: -1"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    \"\"\"Compute the average of integers from n to m, round it, and convert to binary.\n    \n    Args:\n        n (int): The starting integer (inclusive).\n        m (int): The ending integer (inclusive).\n        \n    Returns:\n        str: The binary representation of the rounded average or -1 if n > m.\n    \"\"\"\n    if n > m:\n        return -1\n    \n    # Calculate the sum of integers from n to m\n    total_sum = sum(range(n, m + 1))\n    \n    # Calculate the number of integers from n to m\n    count = m - n + 1\n    \n    # Calculate the average\n    average = total_sum / count\n    \n    # Round to the nearest integer\n    rounded_average = round(average)\n    \n    # Convert to binary\n    binary_representation = bin(rounded_average)\n    \n    return binary_representation\n\n# Example usage:\nprint(rounded_avg(1, 5))  # Output: \"0b11\"\nprint(rounded_avg(7, 5))  # Output: -1\nprint(rounded_avg(10, 20)) # Output: \"0b1111\"\nprint(rounded_avg(20, 33)) # Output: \"0b11010\""}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that haven't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    def has_only_odd_digits(num):\n        # Check if all digits in the number are odd\n        for digit in str(num):\n            if digit in '02468':  # Even digits\n                return False\n        return True\n\n    # Filter numbers that have only odd digits\n    result = [num for num in x if has_only_odd_digits(num)]\n    \n    # Return sorted result\n    return sorted(result)\n\n# Example usage:\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    \n    # Dictionary to map numbers to their names\n    number_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter the array to keep only numbers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    filtered_arr.sort()\n    \n    # Reverse the sorted array\n    filtered_arr.reverse()\n    \n    # Map the filtered array to their corresponding names\n    result = [number_to_name[num] for num in filtered_arr]\n    \n    return result"}
{"task_id": "HumanEval/106", "completion": "def factorial(num):\n    \"\"\"Calculate the factorial of a number.\"\"\"\n    if num == 0 or num == 1:\n        return 1\n    result = 1\n    for i in range(2, num + 1):\n        result *= i\n    return result\n\ndef sum_of_first_n(n):\n    \"\"\"Calculate the sum of the first n natural numbers.\"\"\"\n    return n * (n + 1) // 2\n\ndef f(n):\n    \"\"\"Return a list of size n according to the specified rules.\"\"\"\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:  # If i is even\n            result.append(factorial(i))\n        else:  # If i is odd\n            result.append(sum_of_first_n(i))\n    return result\n\n# Example usage:\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n    # Convert the number to a string and check if it reads the same forwards and backwards\n    return str(num) == str(num)[::-1]\n\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)\n\n# Example usages\nprint(even_odd_palindrome(3))  # Output: (1, 2)\nprint(even_odd_palindrome(12)) # Output: (4, 6)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        # Convert number to string and handle negative numbers\n        num_str = str(num)\n        if num < 0:\n            # For negative numbers, treat the first digit as negative\n            return -int(num_str[1]) + sum(int(digit) for digit in num_str[2:])\n        else:\n            return sum(int(digit) for digit in num_str)\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n            \n    return count\n\n# Testing the function\nprint(count_nums([]))  # Expected output: 0\nprint(count_nums([-1, 11, -11]))  # Expected output: 1\nprint(count_nums([1, 1, 2]))  # Expected output: 3"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    \"\"\"Determine if an array can be sorted in non-decreasing order by right shifting.\"\"\"\n    if not arr:  # If the array is empty, return True\n        return True\n    \n    drop_count = 0\n    N = len(arr)\n\n    for i in range(N):\n        # Compare current element with the next element,\n        # using modulo to wrap around to the beginning of the array\n        if arr[i] > arr[(i + 1) % N]:\n            drop_count += 1\n            \n        # No more than one drop allowed\n        if drop_count > 1:\n            return False\n    \n    return True\n\n# Example usage:\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    \"\"\"Determines if it's possible to exchange elements between lst1 and lst2\n    to make all elements of lst1 even.\"\"\"\n    \n    # Check if there are odd numbers in lst1\n    odd_in_lst1 = any(x % 2 != 0 for x in lst1)\n    \n    # If there are no odd numbers in lst1, return \"YES\"\n    if not odd_in_lst1:\n        return \"YES\"\n    \n    # Check if there are even numbers in lst2\n    even_in_lst2 = any(x % 2 == 0 for x in lst2)\n    \n    # If there are odd numbers in lst1 and at least one even number in lst2,\n    # we can exchange and make lst1 all even\n    if even_in_lst2:\n        return \"YES\"\n    \n    return \"NO\"\n\n# Example usage:\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n    # Step 1: Split the input string into letters\n    letters = test.split()\n    \n    # Step 2: Count occurrences\n    counts = {}\n    for letter in letters:\n        counts[letter] = counts.get(letter, 0) + 1\n    \n    # Step 3: Determine the maximum count\n    if not counts:  # Handle empty input\n        return {}\n    \n    max_count = max(counts.values())\n    \n    # Step 4: Create a result dictionary for letters with max count\n    result = {letter: count for letter, count in counts.items() if count == max_count}\n    \n    return result\n\n# Test cases\nprint(histogram('a b c'))       # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))     # {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))   # {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))   # {'b': 4}\nprint(histogram(''))             # {}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Remove characters in `c` from `s`\n    result = ''.join(char for char in s if char not in c)\n    \n    # Check if the result is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)\n\n# Example usage\nprint(reverse_delete(\"abcde\", \"ae\"))        # Output: ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))        # Output: ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))    # Output: ('cdedc', True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3', \"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for string in lst:\n        odd_count = sum(1 for char in string if char in '13579')\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result\n\n# Test cases\nprint(odd_count(['1234567']))\nprint(odd_count(['3', \"11111111\"]))"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    \n    Args:\n    nums (List[int]): List of integers.\n\n    Returns:\n    int: Minimum sum of any non-empty sub-array.\n    \"\"\"\n    # Initialize min_sum to a very large value, and current_sum to 0\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num  # Add the current number to the current_sum\n        \n        # Update min_sum if current_sum is less than min_sum\n        if current_sum < min_sum:\n            min_sum = current_sum\n        \n        # If current_sum becomes positive, reset it to 0\n        if current_sum > 0:\n            current_sum = 0\n    \n    return min_sum\n\n# Test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))         # Output: -6"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # Count total units of water in the grid\n    total_water = sum(sum(row) for row in grid)\n    \n    # Calculate the number of times we need to lower the buckets\n    if total_water == 0:\n        return 0\n    \n    # Calculate the number of bucket lowers needed\n    # We use ceiling division to ensure we count any remaining water\n    lowers_needed = math.ceil(total_water / capacity)\n    \n    return lowers_needed\n\n# Example Usage\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to the number of ones in their\n    binary representation in ascending order and by decimal value for ties.\n    \"\"\"\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n\n# Test cases\nprint(sort_array([1, 5, 2, 3, 4]))  # Output: [1, 2, 3, 4, 5]\nprint(sort_array([-2, -3, -4, -5, -6]))  # Output: [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4]))  # Output: [0, 1, 2, 3, 4]"}
{"task_id": "HumanEval/117", "completion": "def count_consonants(word):\n    \"\"\"Helper function to count consonants in a given word.\"\"\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return sum(1 for char in word if char in consonants)\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, return a list of all words \n    from string s that contain exactly n consonants, in order they appear \n    in the string s.\"\"\"\n    \n    if not s:  # Check if the string is empty\n        return []\n    \n    words = s.split()  # Split the string into words\n    result = [word for word in words if count_consonants(word) == n]  # Filter words by consonant count\n    \n    return result\n\n# Example usages\nprint(select_words(\"Mary had a little lamb\", 4))  # ==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # ==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # ==> []\nprint(select_words(\"Hello world\", 4))              # ==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3))                # ==> [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    \"\"\"Find the closest vowel that stands between two consonants from the right side of the word.\"\"\"\n    \n    vowels = 'aeiouAEIOU'  # Define vowels\n    consonants = []  # To keep track of encountered consonants\n    \n    # Iterate through the word from the end to the beginning\n    for char in reversed(word):\n        if char in vowels:\n            # If we have found at least two consonants before this vowel\n            if len(consonants) >= 2:\n                return char  # Return the vowel found\n        elif char.isalpha():  # Check if the character is a letter\n            consonants.append(char)  # Add the consonant to the list\n\n    return \"\"  # Return empty string if no valid vowel found\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\"))  # Output: \"u\"\nprint(get_closest_vowel(\"FULL\"))    # Output: \"U\"\nprint(get_closest_vowel(\"quick\"))   # Output: \"\"\nprint(get_closest_vowel(\"ab\"))      # Output: \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    # Split the input list into two strings\n    s1, s2 = lst[0], lst[1]\n\n    # Count the number of open and close parentheses for both strings\n    open1, close1 = s1.count('('), s1.count(')')\n    open2, close2 = s2.count('('), s2.count(')')\n\n    # Check the first concatenation order: s1 + s2\n    if open1 + open2 >= close1 + close2 and open1 >= close2:\n        return 'Yes'\n    \n    # Check the second concatenation order: s2 + s1\n    if open2 + open1 >= close2 + close1 and open2 >= close1:\n        return 'Yes'\n    \n    return 'No'\n\n# Example usages\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))     # Output: 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n    \"\"\"\n    # Step 1: Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Step 2: Select the first k elements\n    max_k_elements = sorted_arr[:k]\n    \n    # Step 3: Sort the selected elements in ascending order\n    result = sorted(max_k_elements)\n    \n    return result\n\n# Example usage:\nprint(maximum([-3, -4, 5], 3))  # Output: [-4, -3, 5]\nprint(maximum([4, -4, 4], 2))    # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples:\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==> 0\n    \"\"\"\n    total_sum = 0\n    \n    for index, value in enumerate(lst):\n        # Check if the index is even and the value is odd\n        if index % 2 == 0 and value % 2 != 0:\n            total_sum += value\n            \n    return total_sum\n\n# Example usage:\nprint(solution([5, 8, 7, 1]))  # Output: 12\nprint(solution([3, 3, 3, 3, 3]))  # Output: 9\nprint(solution([30, 13, 24, 321]))  # Output: 0"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total_sum = 0\n\n    for i in range(k):\n        if -99 <= arr[i] <= 99:  # Check if the number has at most two digits\n            total_sum += arr[i]\n\n    return total_sum\n\n# Example usage\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nresult = add_elements(arr, k)\nprint(result)  # Output: 24"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    \n    collatz_sequence = []\n    \n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n //= 2  # n is even, divide by 2\n        else:\n            n = 3 * n + 1  # n is odd, calculate 3n + 1\n    \n    collatz_sequence.append(1)  # Add the last term, which is always 1\n    \n    # Filter out odd numbers and sort them\n    odd_numbers = sorted(num for num in collatz_sequence if num % 2 != 0)\n    \n    return odd_numbers\n\n# Example usage\nprint(get_odd_collatz(5))  # Output: [1, 5]"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    \"\"\"Validates a given date string based on specified rules.\"\"\"\n    # Rule 1: The date string should not be empty\n    if not date:\n        return False\n\n    # Rule 4: The date should be in the format: mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into components\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False  # If conversion fails, the format is incorrect\n    \n    # Rule 3: Months should not be less than 1 or higher than 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Rule 2: Validate days based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        # Months with 31 days\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        # Months with 30 days\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        # February, let's consider it has 29 days for our validation\n        if day < 1 or day > 29:\n            return False\n\n    # If all checks are passed, the date is valid\n    return True\n\n# Test cases\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))   # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace,\n    if no whitespaces exists in the text you should split on commas ','\n    if no commas exists you should return the number of lower-case letters\n    with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ..., ord('z') = 25\n    '''\n    # First, check for whitespaces and split if they exist\n    if ' ' in txt:\n        return txt.split()\n    # If no whitespaces, check for commas\n    elif ',' in txt:\n        return txt.split(',')\n    # If no whitespaces or commas, count lowercase letters with odd order\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))         # \u279e 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n    '''\n    \n    # Create a set to track unique numbers\n    seen = set()\n    \n    # Iterate through the list\n    for i in range(len(lst)):\n        # Check for duplicates\n        if lst[i] in seen:\n            return False\n        seen.add(lst[i])\n        \n        # Check if the current number is less than the previous number\n        if i > 0 and lst[i] < lst[i - 1]:\n            return False\n            \n    return True\n\n# Test cases\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # \u279e False"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"Check if a number n is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine if the length of intersection of two intervals is a prime number.\"\"\"\n    # Determine the start and end of the intersection\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    # Check if the intervals intersect\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start\n    \n    # Check if the length is a prime number\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Example test cases\nprint(intersection((1, 2), (2, 3)))  # Output: \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # Output: \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # Output: \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:  # Check for empty array\n        return None\n    \n    total_magnitude = 0\n    sign_product = 1  # Start with neutral element for multiplication\n    \n    for num in arr:\n        if num == 0:\n            sign_product = 0  # If there's a zero, product of signs becomes zero\n            break\n        elif num > 0:\n            sign_product *= 1  # Positive number contributes +1 to the sign product\n        else:\n            sign_product *= -1  # Negative number contributes -1 to the sign product\n        \n        total_magnitude += abs(num)  # Add absolute value of the number to total magnitude\n\n    return total_magnitude * sign_product  # Return the final result\n\n# Example usage\nprint(prod_signs([1, 2, 2, -4]))  # Output: -9\nprint(prod_signs([0, 1]))          # Output: 0\nprint(prod_signs([]))               # Output: None"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    from collections import deque\n    \n    # Get dimensions of the grid\n    N = len(grid)\n    \n    # Directions for moving in the grid (right, down, left, up)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    # Function to check if a position is within grid bounds\n    def in_bounds(x, y):\n        return 0 <= x < N and 0 <= y < N\n    \n    # To store the minimum path found\n    min_path = None\n    \n    # DFS to find all paths of length k\n    def dfs(x, y, path):\n        nonlocal min_path\n        \n        # If we have reached the desired length of the path\n        if len(path) == k:\n            if min_path is None or path < min_path:\n                min_path = path.copy()\n            return\n        \n        # Explore all 4 possible directions\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if in_bounds(nx, ny):\n                # Append the next cell value to the path\n                path.append(grid[nx][ny])\n                dfs(nx, ny, path)\n                # Backtrack: remove the last added cell value\n                path.pop()\n    \n    # Start DFS from every cell in the grid\n    for i in range(N):\n        for j in range(N):\n            # Start path from the current cell\n            dfs(i, j, [grid[i][j]])\n    \n    return min_path\n\n# Example usage:\ngrid1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk1 = 3\nprint(minPath(grid1, k1))  # Output: [1, 2, 1]\n\ngrid2 = [[5, 9, 3], [4, 1, 6], [7, 8, 2]]\nk2 = 1\nprint(minPath(grid2, k2))  # Output: [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    \"\"\"Generates the first n + 1 numbers of the Tribonacci sequence.\"\"\"\n    if n < 0:\n        return []\n\n    # Initialize the list to store the Tribonacci sequence\n    tribonacci_sequence = []\n\n    # Calculate the sequence based on the provided rules\n    for i in range(n + 1):\n        if i == 1:\n            tribonacci_sequence.append(3)  # tri(1)\n        elif i == 0:\n            tribonacci_sequence.append(1)  # tri(0)\n        elif i % 2 == 0:  # For even `i`\n            tribonacci_sequence.append(1 + i / 2)  # tri(n) = 1 + n / 2\n        else:  # For odd `i`\n            # tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1)\n            if i + 1 <= n:\n                next_value = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i + 1]\n            else:\n                next_value = tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + 3  # tri(1)\n            tribonacci_sequence.append(next_value)\n\n    return tribonacci_sequence\n\n# Example usage\nprint(tri(3))  # Output: [1, 3, 2, 8]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n    \n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:  # Check if the digit is odd\n            product *= digit\n            has_odd = True\n    \n    return product if has_odd else 0\n\n# Example usage:\nprint(digits(1))    # Output: 1\nprint(digits(4))    # Output: 0\nprint(digits(235))  # Output: 15"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    # Use a stack approach to check for nested brackets\n    balance = 0\n    has_nested = False\n    \n    for char in string:\n        if char == '[':\n            balance += 1\n            # If we have previously encountered an opening bracket,\n            # and we encounter another one before closing any, it's nested\n            if balance > 1:\n                has_nested = True\n        elif char == ']':\n            balance -= 1\n            # If balance goes negative, it means there are unmatched closing brackets\n            if balance < 0:\n                return False\n    \n    # We need balance to be zero to ensure all brackets are closed\n    return has_nested and balance == 0\n\n# Test cases\nprint(is_nested('[[]]'))           # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))           # \u279e False\nprint(is_nested('[]'))             # \u279e False\nprint(is_nested('[[][]]'))         # \u279e True\nprint(is_nested('[[]][['))         # \u279e True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    \"\"\"Return the sum of squared numbers in the given list\n    after rounding each element to the upper int (Ceiling).\"\"\"\n    return sum(math.ceil(x) ** 2 for x in lst)\n\n# Test cases\nprint(sum_squares([1, 2, 3]))          # Output: 14\nprint(sum_squares([1, 4, 9]))          # Output: 98\nprint(sum_squares([1, 3, 5, 7]))       # Output: 84\nprint(sum_squares([1.4, 4.2, 0]))      # Output: 29\nprint(sum_squares([-2.4, 1, 1]))       # Output: 6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n    \n    # Strip any trailing spaces to accurately find the last character\n    txt = txt.rstrip()\n    \n    # If the string is empty after stripping, return False\n    if not txt:\n        return False\n    \n    # Get the last character\n    last_char = txt[-1]\n    \n    # Check if the last character is alphabetical\n    if last_char.isalpha():\n        # Split the string into words\n        words = txt.split()\n        # Check if the last character is part of the last word\n        if words and last_char == words[-1][-1]:\n            return False\n        return True\n    \n    return False\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))      # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))     # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))    # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))                # \u279e False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:  # Check if the current element is less than the previous one\n            return i  # Return index if condition is met\n    return -1  # Return -1 if no such index is found"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n\n# Test cases\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # (None, 1)\nprint(largest_smallest_integers([]))                   # (None, None)\nprint(largest_smallest_integers([0]))                  # (None, None)\nprint(largest_smallest_integers([-5, -2, 1, 3, -1]))  # (-1, 1)\nprint(largest_smallest_integers([-10, -5, -1, 0, 2])) # (-1, 2)"}
{"task_id": "HumanEval/137", "completion": "def parse_number(value):\n    \"\"\"\n    Convert the input value into a float for comparison.\n    This function will handle both '.' and ',' as decimal points.\n    \"\"\"\n    if isinstance(value, str):\n        # Replace ',' with '.' for float conversion\n        value = value.replace(',', '.')\n    return float(value)\n\ndef compare_one(a, b):\n    \"\"\"\n    Compare two numbers a and b, which could be integers, floats, or strings\n    representing real numbers. Return the larger number in its original type,\n    or None if they are equal.\n    \"\"\"\n    \n    # Parse both a and b to floats for comparison\n    try:\n        a_parsed = parse_number(a)\n        b_parsed = parse_number(b)\n    except ValueError:\n        # If conversion fails, return None\n        return None\n    \n    if a_parsed == b_parsed:\n        return None\n    elif a_parsed > b_parsed:\n        return a\n    else:\n        return b\n\n# Test cases\nprint(compare_one(1, 2.5))        # \u279e 2.5\nprint(compare_one(1, \"2,3\"))      # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))    # \u279e \"6\"\nprint(compare_one(\"1\", 1))         # \u279e None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    \n    Example:\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Check if n is less than 8 or odd\n    if n < 8 or n % 2 != 0:\n        return False\n    \n    # If n is even and at least 8, it can be expressed as the sum of 4 positive even numbers\n    return True\n\n# Test cases\nprint(is_equal_to_sum_even(4))  # Expected: False\nprint(is_equal_to_sum_even(6))  # Expected: False\nprint(is_equal_to_sum_even(8))  # Expected: True\nprint(is_equal_to_sum_even(10)) # Expected: True\nprint(is_equal_to_sum_even(12)) # Expected: True\nprint(is_equal_to_sum_even(14)) # Expected: True\nprint(is_equal_to_sum_even(15)) # Expected: False"}
{"task_id": "HumanEval/139", "completion": "def factorial(num):\n    \"\"\"Helper function to calculate the factorial of a number.\"\"\"\n    if num == 0 or num == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, num + 1):\n            result *= i\n        return result\n\ndef special_factorial(n):\n    \"\"\"Calculates the Brazilian factorial of n.\"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n\n    return result\n\n# Example usage\nprint(special_factorial(4))  # Output: 288"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all sequences of 3 or more spaces with a single dash\n    text = re.sub(r' {3,}', '-', text)\n    # Replace single or double spaces with underscores\n    text = text.replace(' ', '_')\n    return text\n\n# Example test cases\nprint(fix_spaces(\"Example\"))           # Output: \"Example\"\nprint(fix_spaces(\"Example 1\"))         # Output: \"Example_1\"\nprint(fix_spaces(\" Example 2\"))        # Output: \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))      # Output: \"_Example-3\""}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    \"\"\"Check if the given file name is valid based on specified conditions.\"\"\"\n    \n    # Split the file name by the dot to separate the name and the extension\n    parts = file_name.split('.')\n    \n    # Condition 1: There should be exactly one dot\n    if len(parts) != 2:\n        return 'No'\n    \n    # Extract the name and the extension\n    name, extension = parts\n    \n    # Condition 2: The substring before the dot should not be empty\n    if not name:\n        return 'No'\n    \n    # Condition 3: The name should start with a letter\n    if not name[0].isalpha():\n        return 'No'\n    \n    # Count the digits in the name\n    digit_count = sum(c.isdigit() for c in name)\n    \n    # Condition 4: There should not be more than three digits in the name\n    if digit_count > 3:\n        return 'No'\n    \n    # Condition 5: The extension should be one of ['txt', 'exe', 'dll']\n    valid_extensions = {'txt', 'exe', 'dll'}\n    if extension not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'\n\n# Examples\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\"))  # => 'No'\nprint(file_name_check(\"example123.txt\"))  # => 'Yes'\nprint(file_name_check(\"example1234.txt\"))  # => 'No'\nprint(file_name_check(\"example.exe\"))  # => 'Yes'\nprint(file_name_check(\".hiddenfile.txt\"))  # => 'No'\nprint(file_name_check(\"example.txt.doc\"))  # => 'No'\nprint(file_name_check(\"example.doc\"))  # => 'No'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    \"\"\"\"\n    This function takes a list of integers. It squares the integer at an index that is a multiple of 3,\n    and cubes the integer at an index that is a multiple of 4 but not a multiple of 3.\n    It returns the sum of all modified entries in the list.\n    \"\"\"\n    total_sum = 0\n    for index, value in enumerate(lst):\n        if index % 3 == 0:  # Index is a multiple of 3\n            total_sum += value ** 2\n        elif index % 4 == 0:  # Index is a multiple of 4 but not a multiple of 3\n            total_sum += value ** 3\n        else:  # Index is not a multiple of 3 or 4\n            total_sum += value\n    return total_sum\n\n# Test cases\nprint(sum_squares([1, 2, 3]))        # Output: 6\nprint(sum_squares([]))               # Output: 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Output: -126"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    \"\"\"\n    Return a string containing words from the original sentence\n    whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n# Example usage:\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\""}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # Split the fractions into numerator and denominator\n    num_x, denom_x = map(int, x.split('/'))\n    num_n, denom_n = map(int, n.split('/'))\n\n    # Calculate the numerator and denominator of the product\n    numerator_product = num_x * num_n\n    denominator_product = denom_x * denom_n\n\n    # Check if the product is a whole number\n    return numerator_product % denominator_product == 0\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # Should return True\nprint(simplify(\"1/6\", \"2/1\"))  # Should return False\nprint(simplify(\"7/10\", \"10/2\"))  # Should return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(n):\n        # Calculate the sum of digits, ignoring the sign\n        return sum(int(d) for d in str(abs(n)))\n    \n    # Sort by digit sum, and then by original index\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n\n# Example usage:\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))                       # Output: []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    \"\"\"Returns the count of numbers greater than 10 with both first and last digits odd.\"\"\"\n    \n    def is_odd_digit(digit):\n        return digit in '13579'\n    \n    count = 0\n    \n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))  # Convert the number to string and take the absolute value\n            first_digit = str_num[0]\n            last_digit = str_num[-1]\n            \n            if is_odd_digit(first_digit) and is_odd_digit(last_digit):\n                count += 1\n                \n    return count\n\n# Example usage\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    # Step 1: Generate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    count = 0\n    # Step 2: Find all triples (i, j, k) where i < j < k\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Step 3: Calculate the sum of the triplet\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n                    \n    return count\n\n# Example usage:\nn = 5\nprint(get_max_triples(n))  # Output: 1"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\",\n        \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    ]\n    \n    # Check if both planets are valid\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Get the indices of the planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Ensure index1 is less than index2\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Slice the list to get planets in between\n    intermediate_planets = planets[index1 + 1:index2]\n    \n    return tuple(intermediate_planets)\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # Output: (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # Output: (\"Venus\",)\nprint(bf(\"Mercury\", \"Uranus\"))   # Output: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    \"\"\"Filter out strings with odd lengths and return a sorted list in ascending order by length and alphabetically.\"\"\"\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n\n# Example usage:\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"Return x if n is a prime number, otherwise return y.\"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y\n\n# Examples\nprint(x_or_y(7, 34, 12))  # Output: 34\nprint(x_or_y(15, 8, 5))   # Output: 5"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n    \n    If the input list is empty, return 0.\n    '''\n    # Initialize the sum of squares\n    sum_of_squares = 0\n    \n    # Iterate through each number in the list\n    for number in lst:\n        # Check if the number is a positive odd integer\n        if isinstance(number, int) and number >= 0 and number % 2 != 0:\n            sum_of_squares += number ** 2\n            \n    return sum_of_squares\n\n# Test cases\nprint(double_the_difference([1, 3, 2, 0]))  # Output: 10\nprint(double_the_difference([-1, -2, 0]))    # Output: 0\nprint(double_the_difference([9, -2]))         # Output: 81\nprint(double_the_difference([0]))              # Output: 0\nprint(double_the_difference([]))               # Output: 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    \"\"\"Compares the actual game scores with the guessed scores.\n    \n    Args:\n    game (list): A list of actual scores.\n    guess (list): A list of guessed scores.\n    \n    Returns:\n    list: A list of absolute differences between each game score and corresponding guess.\n    \"\"\"\n    return [abs(g - a) for a, g in zip(game, guess)]\n\n# Example usage:\nprint(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]))  # Output: [0, 0, 0, 0, 3, 3]\nprint(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]))  # Output: [4, 4, 1, 0, 0, 6]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        return CAP - SM\n\n    strongest_extension = None\n    strongest_strength = float('-inf')  # Start with the lowest possible strength\n\n    for extension in extensions:\n        strength = calculate_strength(extension)\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n\n# Example usage\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))  # Output: 'Slices.SErviNGSliCes'\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: 'my_class.AA'"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    \"\"\"Check if the second word or any of its rotations is a substring of the first word.\"\"\"\n    # Create the rotated version by concatenating the word with itself\n    doubled_b = b + b\n    # Check if the first word is a substring of the doubled second word\n    return a in doubled_b\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))       # => False\nprint(cycpattern_check(\"hello\", \"ell\"))      # => True\nprint(cycpattern_check(\"whassup\", \"psus\"))   # => False\nprint(cycpattern_check(\"abab\", \"baa\"))       # => True\nprint(cycpattern_check(\"efef\", \"eeff\"))      # => False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # => True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to its absolute value and convert it to a string\n    num_str = str(abs(num))\n    \n    even_count = 0\n    odd_count = 0\n    \n    # Iterate through each digit in the number string\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))   # Output: (1, 2)\nprint(even_odd_count(2468))  # Output: (4, 0)\nprint(even_odd_count(13579)) # Output: (0, 5)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    \n    # Define the mapping of values to Roman numerals\n    val_to_roman = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'),\n        (1, 'i')\n    ]\n    \n    # Initialize the result string\n    roman_numeral = ''\n    \n    # Convert the integer to Roman numeral\n    for value, roman in val_to_roman:\n        while number >= value:\n            roman_numeral += roman\n            number -= value\n            \n    return roman_numeral\n\n# Test cases\nif __name__ == \"__main__\":\n    print(int_to_mini_roman(19))    # 'xix'\n    print(int_to_mini_roman(152))   # 'clii'\n    print(int_to_mini_roman(426))   # 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degrees.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Sort the sides to easily identify the longest side\n    sides = sorted([a, b, c])\n    \n    # Check the Pythagorean theorem\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Example usage:\nprint(right_angle_triangle(3, 4, 5))  # Output: True\nprint(right_angle_triangle(1, 2, 3))  # Output: False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    \"\"\"Return the word with the maximum number of unique characters.\n    \n    If multiple strings have the maximum number of unique characters,\n    return the one which comes first in lexicographical order.\n    \"\"\"\n    max_word = \"\"\n    max_unique_count = 0\n\n    for word in words:\n        # Get the number of unique characters in the word\n        unique_count = len(set(word))\n        \n        # Check if this word has more unique characters or is lexicographically smaller\n        if (unique_count > max_unique_count) or (unique_count == max_unique_count and word < max_word):\n            max_unique_count = unique_count\n            max_word = word\n\n    return max_word\n\n# Example usage\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))   # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # Calculate how many more carrots are needed\n    needed_to_eat = need - number\n    \n    if needed_to_eat <= 0:\n        # Already satisfied hunger\n        return [number, remaining]\n    \n    if remaining < needed_to_eat:\n        # Not enough remaining carrots\n        total_eaten = number + remaining\n        return [total_eaten, 0]\n    \n    # Enough remaining carrots to satisfy hunger\n    total_eaten = number + needed_to_eat\n    remaining_after_eating = remaining - needed_to_eat\n    return [total_eaten, remaining_after_eating]\n\n# Example usage:\nprint(eat(5, 6, 10))  # Output: [11, 4]\nprint(eat(4, 8, 9))   # Output: [12, 1]\nprint(eat(1, 10, 10)) # Output: [11, 0]\nprint(eat(2, 11, 5))  # Output: [7, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n    \"\"\"\n    \n    # Start with the first operand\n    result = operand[0]\n    \n    # Iterate through each operator and corresponding operand\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n        else:\n            raise ValueError(f\"Unsupported operator: {operator[i]}\")\n    \n    return result\n\n# Example usage:\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = do_algebra(operator, operand)\nprint(result)  # Output: 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n    # Check if there are any letters in the string\n    has_letters = any(c.isalpha() for c in s)\n    \n    if has_letters:\n        # Reverse the case of letters and keep non-letters as they are\n        result = ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n    else:\n        # Reverse the string\n        result = s[::-1]\n    \n    return result\n\n# Examples\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text == \"\":\n        return None\n    \n    # Create an MD5 hash object\n    md5_hash = hashlib.md5()\n    \n    # Update the hash object with the bytes of the input string\n    md5_hash.update(text.encode('utf-8'))\n    \n    # Return the hexadecimal digest of the hash\n    return md5_hash.hexdigest()\n\n# Example usage\nif __name__ == \"__main__\":\n    print(string_to_md5('Hello world'))  # Output: 3e25960a79dbc69b674cd4ec67a72c62"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    # Determine the start and end of the range\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Generate the list of even integers in the given range\n    even_integers = [i for i in range(start, end + 1) if i % 2 == 0]\n    \n    return even_integers\n\n# Example usage:\nprint(generate_integers(2, 8))   # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))   # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14)) # Output: []"}
