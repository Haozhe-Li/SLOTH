{"task_id": "HumanEval/0", "completion": "from typing import List\nfrom itertools import combinations\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    # Generate all unique pairs of numbers\n    for num1, num2 in combinations(numbers, 2):\n        # Check if the absolute difference between the numbers is less than the threshold\n        if abs(num1 - num2) < threshold:\n            return True\n    return False\n\n# Test examples\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    depth = 0\n    start_index = 0\n\n    # Remove spaces from the input string\n    paren_string = paren_string.replace(\" \", \"\")\n\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if depth == 0:\n                start_index = i\n            depth += 1\n        elif char == ')':\n            depth -= 1\n            if depth == 0:\n                groups.append(paren_string[start_index:i+1])\n\n    return groups\n\n# Example usage:\nprint(separate_paren_groups('( ) (( )) (( )( ))'))"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n\n# Test the function with a given value\nprint(truncate_number(3.5))  # Expected output: 0.5"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n# Test cases to validate the correctness\nif __name__ == \"__main__\":\n    print(below_zero([1, 2, 3]))  # Expected output: False\n    print(below_zero([1, 2, -4, 5]))  # Expected output: True\n    print(below_zero([-1, -2, 3, -4, 6]))  # Expected output: True"}
{"task_id": "HumanEval/4", "completion": "from typing import List\nfrom statistics import mean\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        return 0.0  # Handle the case of empty list to avoid division by zero\n\n    x_mean = mean(numbers)  # Calculate the mean of the list\n    mad = sum(abs(x - x_mean) for x in numbers) / len(numbers)  # Calculate the MAD\n    return mad\n\n# Test the function with the example\nif __name__ == \"__main__\":\n    print(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))  # Expected output: 1.0"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:  # If the list is empty, return an empty list\n        return []\n    \n    result = [numbers[0]]  # Start with the first element of the list\n    for num in numbers[1:]:  # Iterate through the rest of the list\n        result.append(delimeter)  # Add the delimeter\n        result.append(num)  # Add the next number\n    \n    return result\n\n# Test the function with provided data points\nprint(intersperse([], 4))  # Expected output: []\nprint(intersperse([1, 2, 3], 4))  # Expected output: [1, 4, 2, 4, 3]"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def find_max_depth(group: str) -> int:\n        max_depth = current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        return max_depth\n    \n    groups = paren_string.split()\n    return [find_max_depth(group) for group in groups]\n\n# Example usage and test\nif __name__ == \"__main__\":\n    test_string = '(()()) ((())) () ((())()())'\n    expected_result = [2, 3, 1, 3]\n    result = parse_nested_parens(test_string)\n    print(f\"Result: {result}\")\n    assert result == expected_result, f\"Expected {expected_result}, got {result}\""}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\n# Test cases\nif __name__ == \"__main__\":\n    print(filter_by_substring([], 'a'))  # Expected: []\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))  # Expected: ['abc', 'bacd', 'array']"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\nfrom functools import reduce\nfrom operator import mul\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    # Calculate the sum of the list\n    total_sum = sum(numbers)\n    \n    # Calculate the product of the list\n    # If the list is empty, product should be 1\n    total_product = reduce(mul, numbers, 1)\n    \n    return (total_sum, total_product)\n\n# Test cases to validate the implementation\nif __name__ == \"__main__\":\n    print(sum_product([]))        # Expected output: (0, 1)\n    print(sum_product([1, 2, 3, 4]))  # Expected output: (10, 24)"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    result = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        result.append(current_max)\n    \n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if len(string) == 0:\n        return \"\"\n    \n    # Iterate from the end of the string to find the longest palindromic suffix\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            # Append reverse of the prefix to the original string to make it a palindrome\n            return string + string[:i][::-1]\n    return string  # If entire string is already a palindrome, return it as is\n\n# Example usage and test cases\nprint(make_palindrome(''))      # ''\nprint(make_palindrome('cat'))   # 'catac'\nprint(make_palindrome('cata'))  # 'catac'"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    # Ensure both strings are of the same length\n    if len(a) != len(b):\n        raise ValueError(\"The input strings must be of the same length.\")\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Perform XOR on each corresponding pair of bits\n    for bit_a, bit_b in zip(a, b):\n        # XOR for binary values (1 for True, 0 for False)\n        xor_result = str(int(bit_a) ^ int(bit_b))\n        result += xor_result\n    \n    return result\n\n# Test the function\nprint(string_xor('010', '110'))  # Output should be '100'"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    \"\"\"\n    if not strings:\n        return None\n    \n    longest_string = strings[0]\n    for s in strings:\n        if len(s) > len(longest_string):\n            longest_string = s\n    \n    return longest_string\n\n# Testing the function with provided examples\nprint(longest([]))  # None\nprint(longest(['a', 'b', 'c']))  # 'a'\nprint(longest(['a', 'bb', 'ccc']))  # 'ccc'"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n# Test cases\nprint(greatest_common_divisor(3, 5))  # Expected output: 1\nprint(greatest_common_divisor(25, 15))  # Expected output: 5"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"Return list of all prefixes from shortest to longest of the input string\n\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i+1] for i in range(len(string))]\n\n# Example Usage and testing\nif __name__ == \"__main__\":\n    example_string = 'abc'\n    print(all_prefixes(example_string))  # Output should be ['a', 'ab', 'abc']"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 up to n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n + 1)))\n\n# Test cases to check if the function is working correctly\nif __name__ == \"__main__\":\n    print(string_sequence(0))  # Expected '0'\n    print(string_sequence(5))  # Expected '0 1 2 3 4 5'"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of \"\"\"\n    # Convert the string to lower case to disregard case differences and then create a set of characters\n    distinct_chars = set(string.lower())\n    return len(distinct_chars)\n\n# Example tests\nprint(count_distinct_characters('xyzXYZ'))  # Output should be 3\nprint(count_distinct_characters('Jerry'))  # Output should be 4"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    # Split the string into individual notes based on spaces\n    notes = music_string.split()\n    beat_durations = []\n\n    for note in notes:\n        if note == 'o':\n            # Whole note lasts four beats\n            beat_durations.append(4)\n        elif note == 'o|':\n            # Half note lasts two beats\n            beat_durations.append(2)\n        elif note == '.|':\n            # Quarter note lasts one beat\n            beat_durations.append(1)\n    \n    return beat_durations\n\n# Example usage\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    sub_len = len(substring)\n    \n    for i in range(len(string) - sub_len + 1):\n        if string[i:i+sub_len] == substring:\n            count += 1\n            \n    return count\n\n# Test cases to verify the solution\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/19", "completion": "from typing import List\nfrom typing import Dict\n\n# Mapping of number words to their numeric values\nnumber_map: Dict[str, int] = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\n\n# Reverse mapping from numeric values to words\nreverse_number_map: Dict[int, str] = {v: k for k, v in number_map.items()}\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    # Split the input string into a list of number words\n    number_list: List[str] = numbers.split()\n    \n    # Convert each word to its numeric value, sort by value, then map back to its word\n    sorted_numbers: List[str] = [\n        reverse_number_map[number_map[word]] \n        for word in sorted(number_list, key=lambda x: number_map[x])\n    ]\n    \n    # Join the list of words back into a string and return\n    return ' '.join(sorted_numbers)\n\n# Example usage:\nprint(sort_numbers('three one five'))  # Output: 'one three five'\nprint(sort_numbers('nine four two'))   # Output: 'two four nine'"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the numbers to make it easier to find the closest elements\n    sorted_numbers = sorted(numbers)\n    \n    closest_pair = None\n    smallest_difference = float('inf')\n    \n    # Iterate through the sorted list to find the pair with the smallest difference\n    for i in range(len(sorted_numbers) - 1):\n        difference = sorted_numbers[i + 1] - sorted_numbers[i]\n        if difference < smallest_difference:\n            smallest_difference = difference\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n            \n    return closest_pair\n\n# Example check function to use the provided test cases\ndef check():\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2), \"Test case 1 failed\"\n    assert find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0), \"Test case 2 failed\"\n    print(\"All test cases passed!\")\n\ncheck()"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    \n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    \n    if range_val == 0:\n        raise ValueError(\"All elements in the list are identical; cannot rescale.\")\n    \n    return [(x - min_val) / range_val for x in numbers]\n\n# Test the function\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))  # Expected output: [0.0, 0.25, 0.5, 0.75, 1.0]"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n\n# Example usage and testing:\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    # Iterate from n//2 down to 1\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # return 1 if no divisors found, this case only happens when n = 1\n\n# Test the function\nprint(largest_divisor(15))  # Output should be 5"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" \n    Return list of prime factors of given integer in the order from smallest to largest. \n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization. \n    Input number should be equal to the product of all factors \n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    # Factor out the 2s\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    # Factor out odd numbers starting from 3\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            factors.append(factor)\n            n //= factor\n        factor += 2\n\n    # If there's anything left, it is a prime too.\n    if n != 1:\n        factors.append(n)\n\n    return factors\n\n\n# Test the function with the examples given in the docstring\nif __name__ == \"__main__\":\n    print(factorize(8))  # Expected output: [2, 2, 2]\n    print(factorize(25)) # Expected output: [5, 5]\n    print(factorize(70)) # Expected output: [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = set()\n    result = []\n    \n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    \n    return result\n\n# Example usage\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))  # Expected output: [1, 3, 4]"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    result = []\n    for char in string:\n        if char.islower():\n            result.append(char.upper())\n        elif char.isupper():\n            result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n\n# Example Check\nprint(flip_case('Hello'))  # Output: 'hELLO'"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n\n# Test cases\nprint(get_positive([-1, 2, -4, 5, 6]))  # Output: [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: [5, 3, 2, 3, 9, 123, 1]"}
{"task_id": "HumanEval/31", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    sqrt_n = int(math.sqrt(n)) + 1\n    for divisor in range(3, sqrt_n, 2):\n        if n % divisor == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/32", "completion": "def poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates a polynomial with coefficients xs at point x.\n    Returns: xs[0] + xs[1] * x + xs[2] * x^2 + ... + xs[n] * x^n\n    \"\"\"\n    return sum(coeff * x**i for i, coeff in enumerate(xs))\n\ndef der_poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates the derivative of the polynomial with coefficients xs at point x.\n    The polynomial is of the form P(x) = a_n x^n + a_{n-1} x^{n-1} + ... + a_1 x + a_0.\n    The derivative is P'(x) = n * a_n * x^{n-1} + (n-1) * a_{n-1} * x^{n-2} + ... + a_1.\n    \"\"\"\n    return sum(i * coeff * x**(i-1) for i, coeff in enumerate(xs) if i > 0)\n\ndef find_zero(xs: list, tol=1e-10, max_iter=1000) -> float:\n    \"\"\"\n    Finds a zero of the polynomial with coefficients xs using the Newton-Raphson method.\n    \n    Parameters:\n    xs : list of coefficients (a_n, a_{n-1}, ..., a_1, a_0)\n    tol : tolerance level for the stopping criterion\n    max_iter : maximum number of iterations\n    \"\"\"\n    # Initial guess\n    x = 0.0\n\n    for _ in range(max_iter):\n        P = poly(xs, x)\n        P_prime = der_poly(xs, x)\n\n        # Check for the case where the derivative is zero (horizontally flat)\n        if P_prime == 0:\n            raise ValueError(\"Division by zero in the Newton-Raphson method. Try a different initial guess.\")\n        \n        x_new = x - P / P_prime\n\n        if abs(x_new - x) < tol:\n            return x_new\n\n        x = x_new\n\n    raise ValueError(\"Newton-Raphson method did not converge within the maximum number of iterations.\")\n\n# Test cases to verify the correctness\nif __name__ == \"__main__\":\n    print(f\"Root of 1 + 2x = {round(find_zero([1, 2]), 2)}\")\n    print(f\"Root of -6 + 11x - 6x^2 + x^3 = {round(find_zero([-6, 11, -6, 1]), 2)}\")"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    # Extract elements whose indices are divisible by three\n    divisible_by_three_elements = [l[i] for i in range(len(l)) if i % 3 == 0]\n\n    # Sort these elements\n    sorted_elements = sorted(divisible_by_three_elements)\n\n    # Merge sorted elements back into the original list\n    j = 0\n    result = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result.append(sorted_elements[j])\n            j += 1\n        else:\n            result.append(l[i])\n\n    return result\n\n# Test cases to validate the correctness of the function\nprint(sort_third([1, 2, 3]))  # Expected: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Expected: [2, 6, 3, 4, 8, 9, 5]"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if not l:\n        return None  # or could raise an exception/return some other value\n    max_value = l[0]  # Assume the first element is the largest to start\n    for num in l:\n        if num > max_value:\n            max_value = num\n    return max_value"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n# Testing the function with the provided data points\nif __name__ == \"__main__\":\n    print(f\"fizz_buzz(50) -> {fizz_buzz(50)}\")  # Expected output: 0\n    print(f\"fizz_buzz(78) -> {fizz_buzz(78)}\")  # Expected output: 2\n    print(f\"fizz_buzz(79) -> {fizz_buzz(79)}\")  # Expected output: 3"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    # Extract elements at even indices and sort them\n    even_indices_elements = sorted(l[i] for i in range(0, len(l), 2))\n\n    # Construct the new list with sorted elements at even indices\n    result = []\n    even_index = 0\n\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices_elements[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    \n    return result\n\n# Test cases\nprint(sort_even([1, 2, 3]))  # Expected output: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))  # Expected output: [3, 6, 5, 4]"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # Similar to decode, split the string into groups of 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    \n    # For each group, if the group length is 3, move the last character in the group to the front.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    \n    # Join the groups together to form the original string.\n    return \"\".join(groups)\n\n# Example usage\nencoded_str = encode_cyclic(\"hello world\")\nprint(f\"Encoded: {encoded_str}\")\ndecoded_str = decode_cyclic(encoded_str)\nprint(f\"Decoded: {decoded_str}\")"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    count = 0  # Counter for prime Fibonacci numbers found\n    fib1, fib2 = 0, 1  # The first two Fibonacci numbers\n    \n    while True:\n        # Generate the next Fibonacci number\n        fib_next = fib1 + fib2 \n        fib1, fib2 = fib2, fib_next\n        \n        # Check if the Fibonacci number is prime\n        if is_prime(fib_next):\n            count += 1\n            if count == n:\n                return fib_next\n\n# Test the function with provided test cases\nprint(prime_fib(1))  # Should return 2\nprint(prime_fib(2))  # Should return 3\nprint(prime_fib(3))  # Should return 5\nprint(prime_fib(4))  # Should return 13\nprint(prime_fib(5))  # Should return 89"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    n = len(l)\n    for i in range(n - 2):\n        # Create a set to store the numbers we have seen as we iterate.\n        found_nums = set()\n        for j in range(i + 1, n):\n            # Calculate the required third number that would lead to 0 when added to l[i] and l[j].\n            required_number = -(l[i] + l[j])\n            if required_number in found_nums:\n                return True\n            found_nums.add(l[j])\n    return False\n\n# Test cases to verify the correctness of the function\nprint(triples_sum_to_zero([1, 3, 5, 0]))  # Expected: False\nprint(triples_sum_to_zero([1, 3, -2, 1]))  # Expected: True\nprint(triples_sum_to_zero([1, 2, 3, 7]))  # Expected: False\nprint(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # Expected: True\nprint(triples_sum_to_zero([1]))  # Expected: False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    \"\"\"\n    The function calculates the number of collisions between two sets of cars\n    moving towards each other.\n    \n    :param n: The number of cars moving in each direction.\n    :return: The total number of collisions.\n    \"\"\"\n    return n * n\n\n# Example Usage\nn = 5\nprint(car_race_collision(n))  # Output: 25"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases\nprint(pairs_sum_to_zero([1, 3, 5, 0]))  # False\nprint(pairs_sum_to_zero([1, 3, -2, 1]))  # False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))   # False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # True\nprint(pairs_sum_to_zero([1]))  # False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if base < 2 or base > 9:\n        raise ValueError(\"Base must be between 2 and 9 inclusive\")\n\n    if x == 0:\n        return \"0\"\n\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x = x // base\n\n    # Reverse the list and join to form the final string\n    return ''.join(result[::-1])\n\n# Test cases\nprint(change_base(8, 3))  # Expected output: '22'\nprint(change_base(8, 2))  # Expected output: '1000'\nprint(change_base(7, 2))  # Expected output: '111'"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"Given length of a side (base) and height, return the area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    # Initialize the sequence with the first four values\n    a, b, c, d = 0, 0, 2, 0\n    \n    # Loop to compute the sequence up to nth value\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    \n    # Return the nth value\n    return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    sorted_l = sorted(l)\n    \n    if n % 2 == 1:\n        # If the number of elements is odd, return the middle element\n        return sorted_l[n // 2]\n    else:\n        # If the number of elements is even, return the average of the two middle elements\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    \"\"\"\n    # Remove spaces and convert to lower to unify the case\n    text = ''.join(e for e in text if e.isalnum()).lower()\n    \n    # Check if the text is the same as its reverse\n    return text == text[::-1]\n\n# Test cases provided in the docstring\nprint(is_palindrome(''))        # True\nprint(is_palindrome('aba'))     # True\nprint(is_palindrome('aaaaa'))   # True\nprint(is_palindrome('zbcd'))    # False"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    \"\"\"\n    return pow(2, n, p)\n\n# Testing the function with the provided data points\nif __name__ == \"__main__\":\n    print(modp(3, 5))  # Output: 3\n    print(modp(1101, 101))  # Output: 2\n    print(modp(0, 101))  # Output: 1\n    print(modp(3, 11))  # Output: 8\n    print(modp(100, 101))  # Output: 1"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str) -> str:\n    \"\"\"\n    Takes as input a string encoded with encode_shift function. Returns the decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord('a')) % 26) + ord('a')) for ch in s])\n\n# Example usage\nencoded_string = encode_shift(\"hello\")\nprint(encoded_string)  # Output will be \"mjqqt\"\n\ndecoded_string = decode_shift(encoded_string)\nprint(decoded_string)  # Output should be \"hello\""}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    # Use a generator expression to filter out vowels and join the result to form the final string\n    return ''.join(char for char in text if char not in vowels)\n\n# Test cases to verify the correctness of the function\nif __name__ == \"__main__\":\n    print(remove_vowels(''))  # Expected: ''\n    print(remove_vowels(\"abcdef\\nghijklm\"))  # Expected: 'bcdf\\nghjklm'\n    print(remove_vowels('abcdef'))  # Expected: 'bcdf'\n    print(remove_vowels('aaaaa'))  # Expected: ''\n    print(remove_vowels('aaBAA'))  # Expected: 'B'\n    print(remove_vowels('zbcd'))  # Expected: 'zbcd'"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\"\"\"\n    for number in l:\n        if number >= t:\n            return False\n    return True\n\n# Testing the function with the provided data points\nprint(below_threshold([1, 2, 4, 10], 100))  # Expected output: True\nprint(below_threshold([1, 20, 4, 10], 5))   # Expected output: False"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n\n    Examples:\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    \"\"\"\n    return set(s0) == set(s1)\n\n# Test cases\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))               # True\nprint(same_chars('dddddddabc', 'abcd'))              # True\nprint(same_chars('eabcd', 'dddddddabc'))            # False\nprint(same_chars('abcd', 'dddddddabce'))             # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))  # False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Initialize a list to store Fibonacci numbers up to n\n        fib_numbers = [0] * (n + 1)\n        fib_numbers[1] = 1\n        for i in range(2, n + 1):\n            # Calculate Fibonacci number based on the previously computed values\n            fib_numbers[i] = fib_numbers[i - 1] + fib_numbers[i - 2]\n        return fib_numbers[n]\n\n# Test cases\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1\n        elif bracket == \">\":\n            balance -= 1\n        if balance < 0:\n            # If balance is negative, there's a closing bracket without a matching opening one\n            return False\n    return balance == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list) -> bool:\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\"\"\"\n    \n    # Check if list is monotonically increasing\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n        return True\n\n    # Check if list is monotonically decreasing\n    elif all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n\n    else:\n        return False\n\n# Test cases\nprint(monotonic([1, 2, 4, 20]))  # Expected: True\nprint(monotonic([1, 20, 4, 10]))  # Expected: False\nprint(monotonic([4, 1, 0, -10]))  # Expected: True"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list) -> list:\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    \n    # Convert the lists to sets and take the intersection to find common elements\n    common_set = set(l1).intersection(set(l2))\n    \n    # Convert the resulting set to a list and sort it\n    common_list = sorted(common_set)\n    \n    return common_list\n\n# Test examples as documented\nif __name__ == \"__main__\":\n    print(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\n    print(common([5, 3, 2, 8], [3, 2]))  # Output: [2, 3]"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    # Initialize the largest prime factor variable\n    largest_prime = -1\n    \n    # Divide n by 2 to handle even numbers\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n        \n    # n must be odd at this point, so we can skip one element (Note i = i + 2)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # While i divides n, print i and divide n\n        while n % i == 0:\n            largest_prime = i\n            n = n // i\n            \n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        largest_prime = n\n        \n    return largest_prime\n\n# Test cases\nprint(largest_prime_factor(13195))  # Expected output: 29\nprint(largest_prime_factor(2048))   # Expected output: 2"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    # Calculate the derivative of the polynomial represented by xs\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test cases to verify the solution\nif __name__ == \"__main__\":\n    # Test case 1\n    result1 = derivative([3, 1, 2, 4, 5])\n    print(result1)  # Expected output: [1, 4, 12, 20]\n\n    # Test case 2\n    result2 = derivative([1, 2, 3])\n    print(result2)  # Expected output: [2, 6]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    This function efficiently computes the n-th element of the fibfib number sequence.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    \n    # Initialize a list to store fibfib values up to n\n    fibfib_values = [0] * (n + 1)\n    fibfib_values[0] = 0\n    fibfib_values[1] = 0\n    fibfib_values[2] = 1\n    \n    # Compute the fibfib values up to n using the recurrence relation\n    for i in range(3, n + 1):\n        fibfib_values[i] = fibfib_values[i - 1] + fibfib_values[i - 2] + fibfib_values[i - 3]\n    \n    return fibfib_values[n]\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = set(\"aeiouAEIOU\")\n    count = sum(1 for char in s if char in vowels)\n    if s and s[-1] in 'yY':\n        count += 1\n    return count\n\n# Test cases\nassert vowels_count(\"abcde\") == 2\nassert vowels_count(\"ACEDY\") == 3\nassert vowels_count(\"quick\") == 1\nassert vowels_count(\"rhythm\") == 1\nassert vowels_count(\"AEIOU\") == 5\nassert vowels_count(\"bcdfg\") == 0\nassert vowels_count(\"sky\") == 0\nassert vowels_count(\"SYZYGY\") == 0  # Since 'y' is not at the end of a word in this case\nassert vowels_count(\"fly\") == 0  # Only 'y' at the end is considered a vowel\nassert vowels_count(\"\") == 0  # Empty string case\nassert vowels_count(\"aeiouy\") == 6  # All vowels plus 'y' at the end\nassert vowels_count(\"aeiuyo\") == 5  # All vowels plus 'y' in the middle\n\nprint(\"All test cases passed.\")"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    # Convert the integer to a string to easily work with digits\n    x_str = str(x)\n    n = len(x_str)\n\n    # If shift > number of digits, reverse the string\n    if shift > n:\n        return x_str[::-1]\n    \n    # Compute the effective shift amount\n    effective_shift = shift % n\n\n    # Perform the circular shift\n    shifted_str = x_str[-effective_shift:] + x_str[:-effective_shift]\n    return shifted_str\n\n# Test cases\nprint(circular_shift(12, 1))  # Expected output: \"21\"\nprint(circular_shift(12, 2))  # Expected output: \"12\"\nprint(circular_shift(12345, 3))  # Expected output: \"34512\"\nprint(circular_shift(12345, 7))  # Expected output: \"34512\" (since 7 % 5 = 2)\nprint(circular_shift(12345, 6))  # Expected output: \"51234\" (since 6 % 5 = 1)\nprint(circular_shift(12345, 10))  # Expected output: \"12345\" (since 10 % 5 = 0)\nprint(circular_shift(12345, 15))  # Expected output: \"54321\" (since shift > n, reverse the string)"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    \"\"\"Calculate the sum of ASCII values of uppercase letters in the string s.\"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\n# Test cases to verify the solution\nprint(digitSum(\"\"))        # 0\nprint(digitSum(\"abAB\"))    # 131\nprint(digitSum(\"abcCd\"))    # 67\nprint(digitSum(\"helloE\"))  # 69\nprint(digitSum(\"woArBld\")) # 131\nprint(digitSum(\"aAaaaXa\")) # 153"}
{"task_id": "HumanEval/67", "completion": "import re\n\ndef fruit_distribution(s, n):\n    # Use regex to extract the numbers of apples and oranges from the string\n    numbers = re.findall(r'\\d+', s)\n    \n    # Convert the string numbers to integers\n    apples = int(numbers[0])\n    oranges = int(numbers[1])\n    \n    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits\n    mangoes = n - apples - oranges\n    \n    return mangoes\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Expected output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))  # Expected output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))  # Expected output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120))  # Expected output: 19"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    # Initialize variables to store the smallest even value and its index\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    # Loop through the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n\n    # If no even number was found, return an empty list\n    if smallest_index == -1:\n        return []\n\n    # Return the smallest even value and its index\n    return [smallest_even, smallest_index]\n\n# Example usage:\nprint(pluck([4, 2, 3]))       # Output: [2, 1]\nprint(pluck([1, 2, 3]))      # Output: [2, 1]\nprint(pluck([]))              # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n\n    # Count the frequency of each element in the list\n    freq = Counter(lst)\n    \n    # Initialize the result to -1 (the default value if no condition is met)\n    result = -1\n    \n    # Iterate through the frequency dictionary to find the greatest integer that meets the criteria\n    for num, count in freq.items():\n        if num <= count and num > result:\n            result = num\n    \n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    sorted_lst = sorted(lst)\n    \n    while sorted_lst:\n        # Append the minimum value\n        result.append(sorted_lst.pop(0))\n        # Append the maximum value if there are still elements left\n        if sorted_lst:\n            result.append(sorted_lst.pop(-1))\n    \n    return result\n\n# Testing the function\nprint(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\nprint(strange_sort_list([]))           # Output: []"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Return the area rounded to 2 decimal points\n    return round(area, 2)\n\n# Example usage\nprint(triangle_area(3, 4, 5))  # Should output: 6.00\nprint(triangle_area(1, 2, 10)) # Should output: -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # Check if q is a palindrome (balanced)\n    if q != q[::-1]:\n        return False\n    \n    # Check if the sum of elements in q is less than or equal to the max weight w\n    if sum(q) > w:\n        return False\n    \n    return True"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n\n    return changes\n\n# Test cases\nprint(smallest_change([1, 2, 3, 5, 4, 7, 9, 6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))       # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))            # Output: 0"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # Calculate total number of characters in all strings for lst1 and lst2\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Return the list with fewer total characters, or the first list if equal\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\n# Examples\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    \"\"\"Return True if n is a prime number, else return False.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    \"\"\"Check if a is the product of 3 prime numbers.\"\"\"\n    if a >= 100:\n        return False\n\n    # List of primes less than 100\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    \n    # Iterate through 3 primes and check if their product is equal to a\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n\n    return False\n\n# Example usage:\nprint(is_multiply_prime(30))  # Should return True\nprint(is_multiply_prime(10))  # Should return False (10 is not the product of 3 primes)\nprint(is_multiply_prime(105)) # Should return True (105 = 3 * 5 * 7)"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    # Handling edge cases: if n is 1, x must also be 1 to be a simple power of 1.\n    if n == 1:\n        return x == 1\n\n    # Start with the initial power.\n    power = n\n    while power < x:\n        power *= n\n\n    # If the loop ends with power equal to x, it means x is a simple power of n.\n    return power == x\n\n# Test cases\nprint(is_simple_power(1, 4))  # True\nprint(is_simple_power(2, 2))  # True\nprint(is_simple_power(8, 2))  # True\nprint(is_simple_power(3, 2))  # False\nprint(is_simple_power(3, 1))  # False\nprint(is_simple_power(5, 3))  # False"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    # Calculate the cube root of the absolute value of a\n    cube_root = abs(a) ** (1/3)\n    \n    # Round the cube root to the nearest integer\n    rounded_cube_root = round(cube_root)\n    \n    # Compare the cube of the rounded cube root to the original value (with its original sign)\n    return rounded_cube_root ** 3 == abs(a)\n\n# Testing the function\nprint(iscube(1))    # ==> True\nprint(iscube(2))    # ==> False\nprint(iscube(-1))   # ==> True\nprint(iscube(64))   # ==> True\nprint(iscube(0))    # ==> True\nprint(iscube(180))  # ==> False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num: str) -> int:\n    # Define a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate through each digit in the hexadecimal string\n    for digit in num:\n        if digit in prime_hex_digits:\n            prime_count += 1\n            \n    return prime_count\n\n# Test cases\nprint(hex_key(\"AB\"))          # Output: 1\nprint(hex_key(\"1077E\"))      # Output: 2\nprint(hex_key(\"ABED1A33\"))   # Output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output: 6\nprint(hex_key(\"2020\"))       # Output: 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    # Convert the decimal number to binary, remove the '0b' prefix\n    binary_str = bin(decimal)[2:]\n    \n    # Add 'db' at the beginning and the end of the binary string\n    return f\"db{binary_str}db\"\n\n# Test cases to demonstrate functionality\nprint(decimal_to_binary(15))  # Should return \"db1111db\"\nprint(decimal_to_binary(32))  # Should return \"db100000db\""}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    # Check if the string length is less than 3\n    if len(s) < 3:\n        return False\n    \n    # Iterate through the string and check each set of 3 consecutive characters\n    for i in range(len(s) - 2):\n        # Check if any three consecutive characters are not distinct\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    \n    # If all sets of three consecutive characters are distinct, the string is happy\n    return True\n\n# Test cases\nprint(is_happy(\"a\"))       # False\nprint(is_happy(\"aa\"))      # False\nprint(is_happy(\"abcd\"))    # True\nprint(is_happy(\"aabb\"))    # False\nprint(is_happy(\"adb\"))     # True\nprint(is_happy(\"xyy\"))     # False"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    # Define the letter grade thresholds and corresponding letter grades\n    grade_boundaries = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n\n    # Initialize the list to store the results\n    result = []\n\n    for gpa in grades:\n        for i, boundary in enumerate(grade_boundaries):\n            if gpa >= boundary:\n                result.append(letter_grades[i])\n                break\n        else:\n            result.append(letter_grades[-1])  # For the grade below 0.0\n        \n    return result\n\n# Example usage\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Expected output: ['A+', 'B', 'C-', 'C', 'A-']"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    \"\"\"Check if the length of the input string is a prime number.\"\"\"\n    \n    def is_prime(n):\n        \"\"\"Check if a number is a prime number.\"\"\"\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    # Calculate the length of the string and use `is_prime` to check if it is prime\n    return is_prime(len(string))\n\n# Test cases\nprint(prime_length('Hello'))   # True\nprint(prime_length('abcdcba')) # True\nprint(prime_length('kittens')) # True\nprint(prime_length('orange'))  # False"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Calculate the count of numbers starting or ending with 1\n    count_start_with_1 = 10 ** (n - 1)\n    count_end_with_1 = 10 ** (n - 1)\n    # Calculate the overlap where both start and end with 1\n    overlap = 10 ** (n - 2)\n    # Total count is sum of the individual counts minus the overlap\n    total_count = count_start_with_1 + count_end_with_1 - overlap\n\n    return total_count\n\n# Example usage\nprint(starts_one_ends(2))  # Output: 19, since the numbers are 10, 11, 12, ..., 19, and 21, 31, ..., 91\nprint(starts_one_ends(3))  # Output: 180"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    # Convert number to string to access each digit\n    str_N = str(N)\n    \n    # Calculate the sum of digits\n    digit_sum = sum(int(digit) for digit in str_N)\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(digit_sum)[2:]\n    \n    # Return the binary string\n    return binary_sum\n\n# Example usage:\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))  # Output: \"110\"\nprint(solve(147))  # Output: \"1100\""}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, this function adds the even elements that are at odd indices.\n    \n    Parameters:\n    lst (list): A non-empty list of integers.\n    \n    Returns:\n    int: The sum of even elements located at odd indices.\n    \"\"\"\n    # Initialize the sum to 0\n    sum_even_elements = 0\n    \n    # Iterate over the list, using enumerate for both element and index\n    for index, element in enumerate(lst):\n        # Check if the index is odd and the element is even\n        if index % 2 != 0 and element % 2 == 0:\n            sum_even_elements += element\n    \n    return sum_even_elements\n\n# Example usage\nprint(add([4, 2, 6, 7]))  # Output: 2"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    def sort_word(word):\n        # Sort characters in the word based on ASCII value and join them back to a word.\n        return ''.join(sorted(word))\n    \n    # Split the string into words and then sort each word individually.\n    sorted_words = [sort_word(word) for word in s.split(' ')]\n    \n    # Join the sorted words back together with spaces in between\n    return ' '.join(sorted_words)\n\n# Test cases as examples\nprint(anti_shuffle('Hi'))          # Output: 'Hi'\nprint(anti_shuffle('hello'))       # Output: 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # Output: 'Hello !!!Wdlor'"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    # Initialize an empty list to store the coordinates.\n    coordinates = []\n    \n    # Loop through the list to find occurrences of x.\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                # If x is found, append the coordinate as a tuple (row, column) to the coordinates list.\n                coordinates.append((i, j))\n    \n    # For each row, sort the coordinates of x in descending order.\n    # Then, sort the entire list by row in ascending order.\n    return sorted((row, -col) for col, row in sorted(coordinates, reverse=True))\n\n# Test cases to validate the solution\nif __name__ == \"__main__\":\n    print(get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1))  # Expected: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    print(get_row([], 1))  # Expected: []\n    print(get_row([[1], [1, 2, 3]], 3))  # Expected: [(1, 2)]"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n    \n    # Create a copy of the array to avoid changing the original one\n    array_copy = array[:]\n    \n    # Check the sum of the first and last element\n    is_odd = (array[0] + array[-1]) % 2 != 0\n    \n    # Sort based on the condition\n    if is_odd:\n        array_copy.sort()\n    else:\n        array_copy.sort(reverse=True)\n    \n    return array_copy\n\n# Test cases\nprint(sort_array([]))          # Output: []\nprint(sort_array([5]))         # Output: [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))        # Output: [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))     # Output: [6, 5, 4, 3, 2, 1, 0]"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted_str = ''\n    \n    for char in s:\n        if char.isalpha():  # Check if character is a letter\n            # Find the index of the character in the alphabet\n            index = alphabet.index(char)\n            \n            # Rotate the index by 4 places\n            new_index = (index + 4) % 26  # Use modulo 26 to wrap around the alphabet\n            \n            # Append the new character to the encrypted string\n            encrypted_str += alphabet[new_index]\n        else:\n            # If the character is not a letter, just keep it as is\n            encrypted_str += char\n            \n    return encrypted_str\n\n# Test cases\nprint(encrypt('hi'))              # 'lm'\nprint(encrypt('asdfghjkl'))       # 'ewhjklnop'\nprint(encrypt('gf'))              # 'kj'\nprint(encrypt('et'))              # 'ix'"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    \n    unique_sorted = sorted(set(lst))\n    \n    if len(unique_sorted) < 2:\n        return None\n    \n    return unique_sorted[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    # Use regex to split the string S into sentences based on '.', '?' or '!'\n    import re\n    # Add a space after the delimiters so we can easily split by whitespace later\n    sentences = re.split(r'[.?!]', S + ' ')\n    \n    # Remove empty strings that may occur due to splitting, especially at the end due to added space\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n    \n    # Count the sentences that start with \"I \"\n    boredom_count = sum(1 for sentence in sentences if sentence.startswith(\"I \"))\n\n    return boredom_count\n\n# Example usages\nprint(is_bored(\"Hello world\"))  # Output should be 0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output should be 1"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    # Check if all numbers are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n\n    # Check if one number is the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n\n# Test cases\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1))  # \u279e True\nprint(any_int(3.6, -2.2, 2))  # \u279e False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = \"aeiouAEIOU\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    encoded_message = ''\n    \n    for char in message:\n        # Swap case\n        if char.isalpha():\n            new_char = char.swapcase()\n        else:\n            new_char = char\n        \n        # Replace vowel with the letter that is 2 places ahead\n        if char.lower() in vowels:\n            new_char = char.swapcase()\n            index = alphabet.find(new_char.lower())\n            new_vowel = alphabet[(index + 2) % 26]  # Finds the 2nd next letter\n            if char.isupper():\n                new_char = new_vowel.upper()\n            else:\n                new_char = new_vowel.lower()\n        \n        encoded_message += new_char\n    \n    return encoded_message\n\n# Test the function\nprint(encode('test'))  # Should output 'TGST'\nprint(encode('This is a message'))  # Should output 'tHKS KS C MGSSCGG'"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    \"\"\"Calculate the sum of digits of a number.\"\"\"\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    # Filter the list to get only prime numbers\n    primes = [num for num in lst if is_prime(num)]\n    \n    # Check if there are any primes in the list\n    if not primes:\n        return 0\n    \n    # Get the largest prime number\n    largest_prime = max(primes)\n    \n    # Return the sum of the digits of the largest prime number\n    return sum_of_digits(largest_prime)\n\n# Examples:\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))            # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))               # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))                                    # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))                                      # Output: 7"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(input_dict):\n    # If the dictionary is empty, return False\n    if not input_dict:\n        return False\n\n    lowercase_keys = 0\n    uppercase_keys = 0\n    \n    # Iterate over all keys in the dictionary\n    for key in input_dict:\n        # If a key is not a string, return False immediately\n        if not isinstance(key, str):\n            return False\n        \n        # Count lowercase and uppercase keys\n        if key.islower():\n            lowercase_keys += 1\n        elif key.isupper():\n            uppercase_keys += 1\n        else:\n            # If the key is neither all lowercase nor all uppercase, return False\n            return False\n\n    # Determine if all keys are in the same case\n    return lowercase_keys == len(input_dict) or uppercase_keys == len(input_dict)\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"}))  # True"}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    \"\"\"Check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    \"\"\"Return an array of the first prime numbers that are less than n.\"\"\"\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes\n\n# Test cases\nprint(count_up_to(5))   # Output: [2, 3]\nprint(count_up_to(11))  # Output: [2, 3, 5, 7]\nprint(count_up_to(0))   # Output: []\nprint(count_up_to(20))  # Output: [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))   # Output: []\nprint(count_up_to(18))  # Output: [2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    \"\"\"Multiply the unit digits of two integers and return the result.\"\"\"\n    # Extract the unit digits\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Compute and return the product of the unit digits\n    return unit_digit_a * unit_digit_b\n\n# Test cases\nprint(multiply(148, 412))  # Output: 16\nprint(multiply(19, 28))    # Output: 72\nprint(multiply(2020, 1851))# Output: 0\nprint(multiply(14, -15))  # Output: 20"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = \"AEIOU\"  # Uppercase vowels\n    count = 0\n    \n    for i in range(0, len(s), 2):  # We step by 2 to ensure we only consider even indices\n        if s[i] in vowels:  # Check if the character is an uppercase vowel\n            count += 1\n            \n    return count\n\n# Test examples\nprint(count_upper('aBCdEf'))  # Output: 1\nprint(count_upper('abcdefg'))  # Output: 0\nprint(count_upper('dBBE'))    # Output: 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # Convert the input string to a float\n    num = float(value)\n    \n    # Extract the integer part and the fractional part\n    integer_part = int(num)\n    fractional_part = num % 1\n    \n    # Determine the rounding direction for fractional part 0.5\n    if fractional_part == 0.5:\n        if num > 0:\n            return integer_part + 1\n        else:\n            return integer_part - 1\n    else:\n        # For other fractional parts, use the standard rounding rule\n        return int(round(num))\n\n# Test cases\nprint(closest_integer(\"10\"))     # Output should be 10\nprint(closest_integer(\"15.3\"))   # Output should be 15\nprint(closest_integer(\"14.5\"))    # Output should be 15\nprint(closest_integer(\"-14.5\"))  # Output should be -15"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    current_stones = n\n    for _ in range(n):\n        pile.append(current_stones)\n        # Determine the increment based on the parity of n\n        if n % 2 == 0:\n            current_stones += 2  # next even number\n        else:\n            current_stones += 2  # next odd number\n    return pile\n\n# Example usage:\nprint(make_a_pile(3))  # Output: [3, 5, 7]"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    # Using regular expression to split the string by spaces and commas\n    return re.split(r'[,\\s]\\s*', s.strip())\n\n# Test the function\nprint(words_string(\"Hi, my name is John\"))  # Output: ['Hi', 'my', 'name', 'is', 'John']\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: ['One', 'two', 'three', 'four', 'five', 'six']"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    # Ensure we start from an even number or go down to the closest even number\n    if x % 2 != 0:\n        x += 1\n    # Find the largest even number within the range\n    for num in range(x, y + 1, 2):\n        last_even = num\n    return last_even\n\n# Test cases\nprint(choose_num(12, 15))  # Output: 14\nprint(choose_num(13, 12))  # Output: -1\nprint(choose_num(12, 13))  # Output: 12\nprint(choose_num(17, 23))  # Output: 22"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    \n    # Calculate the sum of arithmetic sequence using the formula: (m - n + 1) * (n + m) / 2\n    total_sum = (m - n + 1) * (n + m) // 2\n    avg = total_sum // (m - n + 1)\n    \n    # Add 0.5 to the average before int conversion to round to the nearest integer\n    rounded_avg = int(avg + 0.5)\n    \n    # Convert the rounded average to binary format\n    return bin(rounded_avg)\n\n# Example checks to verify the solution\nprint(rounded_avg(1, 5))  # => '0b11'\nprint(rounded_avg(7, 5))  # => -1\nprint(rounded_avg(10, 20))  # => '0b1111'\nprint(rounded_avg(20, 33))  # => '0b11010'"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_no_even_digit(n):\n        \"\"\"Check if the integer n has no even digit.\"\"\"\n        return all(int(digit) % 2 != 0 for digit in str(n))\n\n    # Filter the list to include only numbers that have no even digits\n    filtered_list = [num for num in x if has_no_even_digit(num)]\n    \n    # Return the sorted list\n    return sorted(filtered_list)\n\n# Test cases\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # Step 1: Filter numbers between 1 and 9\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    \n    # Step 2: Sort the filtered array in ascending order\n    sorted_arr = sorted(filtered_arr)\n    \n    # Step 3: Reverse the sorted array\n    reversed_arr = list(reversed(sorted_arr))\n    \n    # Step 4: Replace each digit with its corresponding name\n    number_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    result = [number_names[num] for num in reversed_arr]\n    \n    # Step 5: Return the resulting array\n    return result"}
{"task_id": "HumanEval/106", "completion": "def factorial(n):\n    \"\"\"Calculate the factorial of n.\"\"\"\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\ndef sum_numbers(n):\n    \"\"\"Calculate the sum of numbers from 1 to n.\"\"\"\n    return n * (n + 1) // 2\n\ndef f(n):\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # i is even\n            result.append(factorial(i))\n        else:\n            # i is odd\n            result.append(sum_numbers(i))\n    return result\n\n# Example usage\nprint(f(5))  # Output: [1, 2, 6, 24, 15]"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    # Initialize counts of even and odd palindromes\n    even_count, odd_count = 0, 0\n    \n    def is_palindrome(x):\n        # Convert the number to string and check if it's the same when reversed\n        return str(x) == str(x)[::-1]\n    \n    # Iterate through each number in the range from 1 to n\n    for i in range(1, n + 1):\n        # Check if the number is a palindrome\n        if is_palindrome(i):\n            # Update the count based on whether the number is even or odd\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    # Return the counts as a tuple\n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_palindrome(3))   # Expected output: (1, 2)\nprint(even_odd_palindrome(12))  # Expected output: (4, 6)"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(n):\n        # Turn the number into a string to handle each digit\n        str_num = str(n)\n        # Handle negative numbers, remove the first '-' and consider it as a negative digit\n        if str_num[0] == '-':\n            return -int(str_num[1]) + sum(int(c) for c in str_num[2:])\n        return sum(int(c) for c in str_num)\n\n    # Initialize a counter for numbers whose sum of digits is greater than 0\n    count = 0\n    for num in arr:\n        # Check if the sum of digits of num is greater than 0\n        if sum_of_digits(num) > 0:\n            count += 1\n            \n    return count\n\n# Testing the function with provided cases\nprint(count_nums([]) == 0)      # True\nprint(count_nums([-1, 11, -11]) == 1)  # True\nprint(count_nums([1, 1, 2]) == 3)      # True"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n\n    # If array is empty, it is trivially in non-decreasing order\n    if n == 0:\n        return True\n\n    # Find the point in the array where the order changes\n    # This helps in identifying how many discontinuities exist\n    num_discontinuities = 0\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            num_discontinuities += 1\n\n    # Check the last element with the first to complete the circular check\n    if arr[n - 1] > arr[0]:\n        num_discontinuities += 1\n\n    # If there is only one discontinuity or none, it's a valid rotation\n    return num_discontinuities <= 1\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # Expected: True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # Expected: False\nprint(move_one_ball([1, 2, 3, 4]))    # Expected: True\nprint(move_one_ball([]))              # Expected: True"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_elements_in_lst1 = [x for x in lst1 if x % 2 != 0]\n    even_elements_in_lst2 = [x for x in lst2 if x % 2 == 0]\n    \n    # Check if there are enough even numbers in lst2 to replace all odd numbers in lst1\n    if len(odd_elements_in_lst1) <= len(even_elements_in_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Example usage\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    \n    # Split the input string into a list of characters\n    chars = test.split()\n    \n    # Count the occurrences of each character\n    char_count = {}\n    for char in chars:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the maximum count\n    max_count = max(char_count.values())\n    \n    # Create the result dictionary with only those characters that have the max count\n    result = {char: count for char, count in char_count.items() if count == max_count}\n    \n    return result\n\n# Test cases to check the correctness\nprint(histogram('a b c'))  # Expected: {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))  # Expected: {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))  # Expected: {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))  # Expected: {'b': 4}\nprint(histogram(''))  # Expected: {}"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # Remove characters from s if they are present in c\n    result_str = ''.join([char for char in s if char not in c])\n    \n    # Check if the resulting string is a palindrome\n    is_palindrome = result_str == result_str[::-1]\n    \n    # Return a tuple of the resulting string and palindrome check\n    return (result_str, is_palindrome)\n\n# Example usage\nprint(reverse_delete(\"abcde\", \"ae\"))  # ('bcd', False)\nprint(reverse_delete(\"abcdef\", \"b\"))  # ('acdef', False)\nprint(reverse_delete(\"abcdedcba\", \"ab\"))  # ('cdedc', True)"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        # Count the number of odd digits in the string\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        # Format the result string, replacing 'i' with the odd_count number\n        formatted_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(formatted_string)\n    return result\n\n# Test cases\nprint(odd_count(['1234567']))  # Should output [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\nprint(odd_count(['3', \"11111111\"]))  # Should output [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    # Initialize variables to store the minimum sum found so far and the current potential minimum sum\n    min_sum = nums[0]\n    current_sum = nums[0]\n    \n    # Iterate through the array to find the minimum sub-array sum\n    for i in range(1, len(nums)):\n        # Update the current_sum to be the minimum of the current element alone or the current_sum + current element\n        current_sum = min(nums[i], current_sum + nums[i])\n        \n        # Update the global minimum sum if the current_sum is smaller\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n\n# Example test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Expected: 1\nprint(minSubArraySum([-1, -2, -3]))        # Expected: -6"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # Calculate the number of times the bucket is lowered for each well\n    # The sum of 1s in a row represents the amount of water in that well.\n    times_bucket_lowered = 0\n    for row in grid:\n        water_units = sum(row)\n        times_bucket_lowered += math.ceil(water_units / capacity)\n\n    return times_bucket_lowered\n\n# Example usage\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    \"\"\"\n    Sort an array of non-negative integers according to the number of ones \n    in their binary representation in ascending order. For similar number \n    of ones, sort based on their decimal value.\n    \"\"\"\n    # Check if all numbers in arr are non-negative\n    if any(x < 0 for x in arr):\n        return \"Error: Array must contain only non-negative integers.\"\n\n    # Define a sorting key that returns a tuple with the count of 1's and the original number\n    def sorting_key(x):\n        return (bin(x).count('1'), x)\n    \n    # Sort the array using the defined sorting key\n    return sorted(arr, key=sorting_key)\n\n# Test cases\nprint(sort_array([1, 5, 2, 3, 4]))  # [1, 2, 3, 4, 5]\nprint(sort_array([1, 0, 2, 3, 4]))  # [0, 1, 2, 4, 3]\nprint(sort_array([3, 7, 8, 9]))     # [8, 3, 9, 7]"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:  # Check if input string s is empty\n        return []\n    \n    # Helper function to check if a character is a consonant\n    def is_consonant(c):\n        return c.lower() in 'bcdfghjklmnpqrstvwxyz'\n    \n    result = []\n    # Split the input string into a list of words\n    words = s.split()\n    \n    # Iterate through each word\n    for word in words:\n        # Count the number of consonants in the word\n        consonant_count = sum(is_consonant(c) for c in word)\n        # If the number of consonants matches 'n', add the word to results\n        if consonant_count == n:\n            result.append(word)\n    \n    return result\n\n# Example usage and tests\nprint(select_words(\"Mary had a little lamb\", 4))  # Output: [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # Output: [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # Output: []\nprint(select_words(\"Hello world\", 4))            # Output: [\"world\"]\nprint(select_words(\"Uncle sam\", 3))              # Output: [\"Uncle\"]"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    # Helper function to check if a character is a vowel\n    def is_vowel(char):\n        return char in 'AEIOUaeiou'\n\n    n = len(word)\n    # Iterate from right to left\n    for i in range(n-2, 0, -1):\n        # Check if the current character is a vowel\n        if is_vowel(word[i]):\n            # Check if the character to the left and right are consonants\n            if not is_vowel(word[i-1]) and not is_vowel(word[i+1]):\n                return word[i]\n    \n    # Return empty string if no vowel is found meeting the condition\n    return \"\"\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\"))  # Output: \"u\"\nprint(get_closest_vowel(\"FULL\"))    # Output: \"U\"\nprint(get_closest_vowel(\"quick\"))   # Output: \"\"\nprint(get_closest_vowel(\"ab\"))      # Output: \"\""}
{"task_id": "HumanEval/119", "completion": "def is_balanced(s):\n    balance = 0\n    for char in s:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0\n\ndef match_parens(lst):\n    # Try concatenating the strings in one order\n    if is_balanced(lst[0] + lst[1]):\n        return 'Yes'\n    \n    # Try concatenating the strings in the reverse order\n    if is_balanced(lst[1] + lst[0]):\n        return 'Yes'\n    \n    # If neither order results in a balanced string, return 'No'\n    return 'No'\n\n# Example tests\nprint(match_parens(['()(', ')']))  # Should return 'Yes'\nprint(match_parens([')', ')']))    # Should return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    # Sort the array in ascending order\n    sorted_arr = sorted(arr)\n    \n    # Slice the last k elements to get the k maximum elements\n    max_k_elements = sorted_arr[-k:]\n    \n    # Sort the k elements in ascending order for the output\n    max_k_elements.sort()\n    \n    return max_k_elements"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    # Initialize sum\n    total_sum = 0\n    \n    # Iterate through the list, considering only even indices\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:  # Check if the element is odd\n            total_sum += lst[i]\n    \n    return total_sum\n\n# Test the function\nprint(solution([5, 8, 7, 1]))  # Output: 12\nprint(solution([3, 3, 3, 3, 3]))  # Output: 9\nprint(solution([30, 13, 24, 321]))  # Output: 0"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    # Initialize sum\n    total_sum = 0\n    \n    # Iterate over the first k elements of arr\n    for i in range(k):\n        # Check if the number has at most two digits\n        if -100 < arr[i] < 100:\n            # Add the element to the total sum\n            total_sum += arr[i]\n    \n    # Return the total sum\n    return total_sum\n\n# Example usage:\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4\nresult = add_elements(arr, k)\nprint(result)  # Output should be 24 (i.e., 21 + 3)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    # Initialize the starting number and an empty list to hold the odd numbers\n    current_number = n\n    odd_numbers = []\n\n    # Loop until the current number becomes 1\n    while current_number != 1:\n        # If the current number is odd, add it to the list of odd numbers\n        if current_number % 2 != 0:\n            odd_numbers.append(current_number)\n        # Update the current number based on the Collatz rules\n        if current_number % 2 == 0:\n            current_number //= 2\n        else:\n            current_number = 3 * current_number + 1\n\n    # Add 1 to the list since it's always an odd number in the sequence\n    odd_numbers.append(1)\n\n    # Return the list of odd numbers in increasing order\n    return sorted(odd_numbers)\n\n# Example\nprint(get_odd_collatz(5))  # Output: [1, 5]"}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime\n\ndef valid_date(date):\n    try:\n        # Attempt to parse the date string using the mm-dd-yyyy format\n        parsed_date = datetime.strptime(date, '%m-%d-%Y')\n        \n        # Extract the month and day from the parsed date\n        month = parsed_date.month\n        day = parsed_date.day\n\n        # Validate the day range based on the month\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 1 <= day <= 31\n        elif month in [4, 6, 9, 11]:\n            return 1 <= day <= 30\n        elif month == 2:\n            # Leap year check is not included in the problem statement\n            return 1 <= day <= 29\n\n        # If the date parses correctly and passes day validation\n        return True\n\n    except ValueError:\n        # If date is in invalid format or out of the normal range for days in a month\n        return False\n\n# Tests\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))   # False\nprint(valid_date('06-04-2020'))  # True\nprint(valid_date('06/04/2020'))  # False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    # Check if there are whitespace characters and split if any are found\n    if ' ' in txt:\n        return txt.split()\n    \n    # Check if there are commas and split if any are found\n    if ',' in txt:\n        return txt.split(',')\n    \n    # Count lowercase letters with odd alphabetical order\n    odd_count = 0\n    for char in txt:\n        if char.islower() and (ord(char) - ord('a')) % 2 != 0:\n            odd_count += 1\n    \n    return odd_count\n\n# Testing\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))         # \u279e 3"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    # Check if the list is sorted in ascending order\n    is_ascending = all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))\n\n    # Check if no number appears more than twice\n    from collections import Counter\n    counts = Counter(lst)\n    has_valid_counts = all(count <= 2 for count in counts.values())\n\n    # Return True if both conditions are satisfied\n    return is_ascending and has_valid_counts\n\n# Test cases\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # \u279e False"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    # Helper function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Extract the start and end of both intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Find the maximum starting point and minimum ending point of the intersections\n    start = max(start1, start2)\n    end = min(end1, end2)\n\n    # Check if there is an intersection\n    if start <= end:\n        # Calculate the length of intersection\n        intersection_length = end - start + 1\n        # Check if the intersection length is a prime number\n        return \"YES\" if is_prime(intersection_length) else \"NO\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\""}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    # Check if the array is empty\n    if not arr:\n        return None\n    \n    # Initialize the sign product to 1 (neutral element for multiplication)\n    sign_product = 1\n    \n    # Calculate the product of signs of the numbers in the array\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        elif num == 0:\n            sign_product = 0\n            break\n    \n    # Calculate the sum of magnitudes of the numbers in the array\n    magnitude_sum = sum(abs(num) for num in arr)\n    \n    # Return the sum of magnitudes multiplied by the product of the signs\n    return sign_product * magnitude_sum\n\n# Testing cases\nprint(prod_signs([1, 2, 2, -4]))  # Expected: -9\nprint(prod_signs([0, 1]))         # Expected: 0\nprint(prod_signs([]))             # Expected: None"}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    N = len(grid)\n    all_paths = []\n    \n    # Step 1: Find cells for potential starting point\n    start_points = []\n    min_val = float('inf')\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] < min_val:\n                min_val = grid[i][j]\n                start_points = [(i, j)]\n            elif grid[i][j] == min_val:\n                start_points.append((i, j))\n    \n    # Step 2: Function to get valid neighbors\n    def get_neighbors(x, y):\n        neighbors = []\n        possible_moves = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        for move in possible_moves:\n            new_x, new_y = x + move[0], y + move[1]\n            if 0 <= new_x < N and 0 <= new_y < N:\n                neighbors.append((new_x, new_y))\n        return neighbors\n    \n    # Step 3: Backtracking function to find all paths of length k\n    def backtrack(x, y, path):\n        if len(path) == k:\n            all_paths.append(path)\n            return\n        for next_x, next_y in get_neighbors(x, y):\n            backtrack(next_x, next_y, path + [grid[next_x][next_y]])\n    \n    # Explore all paths starting from each of the start points\n    for x, y in start_points:\n        backtrack(x, y, [grid[x][y]])\n    \n    # Step 4: Return the lexicographically smallest path\n    if not all_paths:\n        return []\n    \n    return min(all_paths)\n\n# Example usage\ngrid1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk1 = 3\nprint(minPath(grid1, k1))  # Output: [1, 2, 1]\n\ngrid2 = [[5, 9, 3], [4, 1, 6], [7, 8, 2]]\nk2 = 1\nprint(minPath(grid2, k2))  # Output: [1]"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n    \n    # Initialize the first two numbers of the sequence\n    tribonacci = [1, 3]\n    \n    # Loop from 2 to n to fill the sequence\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            # Correction: fix the recurrence to use the last three elements in the list\n            # which represents tri(i-1), tri(i-2), and tri(i-3)\n            tribonacci.append(sum(tribonacci[-3:]))\n    \n    return tribonacci\n\n# Example check functions to test the solution\ndef check_function():\n    print(tri(3))  # [1, 3, 2, 8]\n    print(tri(4))  # [1, 3, 2, 8, 3]\n\ncheck_function()"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd_digit = False\n    for digit in str(n):\n        digit_int = int(digit)\n        if digit_int % 2 != 0:\n            product *= digit_int\n            has_odd_digit = True\n    return product if has_odd_digit else 0\n\n# Test cases\nprint(digits(1))  # Output: 1\nprint(digits(4))  # Output: 0\nprint(digits(235))  # Output: 15"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    nested = False\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n            # Check if there is still an opening bracket in stack, which means the current ']' has a nested [\n            if stack:\n                nested = True\n\n    return nested\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate over each element in the list\n    for num in lst:\n        # Round the number to the nearest ceiling (upper integer)\n        rounded_num = math.ceil(num)\n        # Calculate the square of the rounded number\n        squared_num = rounded_num ** 2\n        # Add the squared number to the total sum\n        total_sum += squared_num\n    \n    return total_sum\n\n# Test cases\nprint(sum_squares([1, 2, 3]))       # Expected: 14\nprint(sum_squares([1, 4, 9]))       # Expected: 98\nprint(sum_squares([1, 3, 5, 7]))    # Expected: 84\nprint(sum_squares([1.4, 4.2, 0]))    # Expected: 29\nprint(sum_squares([-2.4, 1, 1]))    # Expected: 6"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    # Check if txt is empty\n    if not txt:\n        return False\n    \n    # Get the last character of the string\n    last_char = txt[-1]\n    \n    # Check if last character is alphabetical\n    if not last_char.isalpha():\n        return False\n    \n    # Check if the last character is the only character in txt and is a letter\n    if len(txt) == 1:\n        return True\n    \n    # Check the character before the last one to ensure it's not part of a word\n    penultimate_char = txt[-2]\n    \n    # The condition makes sure that the penultimate character is not a letter,\n    # which means the last character is not part of a word (it should be a space or a special character).\n    return not penultimate_char.isalpha()\n\n# Test cases to verify the functionality\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    # Iterate over the array starting from the second element to the end\n    for i in range(1, len(arr)):\n        # Check if the current element is less than the preceding element\n        if arr[i] < arr[i - 1]:\n            # Return the index if an element is found that is not in ascending order\n            return i\n    # If no such element is found, return -1\n    return -1\n\n# Test cases\nprint(can_arrange([1,2,4,3,5]))  # Output: 3\nprint(can_arrange([1,2,3]))      # Output: -1"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    max_neg = None\n    min_pos = None\n    \n    for num in lst:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n        elif num > 0:\n            if min_pos is None or num < min_pos:\n                min_pos = num\n    \n    return (max_neg, min_pos)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def to_float(value):\n        if isinstance(value, str):\n            # Replace comma with dot for decimal conversion\n            value = value.replace(',', '.')\n            return float(value)\n        return float(value)\n    \n    # Convert a and b to floating point for comparison\n    float_a = to_float(a)\n    float_b = to_float(b)\n    \n    # Compare and return the larger value in its original type\n    if float_a > float_b:\n        return a\n    elif float_b > float_a:\n        return b\n    else:\n        # If values are equal after conversion\n        return None\n\n# Test cases\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\nprint(compare_one(\"1\", 1))  # \u279e None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    # Check if n is sufficiently large to be a sum of 4 positive even numbers\n    if n < 8:\n        return False\n    \n    # Subtract the sum of the smallest 4 even numbers (2+2+2+2 = 8) from n\n    # and check if the remaining value is non-negative and an even number\n    return (n - 8) % 2 == 0\n\n# Examples\nprint(is_equal_to_sum_even(4))  # Expected: False\nprint(is_equal_to_sum_even(6))  # Expected: False\nprint(is_equal_to_sum_even(8))  # Expected: True\nprint(is_equal_to_sum_even(10)) # Expected: True\nprint(is_equal_to_sum_even(12)) # Expected: True\nprint(is_equal_to_sum_even(14)) # Expected: True\nprint(is_equal_to_sum_even(15)) # Expected: False"}
{"task_id": "HumanEval/139", "completion": "def factorial(num):\n    \"\"\"Compute the factorial of a given number.\"\"\"\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result\n\n# Test the function\nprint(special_factorial(4))  # Expected output: 288"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    # First, replace sequences of more than 2 spaces with a dash.\n    text = re.sub(r' {3,}', '-', text)\n    # Then replace all remaining single spaces with underscores.\n    text = re.sub(r' ', '_', text)\n    \n    return text\n\n# Test cases to validate the behavior\nassert fix_spaces(\"Example\") == \"Example\"\nassert fix_spaces(\"Example 1\") == \"Example_1\"\nassert fix_spaces(\" Example 2\") == \"_Example_2\"\nassert fix_spaces(\" Example   3\") == \"_Example-3\"\nprint(\"All test cases passed.\")"}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    # Using regex to validate the conditions:\n    # - That the name starts with a letter and is followed by alphanumeric characters (including underscore),\n    # - Optionally followed by dots and/or underscores, and digits (up to 3 digits),\n    # - Exactly one dot, and a specific extension among 'txt', 'exe', 'dll'.\n    pattern = r\"^([a-zA-Z][\\w.]*[a-zA-Z0-9]*[a-zA-Z])?(\\d{0,3})\\.(txt|exe|dll)$\"\n    if re.match(pattern, file_name):\n        # Check the total number of digits in the name part:\n        if sum(c.isdigit() for c in file_name.split('.')[0]) <= 3:\n            return 'Yes'\n    return 'No'\n\n# Example usage\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\"))  # => 'No' (the name should start with a latin alphapet letter)\nprint(file_name_check(\"example2003.txt\"))  # => 'No' (more than 3 digits)\nprint(file_name_check(\"test1.exe\"))  # => 'Yes'"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total_sum = 0\n\n    # Loop through the list with index and value.\n    for index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4 != 0:\n            total_sum += value ** 2  # Square the value if index is a multiple of 3 and not a multiple of 4\n        elif index % 4 == 0:\n            total_sum += value ** 3  # Cube the value if index is a multiple of 4\n        else:\n            total_sum += value  # Keep the value unchanged if the index neither is a multiple of 3 nor 4\n    \n    return total_sum"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n# Example usage\nsentence = \"let's go for swimming\"\nprint(f\"Input: '{sentence}'\\nOutput: '{words_in_sentence(sentence)}'\")"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    # Convert the string fractions into Fraction objects\n    fraction_x = Fraction(x)\n    fraction_n = Fraction(n)\n    \n    # Multiply the fractions\n    product = fraction_x * fraction_n\n    \n    # Check if the resulting fraction is a whole number\n    return product.denominator == 1\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False"}
{"task_id": "HumanEval/145", "completion": "def sum_of_digits(n):\n    \"\"\"\n    Helper function to calculate the sum of digits of a number.\n    It handles negative numbers as well.\n    \"\"\"\n    return sum(int(digit) for digit in str(abs(n)))\n\ndef order_by_points(nums):\n    # Sort based on the sum of digits. Tuples are sorted lexicographically,\n    # so tuples with smaller sums will come first.\n    # If two numbers have the same sum of digits, they are sorted by their original indices.\n    return [num for _, _, num in sorted((sum_of_digits(num), i, num) for i, num in enumerate(nums))]\n\n# Example check\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))                     # Output: []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_odd_digit(digit):\n        # A helper function to check if a digit is odd\n        return int(digit) % 2 != 0\n\n    count = 0\n    \n    for num in nums:\n        # Convert number to string to check each digit\n        str_num = str(num)\n        if num > 10 and is_odd_digit(str_num[0]) and is_odd_digit(str_num[-1]):\n            count += 1\n\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Expected output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Expected output: 2"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    # Initialize the array a\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    # Calculate the remainders when each element of a is divided by 3\n    remainder_counter = [0] * 3\n    for value in a:\n        remainder = value % 3\n        remainder_counter[remainder] += 1\n\n    # Initialize count of the number of valid triples\n    count = 0\n\n    # Number of ways to choose 3 numbers where all numbers leave the same remainder (0, 0, 0 or 1, 1, 1 or 2, 2, 2)\n    if remainder_counter[0] >= 3:\n        count += remainder_counter[0] * (remainder_counter[0] - 1) * (remainder_counter[0] - 2) // 6\n    if remainder_counter[1] >= 3:\n        count += remainder_counter[1] * (remainder_counter[1] - 1) * (remainder_counter[1] - 2) // 6\n    if remainder_counter[2] >= 3:\n        count += remainder_counter[2] * (remainder_counter[2] - 1) * (remainder_counter[2] - 2) // 6\n\n    # Number of ways to choose 3 numbers where all numbers leave different remainders (0, 1, 2)\n    count += remainder_counter[0] * remainder_counter[1] * remainder_counter[2]\n\n    return count\n\n# Example\nprint(get_max_triples(5))  # Output: 1"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    # List of planets in order of proximity to the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Checking if both planet names are valid\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Getting the index positions of the planets\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    # Ensuring planet1 comes before planet2 (relative to the Sun)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    # Returning the planets that are in between\n    return tuple(planets[index1 + 1:index2])"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the filtered list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst\n\n# Test cases\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]"}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    x_or_y(7, 34, 12) returns 34\n    x_or_y(15, 8, 5) returns 5\n    \n    \"\"\"\n    return x if is_prime(n) else y\n\n# Examples to test the function\nprint(x_or_y(7, 34, 12))  # Should return 34 since 7 is a prime number\nprint(x_or_y(15, 8, 5))   # Should return 5 since 15 is not a prime number"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0\n   \n    If the input list is empty, return 0.\n    '''\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)\n\n# Example calls\nprint(double_the_difference([1, 3, 2, 0]))  # 10\nprint(double_the_difference([-1, -2, 0]))   # 0\nprint(double_the_difference([9, -2]))       # 81\nprint(double_the_difference([0]))           # 0"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    # Calculate the absolute difference between the guess and the actual score for each match\n    differences = [abs(g - s) for g, s in zip(guess, game)]\n    return differences\n\n# Example tests\nprint(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]))  # Expected output: [0,0,0,0,3,3]\nprint(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]))  # Expected output: [4,4,1,0,0,6]"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = None\n    strongest_extension = None\n\n    for extension in extensions:\n        # Calculating the strength based on Uppercase and Lowercase letters\n        strength = sum(1 if char.isupper() else -1 for char in extension)\n        \n        # If this is the first extension or if this extension is stronger,\n        # set it as the strongest extension.\n        if max_strength is None or strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n\n    # Returning the result in the required format\n    return f\"{class_name}.{strongest_extension}\"\n\n# Test the function with the provided example\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    # Concatenate the first word with itself\n    doubled_a = a + a\n    # Check if b is a substring of doubled_a\n    return b in doubled_a\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))     # => False\nprint(cycpattern_check(\"hello\", \"ell\"))    # => True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # => False\nprint(cycpattern_check(\"abab\", \"baa\"))      # => True\nprint(cycpattern_check(\"efef\", \"eeff\"))     # => False\nprint(cycpattern_check(\"himenss\", \"simen\")) # => True"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to a positive one to handle negative numbers correctly\n    num = abs(num) \n    \n    # Initialize counters for even and odd digits\n    even_count, odd_count = 0, 0\n    \n    # Loop through each digit in the number\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Return a tuple of the counts of even and odd digits\n    return (even_count, odd_count)\n\n# Test the function\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))   # Output: (1, 2)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    # Define the mapping for Roman numerals\n    roman_map = [\n        (1000, \"m\"), (900, \"cm\"), (500, \"d\"), (400, \"cd\"),\n        (100, \"c\"), (90, \"xc\"), (50, \"l\"), (40, \"xl\"),\n        (10, \"x\"), (9, \"ix\"), (5, \"v\"), (4, \"iv\"), (1, \"i\")\n    ]\n    \n    # Initialize an empty result string\n    result = \"\"\n    \n    # Iterate over each numeral in the roman_map\n    for value, numeral in roman_map:\n        # While the current value is less than or equal to the number\n        while number >= value:\n            # Subtract the value from the number\n            number -= value\n            # Append the numeral to the result string\n            result += numeral\n\n    return result\n\n# Tests\nprint(int_to_mini_roman(19))  # Should print 'xix'\nprint(int_to_mini_roman(152)) # Should print 'clii'\nprint(int_to_mini_roman(426)) # Should print 'cdxxvi'"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    # Sort the sides to ensure the largest is treated as the hypotenuse\n    sides = sorted([a, b, c])\n\n    # Check if the sum of the squares of the two smaller sides equals the square of the largest side\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5))  # Expected True, as 3\u00b2 + 4\u00b2 = 5\u00b2\nprint(right_angle_triangle(1, 2, 3))  # Expected False, as 1\u00b2 + 2\u00b2 \u2260 3\u00b2"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    # Initialize variables to keep track of the maximum unique characters and the corresponding word\n    max_unique_chars = 0\n    result = \"\"\n    \n    for word in words:\n        # Calculate the number of unique characters in the current word\n        unique_chars = len(set(word))\n        \n        # Update the result if the current word has more unique characters\n        # or if it has the same number of unique characters but is lexicographically smaller\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < result):\n            max_unique_chars = unique_chars\n            result = word\n    \n    return result\n\n# Test cases to validate the logic\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))   # Output: \"aaaaaaa\""}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    # Calculate the amount of carrots the rabbit can actually eat\n    eat_now = min(need, remaining)\n    \n    # Update the total number of carrots eaten and the remaining carrots\n    total_eaten = number + eat_now\n    carrots_left = max(0, remaining - eat_now)\n    \n    # Return the results as a list\n    return [total_eaten, carrots_left]\n\n# Example test cases\nprint(eat(5, 6, 10))  # -> [11, 4]\nprint(eat(4, 8, 9))   # -> [12, 1]\nprint(eat(1, 10, 10)) # -> [11, 0]\nprint(eat(2, 11, 5))  # -> [7, 0]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operators, operands):\n    # Start with the first operand\n    expression = str(operands[0])\n    \n    # Build the expression string\n    for i in range(len(operators)):\n        expression += f\" {operators[i]} {operands[i + 1]}\"\n\n    # Evaluate and return the result\n    return eval(expression)\n\n# Example testing\nprint(do_algebra(['+', '*', '-'], [2, 3, 4, 5]))  # Expected output: 9"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    # Function to swap case\n    def swap_case(char):\n        if char.islower():\n            return char.upper()\n        elif char.isupper():\n            return char.lower()\n        else:\n            return char\n\n    # Check and process each character in the string\n    contains_letters = False\n    processed_string = ''\n    \n    for char in s:\n        if char.isalpha():\n            contains_letters = True\n        processed_string += swap_case(char)\n    \n    # If string contains no letters, reverse it\n    if not contains_letters:\n        return processed_string[::-1]\n    \n    return processed_string\n\n# Test the function\nprint(solve(\"1234\"))  # \"4321\"\nprint(solve(\"ab\"))    # \"AB\"\nprint(solve(\"#a@C\"))  # \"#A@c\""}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text: str) -> str:\n    if not text:\n        return None\n    # Encode the text to bytes\n    text_bytes = text.encode()\n    # Create an md5 hash object\n    md5_hash = hashlib.md5()\n    # Update the hash object with the bytes of the text\n    md5_hash.update(text_bytes)\n    # Get the hexadecimal representation of the hash\n    md5_hex = md5_hash.hexdigest()\n    return md5_hex\n\n# Test the function with a provided example\nif __name__ == \"__main__\":\n    test_text = \"Hello world\"\n    expected_md5 = \"3e25960a79dbc69b674cd4ec67a72c62\"\n    assert string_to_md5(test_text) == expected_md5\n    print(f\"MD5 of '{test_text}': {expected_md5}\")"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    # Ensure a is less than b for the range function, swap if necessary\n    if a > b:\n        a, b = b, a\n\n    # Generate even numbers between a and b (inclusive)\n    even_numbers = [i for i in range(a, b + 1) if i % 2 == 0]\n    \n    return even_numbers\n\n# Testing the function\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # Output: []"}
